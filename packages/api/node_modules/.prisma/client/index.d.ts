
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Banner
 * 
 */
export type Banner = {
  id: string
  title: string
  description: string[]
  image: string
  bg: string
  status: boolean
  order: number
  created_at: string
}

/**
 * Model Client
 * 
 */
export type Client = {
  id: string
  title: string
  description: string[]
  status: boolean
  order: number
  created_at: string
}

/**
 * Model Filter
 * 
 */
export type Filter = {
  id: string
  name: string
  image: string
  line: string | null
  type: string | null
  dia_ext: string | null
  height: string | null
  dia_int: string | null
  thread: string | null
  val_anti_ret: string | null
  val_ali: string | null
  model: string | null
  status: boolean
  order: number
  created_at: string
  updated_at: string
}

/**
 * Model Product
 * 
 */
export type Product = {
  id: string
  title: string
  image: string
  category: string | null
  capacity: string | null
  cca10: string | null
  polarity: string | null
  large: string | null
  width: string | null
  height: string | null
  status: boolean
  order: number
  created_at: string
  updated_at: string
}

/**
 * Model Review
 * 
 */
export type Review = {
  id: string
  body: string[]
  author: string
  status: boolean
  order: number
  created_at: string
}

/**
 * Model Success
 * 
 */
export type Success = {
  id: string
  title: string
  description: string[]
  status: boolean
  order: number
  created_at: string
}

/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string
  email: string
  password: string
  role: string
  created_at: string
}

/**
 * Model LubVehLiviano
 * 
 */
export type LubVehLiviano = {
  id: string
  nombre: string
  descripcion: string[]
  image: string | null
  presentacion: string
  status: boolean
  order: number
  indicado_para: string
  especificacion: string
  created_at: string
  updated_at: string
}

/**
 * Model LubMoto
 * 
 */
export type LubMoto = {
  id: string
  nombre: string
  descripcion: string[]
  presentacion: string
  indicado_para: string
  status: boolean
  order: number
  image: string
  created_at: string
  updated_at: string
}

/**
 * Model LubAux
 * 
 */
export type LubAux = {
  id: string
  nombre: string
  descripcion: string[]
  image: string
  presentacion: string
  status: boolean
  order: number
  indicado_para: string
  rec_honda: boolean
  created_at: string
  updated_at: string
}

/**
 * Model LubVehPesado
 * 
 */
export type LubVehPesado = {
  id: string
  nombre: string
  descripcion: string[]
  caracteristicas: string[]
  image: string
  presentacion: string
  atiende_excede: string
  aprobado: string
  status: boolean
  order: number
  rec_exxon_mob: string
  created_at: string
  updated_at: string
}

/**
 * Model Filtros
 * 
 */
export type Filtros = {
  id: string
  nombre: string
  linea: string
  imagen: string
  altura: string | null
  dia_ext: string | null
  dia_int: string | null
  estado: boolean
  orden: number
  rosca: string | null
  tipo: string
  val_anti_ret: string | null
  val_ali: string | null
  modelo: string | null
  created_at: Date
  updated_at: Date | null
}

/**
 * Model Lubricantes
 * 
 */
export type Lubricantes = {
  id: string
  nombre: string
  descripcion: string[]
  imagen: string
  linea: string
  presentacion: string | null
  indicado_para: string | null
  especificacion: string | null
  rec_honda: boolean
  rec_exxon_mob: string | null
  caracteristicas: string[]
  atiende_excede: string | null
  aprobado: string | null
  estado: boolean
  orden: number
  created_at: Date
  updated_at: Date | null
}

/**
 * Model Baterias
 * 
 */
export type Baterias = {
  id: string
  nombre: string
  imagen: string
  categoria: string | null
  capacidad: string | null
  cca10: string | null
  polaridad: string | null
  largo: string | null
  ancho: string | null
  altura: string | null
  estado: boolean
  orden: number
  created_at: Date
  updated_at: Date | null
}

/**
 * Model Vacancias
 * 
 */
export type Vacancias = {
  id: string
  titulo: string
  imagen: string
  preguntas: string[]
  requisitos: string[]
  vigencia: string
  area: string
  estado: boolean
  orden: number
  created_at: Date
  updated_at: Date | null
}

/**
 * Model Marcas
 * 
 */
export type Marcas = {
  id: string
  nombre: string
  link: string
  imagen: string
  estado: boolean
  orden: number
  created_at: Date
  updated_at: Date | null
}

/**
 * Model Clientes
 * 
 */
export type Clientes = {
  id: string
  nombre: string
  link: string
  imagen: string
  estado: boolean
  orden: number
  created_at: Date
  updated_at: Date | null
}

/**
 * Model Promocion
 * 
 */
export type Promocion = {
  id: string
  nombre: string
  link: string
  imagen: string
  estado: boolean
  orden: number
  fechaInicio: Date | null
  fechaFin: Date | null
  empresaId: string
  created_at: Date
  updated_at: Date
}

/**
 * Model PromocionDetalle
 * 
 */
export type PromocionDetalle = {
  id: string
  promocionId: string
  productoId: string
  porcentaje: number | null
  monto: number | null
  created_at: Date
  updated_at: Date
}

/**
 * Model Empresa
 * 
 */
export type Empresa = {
  id: string
  nombre: string
  link: string
  imagen: string
  estado: boolean
  orden: number
  created_at: Date
  updated_at: Date
}

/**
 * Model Usuario
 * 
 */
export type Usuario = {
  id: string
  cedula: string | null
  codigo: string | null
  nombre: string
  estado: boolean
  telefono: string | null
  email: string | null
  empresaId: string
  created_at: Date | null
  updated_at: Date | null
}

/**
 * Model Voucher
 * 
 */
export type Voucher = {
  id: string
  codigo: number
  fecha: Date
  canjeado: boolean
  canjeadoFecha: Date | null
  promocionId: string
  productoId: string
  cantidad: number
  usuarioId: string
  created_at: Date
  updated_at: Date
}

/**
 * Model Sequence
 * 
 */
export type Sequence = {
  id: string
  nombre: string
  seq: number
}

/**
 * Model Producto
 * 
 */
export type Producto = {
  id: string
  nombre: string
  codigo: number
  precio: number | null
  codigoBarra: string | null
  estado: boolean
  orden: number
  created_at: Date
  updated_at: Date | null
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Banners
 * const banners = await prisma.banner.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Banners
   * const banners = await prisma.banner.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;


  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): PrismaPromise<Prisma.JsonObject>;

      /**
   * `prisma.banner`: Exposes CRUD operations for the **Banner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Banners
    * const banners = await prisma.banner.findMany()
    * ```
    */
  get banner(): Prisma.BannerDelegate<GlobalReject>;

  /**
   * `prisma.client`: Exposes CRUD operations for the **Client** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clients
    * const clients = await prisma.client.findMany()
    * ```
    */
  get client(): Prisma.ClientDelegate<GlobalReject>;

  /**
   * `prisma.filter`: Exposes CRUD operations for the **Filter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Filters
    * const filters = await prisma.filter.findMany()
    * ```
    */
  get filter(): Prisma.FilterDelegate<GlobalReject>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<GlobalReject>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<GlobalReject>;

  /**
   * `prisma.success`: Exposes CRUD operations for the **Success** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Successes
    * const successes = await prisma.success.findMany()
    * ```
    */
  get success(): Prisma.SuccessDelegate<GlobalReject>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.lubVehLiviano`: Exposes CRUD operations for the **LubVehLiviano** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LubVehLivianos
    * const lubVehLivianos = await prisma.lubVehLiviano.findMany()
    * ```
    */
  get lubVehLiviano(): Prisma.LubVehLivianoDelegate<GlobalReject>;

  /**
   * `prisma.lubMoto`: Exposes CRUD operations for the **LubMoto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LubMotos
    * const lubMotos = await prisma.lubMoto.findMany()
    * ```
    */
  get lubMoto(): Prisma.LubMotoDelegate<GlobalReject>;

  /**
   * `prisma.lubAux`: Exposes CRUD operations for the **LubAux** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LubAuxes
    * const lubAuxes = await prisma.lubAux.findMany()
    * ```
    */
  get lubAux(): Prisma.LubAuxDelegate<GlobalReject>;

  /**
   * `prisma.lubVehPesado`: Exposes CRUD operations for the **LubVehPesado** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LubVehPesados
    * const lubVehPesados = await prisma.lubVehPesado.findMany()
    * ```
    */
  get lubVehPesado(): Prisma.LubVehPesadoDelegate<GlobalReject>;

  /**
   * `prisma.filtros`: Exposes CRUD operations for the **Filtros** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Filtros
    * const filtros = await prisma.filtros.findMany()
    * ```
    */
  get filtros(): Prisma.FiltrosDelegate<GlobalReject>;

  /**
   * `prisma.lubricantes`: Exposes CRUD operations for the **Lubricantes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lubricantes
    * const lubricantes = await prisma.lubricantes.findMany()
    * ```
    */
  get lubricantes(): Prisma.LubricantesDelegate<GlobalReject>;

  /**
   * `prisma.baterias`: Exposes CRUD operations for the **Baterias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Baterias
    * const baterias = await prisma.baterias.findMany()
    * ```
    */
  get baterias(): Prisma.BateriasDelegate<GlobalReject>;

  /**
   * `prisma.vacancias`: Exposes CRUD operations for the **Vacancias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vacancias
    * const vacancias = await prisma.vacancias.findMany()
    * ```
    */
  get vacancias(): Prisma.VacanciasDelegate<GlobalReject>;

  /**
   * `prisma.marcas`: Exposes CRUD operations for the **Marcas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Marcas
    * const marcas = await prisma.marcas.findMany()
    * ```
    */
  get marcas(): Prisma.MarcasDelegate<GlobalReject>;

  /**
   * `prisma.clientes`: Exposes CRUD operations for the **Clientes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Clientes
    * const clientes = await prisma.clientes.findMany()
    * ```
    */
  get clientes(): Prisma.ClientesDelegate<GlobalReject>;

  /**
   * `prisma.promocion`: Exposes CRUD operations for the **Promocion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Promocions
    * const promocions = await prisma.promocion.findMany()
    * ```
    */
  get promocion(): Prisma.PromocionDelegate<GlobalReject>;

  /**
   * `prisma.promocionDetalle`: Exposes CRUD operations for the **PromocionDetalle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PromocionDetalles
    * const promocionDetalles = await prisma.promocionDetalle.findMany()
    * ```
    */
  get promocionDetalle(): Prisma.PromocionDetalleDelegate<GlobalReject>;

  /**
   * `prisma.empresa`: Exposes CRUD operations for the **Empresa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Empresas
    * const empresas = await prisma.empresa.findMany()
    * ```
    */
  get empresa(): Prisma.EmpresaDelegate<GlobalReject>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **Usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.UsuarioDelegate<GlobalReject>;

  /**
   * `prisma.voucher`: Exposes CRUD operations for the **Voucher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Vouchers
    * const vouchers = await prisma.voucher.findMany()
    * ```
    */
  get voucher(): Prisma.VoucherDelegate<GlobalReject>;

  /**
   * `prisma.sequence`: Exposes CRUD operations for the **Sequence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sequences
    * const sequences = await prisma.sequence.findMany()
    * ```
    */
  get sequence(): Prisma.SequenceDelegate<GlobalReject>;

  /**
   * `prisma.producto`: Exposes CRUD operations for the **Producto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Productos
    * const productos = await prisma.producto.findMany()
    * ```
    */
  get producto(): Prisma.ProductoDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Extensions
   */
  export type Extension = runtime.Extension 

  /**
   * Prisma Client JS version: 4.5.0
   * Query Engine version: 694eea289a8462c80264df36757e4fdc129b1b32
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export import FieldRef = runtime.FieldRef

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Banner: 'Banner',
    Client: 'Client',
    Filter: 'Filter',
    Product: 'Product',
    Review: 'Review',
    Success: 'Success',
    User: 'User',
    LubVehLiviano: 'LubVehLiviano',
    LubMoto: 'LubMoto',
    LubAux: 'LubAux',
    LubVehPesado: 'LubVehPesado',
    Filtros: 'Filtros',
    Lubricantes: 'Lubricantes',
    Baterias: 'Baterias',
    Vacancias: 'Vacancias',
    Marcas: 'Marcas',
    Clientes: 'Clientes',
    Promocion: 'Promocion',
    PromocionDetalle: 'PromocionDetalle',
    Empresa: 'Empresa',
    Usuario: 'Usuario',
    Voucher: 'Voucher',
    Sequence: 'Sequence',
    Producto: 'Producto'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PromocionCountOutputType
   */


  export type PromocionCountOutputType = {
    promocionVouchers: number
    promociones: number
  }

  export type PromocionCountOutputTypeSelect = {
    promocionVouchers?: boolean
    promociones?: boolean
  }

  export type PromocionCountOutputTypeGetPayload<
    S extends boolean | null | undefined | PromocionCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? PromocionCountOutputType
    : S extends undefined
    ? never
    : S extends PromocionCountOutputTypeArgs
    ?'include' extends U
    ? PromocionCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof PromocionCountOutputType ? PromocionCountOutputType[P] : never
  } 
    : PromocionCountOutputType
  : PromocionCountOutputType




  // Custom InputTypes

  /**
   * PromocionCountOutputType without action
   */
  export type PromocionCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the PromocionCountOutputType
     * 
    **/
    select?: PromocionCountOutputTypeSelect | null
  }



  /**
   * Count Type EmpresaCountOutputType
   */


  export type EmpresaCountOutputType = {
    empresaUsuario: number
  }

  export type EmpresaCountOutputTypeSelect = {
    empresaUsuario?: boolean
  }

  export type EmpresaCountOutputTypeGetPayload<
    S extends boolean | null | undefined | EmpresaCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? EmpresaCountOutputType
    : S extends undefined
    ? never
    : S extends EmpresaCountOutputTypeArgs
    ?'include' extends U
    ? EmpresaCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof EmpresaCountOutputType ? EmpresaCountOutputType[P] : never
  } 
    : EmpresaCountOutputType
  : EmpresaCountOutputType




  // Custom InputTypes

  /**
   * EmpresaCountOutputType without action
   */
  export type EmpresaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EmpresaCountOutputType
     * 
    **/
    select?: EmpresaCountOutputTypeSelect | null
  }



  /**
   * Count Type UsuarioCountOutputType
   */


  export type UsuarioCountOutputType = {
    usuarios: number
  }

  export type UsuarioCountOutputTypeSelect = {
    usuarios?: boolean
  }

  export type UsuarioCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsuarioCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsuarioCountOutputType
    : S extends undefined
    ? never
    : S extends UsuarioCountOutputTypeArgs
    ?'include' extends U
    ? UsuarioCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsuarioCountOutputType ? UsuarioCountOutputType[P] : never
  } 
    : UsuarioCountOutputType
  : UsuarioCountOutputType




  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     * 
    **/
    select?: UsuarioCountOutputTypeSelect | null
  }



  /**
   * Count Type ProductoCountOutputType
   */


  export type ProductoCountOutputType = {
    productos: number
    productosPromoDet: number
  }

  export type ProductoCountOutputTypeSelect = {
    productos?: boolean
    productosPromoDet?: boolean
  }

  export type ProductoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ProductoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ProductoCountOutputType
    : S extends undefined
    ? never
    : S extends ProductoCountOutputTypeArgs
    ?'include' extends U
    ? ProductoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ProductoCountOutputType ? ProductoCountOutputType[P] : never
  } 
    : ProductoCountOutputType
  : ProductoCountOutputType




  // Custom InputTypes

  /**
   * ProductoCountOutputType without action
   */
  export type ProductoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ProductoCountOutputType
     * 
    **/
    select?: ProductoCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Banner
   */


  export type AggregateBanner = {
    _count: BannerCountAggregateOutputType | null
    _avg: BannerAvgAggregateOutputType | null
    _sum: BannerSumAggregateOutputType | null
    _min: BannerMinAggregateOutputType | null
    _max: BannerMaxAggregateOutputType | null
  }

  export type BannerAvgAggregateOutputType = {
    order: number | null
  }

  export type BannerSumAggregateOutputType = {
    order: number | null
  }

  export type BannerMinAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    bg: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
  }

  export type BannerMaxAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    bg: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
  }

  export type BannerCountAggregateOutputType = {
    id: number
    title: number
    description: number
    image: number
    bg: number
    status: number
    order: number
    created_at: number
    _all: number
  }


  export type BannerAvgAggregateInputType = {
    order?: true
  }

  export type BannerSumAggregateInputType = {
    order?: true
  }

  export type BannerMinAggregateInputType = {
    id?: true
    title?: true
    image?: true
    bg?: true
    status?: true
    order?: true
    created_at?: true
  }

  export type BannerMaxAggregateInputType = {
    id?: true
    title?: true
    image?: true
    bg?: true
    status?: true
    order?: true
    created_at?: true
  }

  export type BannerCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    image?: true
    bg?: true
    status?: true
    order?: true
    created_at?: true
    _all?: true
  }

  export type BannerAggregateArgs = {
    /**
     * Filter which Banner to aggregate.
     * 
    **/
    where?: BannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banners to fetch.
     * 
    **/
    orderBy?: Enumerable<BannerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banners from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banners.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Banners
    **/
    _count?: true | BannerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BannerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BannerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BannerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BannerMaxAggregateInputType
  }

  export type GetBannerAggregateType<T extends BannerAggregateArgs> = {
        [P in keyof T & keyof AggregateBanner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBanner[P]>
      : GetScalarType<T[P], AggregateBanner[P]>
  }




  export type BannerGroupByArgs = {
    where?: BannerWhereInput
    orderBy?: Enumerable<BannerOrderByWithAggregationInput>
    by: Array<BannerScalarFieldEnum>
    having?: BannerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BannerCountAggregateInputType | true
    _avg?: BannerAvgAggregateInputType
    _sum?: BannerSumAggregateInputType
    _min?: BannerMinAggregateInputType
    _max?: BannerMaxAggregateInputType
  }


  export type BannerGroupByOutputType = {
    id: string
    title: string
    description: string[]
    image: string
    bg: string
    status: boolean
    order: number
    created_at: string
    _count: BannerCountAggregateOutputType | null
    _avg: BannerAvgAggregateOutputType | null
    _sum: BannerSumAggregateOutputType | null
    _min: BannerMinAggregateOutputType | null
    _max: BannerMaxAggregateOutputType | null
  }

  type GetBannerGroupByPayload<T extends BannerGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BannerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BannerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BannerGroupByOutputType[P]>
            : GetScalarType<T[P], BannerGroupByOutputType[P]>
        }
      >
    >


  export type BannerSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    image?: boolean
    bg?: boolean
    status?: boolean
    order?: boolean
    created_at?: boolean
  }

  export type BannerGetPayload<
    S extends boolean | null | undefined | BannerArgs,
    U = keyof S
      > = S extends true
        ? Banner
    : S extends undefined
    ? never
    : S extends BannerArgs | BannerFindManyArgs
    ?'include' extends U
    ? Banner 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Banner ? Banner[P] : never
  } 
    : Banner
  : Banner


  type BannerCountArgs = Merge<
    Omit<BannerFindManyArgs, 'select' | 'include'> & {
      select?: BannerCountAggregateInputType | true
    }
  >

  export interface BannerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Banner that matches the filter.
     * @param {BannerFindUniqueArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BannerFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BannerFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Banner'> extends True ? CheckSelect<T, Prisma__BannerClient<Banner>, Prisma__BannerClient<BannerGetPayload<T>>> : CheckSelect<T, Prisma__BannerClient<Banner | null, null>, Prisma__BannerClient<BannerGetPayload<T> | null, null>>

    /**
     * Find the first Banner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerFindFirstArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BannerFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BannerFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Banner'> extends True ? CheckSelect<T, Prisma__BannerClient<Banner>, Prisma__BannerClient<BannerGetPayload<T>>> : CheckSelect<T, Prisma__BannerClient<Banner | null, null>, Prisma__BannerClient<BannerGetPayload<T> | null, null>>

    /**
     * Find zero or more Banners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Banners
     * const banners = await prisma.banner.findMany()
     * 
     * // Get first 10 Banners
     * const banners = await prisma.banner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bannerWithIdOnly = await prisma.banner.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BannerFindManyArgs>(
      args?: SelectSubset<T, BannerFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Banner>>, PrismaPromise<Array<BannerGetPayload<T>>>>

    /**
     * Create a Banner.
     * @param {BannerCreateArgs} args - Arguments to create a Banner.
     * @example
     * // Create one Banner
     * const Banner = await prisma.banner.create({
     *   data: {
     *     // ... data to create a Banner
     *   }
     * })
     * 
    **/
    create<T extends BannerCreateArgs>(
      args: SelectSubset<T, BannerCreateArgs>
    ): CheckSelect<T, Prisma__BannerClient<Banner>, Prisma__BannerClient<BannerGetPayload<T>>>

    /**
     * Create many Banners.
     *     @param {BannerCreateManyArgs} args - Arguments to create many Banners.
     *     @example
     *     // Create many Banners
     *     const banner = await prisma.banner.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BannerCreateManyArgs>(
      args?: SelectSubset<T, BannerCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Banner.
     * @param {BannerDeleteArgs} args - Arguments to delete one Banner.
     * @example
     * // Delete one Banner
     * const Banner = await prisma.banner.delete({
     *   where: {
     *     // ... filter to delete one Banner
     *   }
     * })
     * 
    **/
    delete<T extends BannerDeleteArgs>(
      args: SelectSubset<T, BannerDeleteArgs>
    ): CheckSelect<T, Prisma__BannerClient<Banner>, Prisma__BannerClient<BannerGetPayload<T>>>

    /**
     * Update one Banner.
     * @param {BannerUpdateArgs} args - Arguments to update one Banner.
     * @example
     * // Update one Banner
     * const banner = await prisma.banner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BannerUpdateArgs>(
      args: SelectSubset<T, BannerUpdateArgs>
    ): CheckSelect<T, Prisma__BannerClient<Banner>, Prisma__BannerClient<BannerGetPayload<T>>>

    /**
     * Delete zero or more Banners.
     * @param {BannerDeleteManyArgs} args - Arguments to filter Banners to delete.
     * @example
     * // Delete a few Banners
     * const { count } = await prisma.banner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BannerDeleteManyArgs>(
      args?: SelectSubset<T, BannerDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Banners
     * const banner = await prisma.banner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BannerUpdateManyArgs>(
      args: SelectSubset<T, BannerUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Banner.
     * @param {BannerUpsertArgs} args - Arguments to update or create a Banner.
     * @example
     * // Update or create a Banner
     * const banner = await prisma.banner.upsert({
     *   create: {
     *     // ... data to create a Banner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Banner we want to update
     *   }
     * })
    **/
    upsert<T extends BannerUpsertArgs>(
      args: SelectSubset<T, BannerUpsertArgs>
    ): CheckSelect<T, Prisma__BannerClient<Banner>, Prisma__BannerClient<BannerGetPayload<T>>>

    /**
     * Find zero or more Banners that matches the filter.
     * @param {BannerFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const banner = await prisma.banner.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: BannerFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Banner.
     * @param {BannerAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const banner = await prisma.banner.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: BannerAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Banner that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BannerFindUniqueOrThrowArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BannerFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BannerFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__BannerClient<Banner>, Prisma__BannerClient<BannerGetPayload<T>>>

    /**
     * Find the first Banner that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerFindFirstOrThrowArgs} args - Arguments to find a Banner
     * @example
     * // Get one Banner
     * const banner = await prisma.banner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BannerFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BannerFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__BannerClient<Banner>, Prisma__BannerClient<BannerGetPayload<T>>>

    /**
     * Count the number of Banners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerCountArgs} args - Arguments to filter Banners to count.
     * @example
     * // Count the number of Banners
     * const count = await prisma.banner.count({
     *   where: {
     *     // ... the filter for the Banners we want to count
     *   }
     * })
    **/
    count<T extends BannerCountArgs>(
      args?: Subset<T, BannerCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BannerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Banner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BannerAggregateArgs>(args: Subset<T, BannerAggregateArgs>): PrismaPromise<GetBannerAggregateType<T>>

    /**
     * Group by Banner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BannerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BannerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BannerGroupByArgs['orderBy'] }
        : { orderBy?: BannerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BannerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBannerGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Banner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BannerClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Banner base type for findUnique actions
   */
  export type BannerFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Banner
     * 
    **/
    select?: BannerSelect | null
    /**
     * Filter, which Banner to fetch.
     * 
    **/
    where: BannerWhereUniqueInput
  }

  /**
   * Banner: findUnique
   */
  export interface BannerFindUniqueArgs extends BannerFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Banner base type for findFirst actions
   */
  export type BannerFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Banner
     * 
    **/
    select?: BannerSelect | null
    /**
     * Filter, which Banner to fetch.
     * 
    **/
    where?: BannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banners to fetch.
     * 
    **/
    orderBy?: Enumerable<BannerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Banners.
     * 
    **/
    cursor?: BannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banners from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banners.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Banners.
     * 
    **/
    distinct?: Enumerable<BannerScalarFieldEnum>
  }

  /**
   * Banner: findFirst
   */
  export interface BannerFindFirstArgs extends BannerFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Banner findMany
   */
  export type BannerFindManyArgs = {
    /**
     * Select specific fields to fetch from the Banner
     * 
    **/
    select?: BannerSelect | null
    /**
     * Filter, which Banners to fetch.
     * 
    **/
    where?: BannerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Banners to fetch.
     * 
    **/
    orderBy?: Enumerable<BannerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Banners.
     * 
    **/
    cursor?: BannerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Banners from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Banners.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BannerScalarFieldEnum>
  }


  /**
   * Banner create
   */
  export type BannerCreateArgs = {
    /**
     * Select specific fields to fetch from the Banner
     * 
    **/
    select?: BannerSelect | null
    /**
     * The data needed to create a Banner.
     * 
    **/
    data: XOR<BannerCreateInput, BannerUncheckedCreateInput>
  }


  /**
   * Banner createMany
   */
  export type BannerCreateManyArgs = {
    /**
     * The data used to create many Banners.
     * 
    **/
    data: Enumerable<BannerCreateManyInput>
  }


  /**
   * Banner update
   */
  export type BannerUpdateArgs = {
    /**
     * Select specific fields to fetch from the Banner
     * 
    **/
    select?: BannerSelect | null
    /**
     * The data needed to update a Banner.
     * 
    **/
    data: XOR<BannerUpdateInput, BannerUncheckedUpdateInput>
    /**
     * Choose, which Banner to update.
     * 
    **/
    where: BannerWhereUniqueInput
  }


  /**
   * Banner updateMany
   */
  export type BannerUpdateManyArgs = {
    /**
     * The data used to update Banners.
     * 
    **/
    data: XOR<BannerUpdateManyMutationInput, BannerUncheckedUpdateManyInput>
    /**
     * Filter which Banners to update
     * 
    **/
    where?: BannerWhereInput
  }


  /**
   * Banner upsert
   */
  export type BannerUpsertArgs = {
    /**
     * Select specific fields to fetch from the Banner
     * 
    **/
    select?: BannerSelect | null
    /**
     * The filter to search for the Banner to update in case it exists.
     * 
    **/
    where: BannerWhereUniqueInput
    /**
     * In case the Banner found by the `where` argument doesn't exist, create a new Banner with this data.
     * 
    **/
    create: XOR<BannerCreateInput, BannerUncheckedCreateInput>
    /**
     * In case the Banner was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BannerUpdateInput, BannerUncheckedUpdateInput>
  }


  /**
   * Banner delete
   */
  export type BannerDeleteArgs = {
    /**
     * Select specific fields to fetch from the Banner
     * 
    **/
    select?: BannerSelect | null
    /**
     * Filter which Banner to delete.
     * 
    **/
    where: BannerWhereUniqueInput
  }


  /**
   * Banner deleteMany
   */
  export type BannerDeleteManyArgs = {
    /**
     * Filter which Banners to delete
     * 
    **/
    where?: BannerWhereInput
  }


  /**
   * Banner findRaw
   */
  export type BannerFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Banner aggregateRaw
   */
  export type BannerAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Banner: findUniqueOrThrow
   */
  export type BannerFindUniqueOrThrowArgs = BannerFindUniqueArgsBase
      

  /**
   * Banner: findFirstOrThrow
   */
  export type BannerFindFirstOrThrowArgs = BannerFindFirstArgsBase
      

  /**
   * Banner without action
   */
  export type BannerArgs = {
    /**
     * Select specific fields to fetch from the Banner
     * 
    **/
    select?: BannerSelect | null
  }



  /**
   * Model Client
   */


  export type AggregateClient = {
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  export type ClientAvgAggregateOutputType = {
    order: number | null
  }

  export type ClientSumAggregateOutputType = {
    order: number | null
  }

  export type ClientMinAggregateOutputType = {
    id: string | null
    title: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
  }

  export type ClientMaxAggregateOutputType = {
    id: string | null
    title: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
  }

  export type ClientCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    order: number
    created_at: number
    _all: number
  }


  export type ClientAvgAggregateInputType = {
    order?: true
  }

  export type ClientSumAggregateInputType = {
    order?: true
  }

  export type ClientMinAggregateInputType = {
    id?: true
    title?: true
    status?: true
    order?: true
    created_at?: true
  }

  export type ClientMaxAggregateInputType = {
    id?: true
    title?: true
    status?: true
    order?: true
    created_at?: true
  }

  export type ClientCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    order?: true
    created_at?: true
    _all?: true
  }

  export type ClientAggregateArgs = {
    /**
     * Filter which Client to aggregate.
     * 
    **/
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clients
    **/
    _count?: true | ClientCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientMaxAggregateInputType
  }

  export type GetClientAggregateType<T extends ClientAggregateArgs> = {
        [P in keyof T & keyof AggregateClient]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClient[P]>
      : GetScalarType<T[P], AggregateClient[P]>
  }




  export type ClientGroupByArgs = {
    where?: ClientWhereInput
    orderBy?: Enumerable<ClientOrderByWithAggregationInput>
    by: Array<ClientScalarFieldEnum>
    having?: ClientScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientCountAggregateInputType | true
    _avg?: ClientAvgAggregateInputType
    _sum?: ClientSumAggregateInputType
    _min?: ClientMinAggregateInputType
    _max?: ClientMaxAggregateInputType
  }


  export type ClientGroupByOutputType = {
    id: string
    title: string
    description: string[]
    status: boolean
    order: number
    created_at: string
    _count: ClientCountAggregateOutputType | null
    _avg: ClientAvgAggregateOutputType | null
    _sum: ClientSumAggregateOutputType | null
    _min: ClientMinAggregateOutputType | null
    _max: ClientMaxAggregateOutputType | null
  }

  type GetClientGroupByPayload<T extends ClientGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClientGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientGroupByOutputType[P]>
            : GetScalarType<T[P], ClientGroupByOutputType[P]>
        }
      >
    >


  export type ClientSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    order?: boolean
    created_at?: boolean
  }

  export type ClientGetPayload<
    S extends boolean | null | undefined | ClientArgs,
    U = keyof S
      > = S extends true
        ? Client
    : S extends undefined
    ? never
    : S extends ClientArgs | ClientFindManyArgs
    ?'include' extends U
    ? Client 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Client ? Client[P] : never
  } 
    : Client
  : Client


  type ClientCountArgs = Merge<
    Omit<ClientFindManyArgs, 'select' | 'include'> & {
      select?: ClientCountAggregateInputType | true
    }
  >

  export interface ClientDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Client that matches the filter.
     * @param {ClientFindUniqueArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Client'> extends True ? CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>> : CheckSelect<T, Prisma__ClientClient<Client | null, null>, Prisma__ClientClient<ClientGetPayload<T> | null, null>>

    /**
     * Find the first Client that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Client'> extends True ? CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>> : CheckSelect<T, Prisma__ClientClient<Client | null, null>, Prisma__ClientClient<ClientGetPayload<T> | null, null>>

    /**
     * Find zero or more Clients that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clients
     * const clients = await prisma.client.findMany()
     * 
     * // Get first 10 Clients
     * const clients = await prisma.client.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientWithIdOnly = await prisma.client.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientFindManyArgs>(
      args?: SelectSubset<T, ClientFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Client>>, PrismaPromise<Array<ClientGetPayload<T>>>>

    /**
     * Create a Client.
     * @param {ClientCreateArgs} args - Arguments to create a Client.
     * @example
     * // Create one Client
     * const Client = await prisma.client.create({
     *   data: {
     *     // ... data to create a Client
     *   }
     * })
     * 
    **/
    create<T extends ClientCreateArgs>(
      args: SelectSubset<T, ClientCreateArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Create many Clients.
     *     @param {ClientCreateManyArgs} args - Arguments to create many Clients.
     *     @example
     *     // Create many Clients
     *     const client = await prisma.client.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientCreateManyArgs>(
      args?: SelectSubset<T, ClientCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Client.
     * @param {ClientDeleteArgs} args - Arguments to delete one Client.
     * @example
     * // Delete one Client
     * const Client = await prisma.client.delete({
     *   where: {
     *     // ... filter to delete one Client
     *   }
     * })
     * 
    **/
    delete<T extends ClientDeleteArgs>(
      args: SelectSubset<T, ClientDeleteArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Update one Client.
     * @param {ClientUpdateArgs} args - Arguments to update one Client.
     * @example
     * // Update one Client
     * const client = await prisma.client.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientUpdateArgs>(
      args: SelectSubset<T, ClientUpdateArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Delete zero or more Clients.
     * @param {ClientDeleteManyArgs} args - Arguments to filter Clients to delete.
     * @example
     * // Delete a few Clients
     * const { count } = await prisma.client.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientDeleteManyArgs>(
      args?: SelectSubset<T, ClientDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clients
     * const client = await prisma.client.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientUpdateManyArgs>(
      args: SelectSubset<T, ClientUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Client.
     * @param {ClientUpsertArgs} args - Arguments to update or create a Client.
     * @example
     * // Update or create a Client
     * const client = await prisma.client.upsert({
     *   create: {
     *     // ... data to create a Client
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Client we want to update
     *   }
     * })
    **/
    upsert<T extends ClientUpsertArgs>(
      args: SelectSubset<T, ClientUpsertArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Find zero or more Clients that matches the filter.
     * @param {ClientFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const client = await prisma.client.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ClientFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Client.
     * @param {ClientAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const client = await prisma.client.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ClientAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Client that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ClientFindUniqueOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClientFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Find the first Client that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientFindFirstOrThrowArgs} args - Arguments to find a Client
     * @example
     * // Get one Client
     * const client = await prisma.client.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClientFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ClientClient<Client>, Prisma__ClientClient<ClientGetPayload<T>>>

    /**
     * Count the number of Clients.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientCountArgs} args - Arguments to filter Clients to count.
     * @example
     * // Count the number of Clients
     * const count = await prisma.client.count({
     *   where: {
     *     // ... the filter for the Clients we want to count
     *   }
     * })
    **/
    count<T extends ClientCountArgs>(
      args?: Subset<T, ClientCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientAggregateArgs>(args: Subset<T, ClientAggregateArgs>): PrismaPromise<GetClientAggregateType<T>>

    /**
     * Group by Client.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientGroupByArgs['orderBy'] }
        : { orderBy?: ClientGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Client.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Client base type for findUnique actions
   */
  export type ClientFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Filter, which Client to fetch.
     * 
    **/
    where: ClientWhereUniqueInput
  }

  /**
   * Client: findUnique
   */
  export interface ClientFindUniqueArgs extends ClientFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Client base type for findFirst actions
   */
  export type ClientFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Filter, which Client to fetch.
     * 
    **/
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clients.
     * 
    **/
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clients.
     * 
    **/
    distinct?: Enumerable<ClientScalarFieldEnum>
  }

  /**
   * Client: findFirst
   */
  export interface ClientFindFirstArgs extends ClientFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Client findMany
   */
  export type ClientFindManyArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Filter, which Clients to fetch.
     * 
    **/
    where?: ClientWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clients to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clients.
     * 
    **/
    cursor?: ClientWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clients from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clients.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClientScalarFieldEnum>
  }


  /**
   * Client create
   */
  export type ClientCreateArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * The data needed to create a Client.
     * 
    **/
    data: XOR<ClientCreateInput, ClientUncheckedCreateInput>
  }


  /**
   * Client createMany
   */
  export type ClientCreateManyArgs = {
    /**
     * The data used to create many Clients.
     * 
    **/
    data: Enumerable<ClientCreateManyInput>
  }


  /**
   * Client update
   */
  export type ClientUpdateArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * The data needed to update a Client.
     * 
    **/
    data: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
    /**
     * Choose, which Client to update.
     * 
    **/
    where: ClientWhereUniqueInput
  }


  /**
   * Client updateMany
   */
  export type ClientUpdateManyArgs = {
    /**
     * The data used to update Clients.
     * 
    **/
    data: XOR<ClientUpdateManyMutationInput, ClientUncheckedUpdateManyInput>
    /**
     * Filter which Clients to update
     * 
    **/
    where?: ClientWhereInput
  }


  /**
   * Client upsert
   */
  export type ClientUpsertArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * The filter to search for the Client to update in case it exists.
     * 
    **/
    where: ClientWhereUniqueInput
    /**
     * In case the Client found by the `where` argument doesn't exist, create a new Client with this data.
     * 
    **/
    create: XOR<ClientCreateInput, ClientUncheckedCreateInput>
    /**
     * In case the Client was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClientUpdateInput, ClientUncheckedUpdateInput>
  }


  /**
   * Client delete
   */
  export type ClientDeleteArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
    /**
     * Filter which Client to delete.
     * 
    **/
    where: ClientWhereUniqueInput
  }


  /**
   * Client deleteMany
   */
  export type ClientDeleteManyArgs = {
    /**
     * Filter which Clients to delete
     * 
    **/
    where?: ClientWhereInput
  }


  /**
   * Client findRaw
   */
  export type ClientFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Client aggregateRaw
   */
  export type ClientAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Client: findUniqueOrThrow
   */
  export type ClientFindUniqueOrThrowArgs = ClientFindUniqueArgsBase
      

  /**
   * Client: findFirstOrThrow
   */
  export type ClientFindFirstOrThrowArgs = ClientFindFirstArgsBase
      

  /**
   * Client without action
   */
  export type ClientArgs = {
    /**
     * Select specific fields to fetch from the Client
     * 
    **/
    select?: ClientSelect | null
  }



  /**
   * Model Filter
   */


  export type AggregateFilter = {
    _count: FilterCountAggregateOutputType | null
    _avg: FilterAvgAggregateOutputType | null
    _sum: FilterSumAggregateOutputType | null
    _min: FilterMinAggregateOutputType | null
    _max: FilterMaxAggregateOutputType | null
  }

  export type FilterAvgAggregateOutputType = {
    order: number | null
  }

  export type FilterSumAggregateOutputType = {
    order: number | null
  }

  export type FilterMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    line: string | null
    type: string | null
    dia_ext: string | null
    height: string | null
    dia_int: string | null
    thread: string | null
    val_anti_ret: string | null
    val_ali: string | null
    model: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
    updated_at: string | null
  }

  export type FilterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    line: string | null
    type: string | null
    dia_ext: string | null
    height: string | null
    dia_int: string | null
    thread: string | null
    val_anti_ret: string | null
    val_ali: string | null
    model: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
    updated_at: string | null
  }

  export type FilterCountAggregateOutputType = {
    id: number
    name: number
    image: number
    line: number
    type: number
    dia_ext: number
    height: number
    dia_int: number
    thread: number
    val_anti_ret: number
    val_ali: number
    model: number
    status: number
    order: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type FilterAvgAggregateInputType = {
    order?: true
  }

  export type FilterSumAggregateInputType = {
    order?: true
  }

  export type FilterMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    line?: true
    type?: true
    dia_ext?: true
    height?: true
    dia_int?: true
    thread?: true
    val_anti_ret?: true
    val_ali?: true
    model?: true
    status?: true
    order?: true
    created_at?: true
    updated_at?: true
  }

  export type FilterMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    line?: true
    type?: true
    dia_ext?: true
    height?: true
    dia_int?: true
    thread?: true
    val_anti_ret?: true
    val_ali?: true
    model?: true
    status?: true
    order?: true
    created_at?: true
    updated_at?: true
  }

  export type FilterCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    line?: true
    type?: true
    dia_ext?: true
    height?: true
    dia_int?: true
    thread?: true
    val_anti_ret?: true
    val_ali?: true
    model?: true
    status?: true
    order?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type FilterAggregateArgs = {
    /**
     * Filter which Filter to aggregate.
     * 
    **/
    where?: FilterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filters to fetch.
     * 
    **/
    orderBy?: Enumerable<FilterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FilterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Filters
    **/
    _count?: true | FilterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FilterAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FilterSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilterMaxAggregateInputType
  }

  export type GetFilterAggregateType<T extends FilterAggregateArgs> = {
        [P in keyof T & keyof AggregateFilter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilter[P]>
      : GetScalarType<T[P], AggregateFilter[P]>
  }




  export type FilterGroupByArgs = {
    where?: FilterWhereInput
    orderBy?: Enumerable<FilterOrderByWithAggregationInput>
    by: Array<FilterScalarFieldEnum>
    having?: FilterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilterCountAggregateInputType | true
    _avg?: FilterAvgAggregateInputType
    _sum?: FilterSumAggregateInputType
    _min?: FilterMinAggregateInputType
    _max?: FilterMaxAggregateInputType
  }


  export type FilterGroupByOutputType = {
    id: string
    name: string
    image: string
    line: string | null
    type: string | null
    dia_ext: string | null
    height: string | null
    dia_int: string | null
    thread: string | null
    val_anti_ret: string | null
    val_ali: string | null
    model: string | null
    status: boolean
    order: number
    created_at: string
    updated_at: string
    _count: FilterCountAggregateOutputType | null
    _avg: FilterAvgAggregateOutputType | null
    _sum: FilterSumAggregateOutputType | null
    _min: FilterMinAggregateOutputType | null
    _max: FilterMaxAggregateOutputType | null
  }

  type GetFilterGroupByPayload<T extends FilterGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FilterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FilterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FilterGroupByOutputType[P]>
            : GetScalarType<T[P], FilterGroupByOutputType[P]>
        }
      >
    >


  export type FilterSelect = {
    id?: boolean
    name?: boolean
    image?: boolean
    line?: boolean
    type?: boolean
    dia_ext?: boolean
    height?: boolean
    dia_int?: boolean
    thread?: boolean
    val_anti_ret?: boolean
    val_ali?: boolean
    model?: boolean
    status?: boolean
    order?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type FilterGetPayload<
    S extends boolean | null | undefined | FilterArgs,
    U = keyof S
      > = S extends true
        ? Filter
    : S extends undefined
    ? never
    : S extends FilterArgs | FilterFindManyArgs
    ?'include' extends U
    ? Filter 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Filter ? Filter[P] : never
  } 
    : Filter
  : Filter


  type FilterCountArgs = Merge<
    Omit<FilterFindManyArgs, 'select' | 'include'> & {
      select?: FilterCountAggregateInputType | true
    }
  >

  export interface FilterDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Filter that matches the filter.
     * @param {FilterFindUniqueArgs} args - Arguments to find a Filter
     * @example
     * // Get one Filter
     * const filter = await prisma.filter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FilterFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FilterFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Filter'> extends True ? CheckSelect<T, Prisma__FilterClient<Filter>, Prisma__FilterClient<FilterGetPayload<T>>> : CheckSelect<T, Prisma__FilterClient<Filter | null, null>, Prisma__FilterClient<FilterGetPayload<T> | null, null>>

    /**
     * Find the first Filter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilterFindFirstArgs} args - Arguments to find a Filter
     * @example
     * // Get one Filter
     * const filter = await prisma.filter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FilterFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FilterFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Filter'> extends True ? CheckSelect<T, Prisma__FilterClient<Filter>, Prisma__FilterClient<FilterGetPayload<T>>> : CheckSelect<T, Prisma__FilterClient<Filter | null, null>, Prisma__FilterClient<FilterGetPayload<T> | null, null>>

    /**
     * Find zero or more Filters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilterFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Filters
     * const filters = await prisma.filter.findMany()
     * 
     * // Get first 10 Filters
     * const filters = await prisma.filter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const filterWithIdOnly = await prisma.filter.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FilterFindManyArgs>(
      args?: SelectSubset<T, FilterFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Filter>>, PrismaPromise<Array<FilterGetPayload<T>>>>

    /**
     * Create a Filter.
     * @param {FilterCreateArgs} args - Arguments to create a Filter.
     * @example
     * // Create one Filter
     * const Filter = await prisma.filter.create({
     *   data: {
     *     // ... data to create a Filter
     *   }
     * })
     * 
    **/
    create<T extends FilterCreateArgs>(
      args: SelectSubset<T, FilterCreateArgs>
    ): CheckSelect<T, Prisma__FilterClient<Filter>, Prisma__FilterClient<FilterGetPayload<T>>>

    /**
     * Create many Filters.
     *     @param {FilterCreateManyArgs} args - Arguments to create many Filters.
     *     @example
     *     // Create many Filters
     *     const filter = await prisma.filter.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FilterCreateManyArgs>(
      args?: SelectSubset<T, FilterCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Filter.
     * @param {FilterDeleteArgs} args - Arguments to delete one Filter.
     * @example
     * // Delete one Filter
     * const Filter = await prisma.filter.delete({
     *   where: {
     *     // ... filter to delete one Filter
     *   }
     * })
     * 
    **/
    delete<T extends FilterDeleteArgs>(
      args: SelectSubset<T, FilterDeleteArgs>
    ): CheckSelect<T, Prisma__FilterClient<Filter>, Prisma__FilterClient<FilterGetPayload<T>>>

    /**
     * Update one Filter.
     * @param {FilterUpdateArgs} args - Arguments to update one Filter.
     * @example
     * // Update one Filter
     * const filter = await prisma.filter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FilterUpdateArgs>(
      args: SelectSubset<T, FilterUpdateArgs>
    ): CheckSelect<T, Prisma__FilterClient<Filter>, Prisma__FilterClient<FilterGetPayload<T>>>

    /**
     * Delete zero or more Filters.
     * @param {FilterDeleteManyArgs} args - Arguments to filter Filters to delete.
     * @example
     * // Delete a few Filters
     * const { count } = await prisma.filter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FilterDeleteManyArgs>(
      args?: SelectSubset<T, FilterDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Filters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Filters
     * const filter = await prisma.filter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FilterUpdateManyArgs>(
      args: SelectSubset<T, FilterUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Filter.
     * @param {FilterUpsertArgs} args - Arguments to update or create a Filter.
     * @example
     * // Update or create a Filter
     * const filter = await prisma.filter.upsert({
     *   create: {
     *     // ... data to create a Filter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Filter we want to update
     *   }
     * })
    **/
    upsert<T extends FilterUpsertArgs>(
      args: SelectSubset<T, FilterUpsertArgs>
    ): CheckSelect<T, Prisma__FilterClient<Filter>, Prisma__FilterClient<FilterGetPayload<T>>>

    /**
     * Find zero or more Filters that matches the filter.
     * @param {FilterFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const filter = await prisma.filter.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: FilterFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Filter.
     * @param {FilterAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const filter = await prisma.filter.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: FilterAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Filter that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FilterFindUniqueOrThrowArgs} args - Arguments to find a Filter
     * @example
     * // Get one Filter
     * const filter = await prisma.filter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FilterFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FilterFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__FilterClient<Filter>, Prisma__FilterClient<FilterGetPayload<T>>>

    /**
     * Find the first Filter that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilterFindFirstOrThrowArgs} args - Arguments to find a Filter
     * @example
     * // Get one Filter
     * const filter = await prisma.filter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FilterFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FilterFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__FilterClient<Filter>, Prisma__FilterClient<FilterGetPayload<T>>>

    /**
     * Count the number of Filters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilterCountArgs} args - Arguments to filter Filters to count.
     * @example
     * // Count the number of Filters
     * const count = await prisma.filter.count({
     *   where: {
     *     // ... the filter for the Filters we want to count
     *   }
     * })
    **/
    count<T extends FilterCountArgs>(
      args?: Subset<T, FilterCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilterAggregateArgs>(args: Subset<T, FilterAggregateArgs>): PrismaPromise<GetFilterAggregateType<T>>

    /**
     * Group by Filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FilterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FilterGroupByArgs['orderBy'] }
        : { orderBy?: FilterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FilterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilterGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Filter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FilterClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Filter base type for findUnique actions
   */
  export type FilterFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Filter
     * 
    **/
    select?: FilterSelect | null
    /**
     * Filter, which Filter to fetch.
     * 
    **/
    where: FilterWhereUniqueInput
  }

  /**
   * Filter: findUnique
   */
  export interface FilterFindUniqueArgs extends FilterFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Filter base type for findFirst actions
   */
  export type FilterFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Filter
     * 
    **/
    select?: FilterSelect | null
    /**
     * Filter, which Filter to fetch.
     * 
    **/
    where?: FilterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filters to fetch.
     * 
    **/
    orderBy?: Enumerable<FilterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Filters.
     * 
    **/
    cursor?: FilterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filters.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Filters.
     * 
    **/
    distinct?: Enumerable<FilterScalarFieldEnum>
  }

  /**
   * Filter: findFirst
   */
  export interface FilterFindFirstArgs extends FilterFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Filter findMany
   */
  export type FilterFindManyArgs = {
    /**
     * Select specific fields to fetch from the Filter
     * 
    **/
    select?: FilterSelect | null
    /**
     * Filter, which Filters to fetch.
     * 
    **/
    where?: FilterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filters to fetch.
     * 
    **/
    orderBy?: Enumerable<FilterOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Filters.
     * 
    **/
    cursor?: FilterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filters from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filters.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FilterScalarFieldEnum>
  }


  /**
   * Filter create
   */
  export type FilterCreateArgs = {
    /**
     * Select specific fields to fetch from the Filter
     * 
    **/
    select?: FilterSelect | null
    /**
     * The data needed to create a Filter.
     * 
    **/
    data: XOR<FilterCreateInput, FilterUncheckedCreateInput>
  }


  /**
   * Filter createMany
   */
  export type FilterCreateManyArgs = {
    /**
     * The data used to create many Filters.
     * 
    **/
    data: Enumerable<FilterCreateManyInput>
  }


  /**
   * Filter update
   */
  export type FilterUpdateArgs = {
    /**
     * Select specific fields to fetch from the Filter
     * 
    **/
    select?: FilterSelect | null
    /**
     * The data needed to update a Filter.
     * 
    **/
    data: XOR<FilterUpdateInput, FilterUncheckedUpdateInput>
    /**
     * Choose, which Filter to update.
     * 
    **/
    where: FilterWhereUniqueInput
  }


  /**
   * Filter updateMany
   */
  export type FilterUpdateManyArgs = {
    /**
     * The data used to update Filters.
     * 
    **/
    data: XOR<FilterUpdateManyMutationInput, FilterUncheckedUpdateManyInput>
    /**
     * Filter which Filters to update
     * 
    **/
    where?: FilterWhereInput
  }


  /**
   * Filter upsert
   */
  export type FilterUpsertArgs = {
    /**
     * Select specific fields to fetch from the Filter
     * 
    **/
    select?: FilterSelect | null
    /**
     * The filter to search for the Filter to update in case it exists.
     * 
    **/
    where: FilterWhereUniqueInput
    /**
     * In case the Filter found by the `where` argument doesn't exist, create a new Filter with this data.
     * 
    **/
    create: XOR<FilterCreateInput, FilterUncheckedCreateInput>
    /**
     * In case the Filter was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FilterUpdateInput, FilterUncheckedUpdateInput>
  }


  /**
   * Filter delete
   */
  export type FilterDeleteArgs = {
    /**
     * Select specific fields to fetch from the Filter
     * 
    **/
    select?: FilterSelect | null
    /**
     * Filter which Filter to delete.
     * 
    **/
    where: FilterWhereUniqueInput
  }


  /**
   * Filter deleteMany
   */
  export type FilterDeleteManyArgs = {
    /**
     * Filter which Filters to delete
     * 
    **/
    where?: FilterWhereInput
  }


  /**
   * Filter findRaw
   */
  export type FilterFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Filter aggregateRaw
   */
  export type FilterAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Filter: findUniqueOrThrow
   */
  export type FilterFindUniqueOrThrowArgs = FilterFindUniqueArgsBase
      

  /**
   * Filter: findFirstOrThrow
   */
  export type FilterFindFirstOrThrowArgs = FilterFindFirstArgsBase
      

  /**
   * Filter without action
   */
  export type FilterArgs = {
    /**
     * Select specific fields to fetch from the Filter
     * 
    **/
    select?: FilterSelect | null
  }



  /**
   * Model Product
   */


  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    order: number | null
  }

  export type ProductSumAggregateOutputType = {
    order: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    category: string | null
    capacity: string | null
    cca10: string | null
    polarity: string | null
    large: string | null
    width: string | null
    height: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
    updated_at: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    title: string | null
    image: string | null
    category: string | null
    capacity: string | null
    cca10: string | null
    polarity: string | null
    large: string | null
    width: string | null
    height: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
    updated_at: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    title: number
    image: number
    category: number
    capacity: number
    cca10: number
    polarity: number
    large: number
    width: number
    height: number
    status: number
    order: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    order?: true
  }

  export type ProductSumAggregateInputType = {
    order?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    title?: true
    image?: true
    category?: true
    capacity?: true
    cca10?: true
    polarity?: true
    large?: true
    width?: true
    height?: true
    status?: true
    order?: true
    created_at?: true
    updated_at?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    title?: true
    image?: true
    category?: true
    capacity?: true
    cca10?: true
    polarity?: true
    large?: true
    width?: true
    height?: true
    status?: true
    order?: true
    created_at?: true
    updated_at?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    title?: true
    image?: true
    category?: true
    capacity?: true
    cca10?: true
    polarity?: true
    large?: true
    width?: true
    height?: true
    status?: true
    order?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ProductAggregateArgs = {
    /**
     * Filter which Product to aggregate.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs = {
    where?: ProductWhereInput
    orderBy?: Enumerable<ProductOrderByWithAggregationInput>
    by: Array<ProductScalarFieldEnum>
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }


  export type ProductGroupByOutputType = {
    id: string
    title: string
    image: string
    category: string | null
    capacity: string | null
    cca10: string | null
    polarity: string | null
    large: string | null
    width: string | null
    height: string | null
    status: boolean
    order: number
    created_at: string
    updated_at: string
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect = {
    id?: boolean
    title?: boolean
    image?: boolean
    category?: boolean
    capacity?: boolean
    cca10?: boolean
    polarity?: boolean
    large?: boolean
    width?: boolean
    height?: boolean
    status?: boolean
    order?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ProductGetPayload<
    S extends boolean | null | undefined | ProductArgs,
    U = keyof S
      > = S extends true
        ? Product
    : S extends undefined
    ? never
    : S extends ProductArgs | ProductFindManyArgs
    ?'include' extends U
    ? Product 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Product ? Product[P] : never
  } 
    : Product
  : Product


  type ProductCountArgs = Merge<
    Omit<ProductFindManyArgs, 'select' | 'include'> & {
      select?: ProductCountAggregateInputType | true
    }
  >

  export interface ProductDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null, null>, Prisma__ProductClient<ProductGetPayload<T> | null, null>>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Product'> extends True ? CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>> : CheckSelect<T, Prisma__ProductClient<Product | null, null>, Prisma__ProductClient<ProductGetPayload<T> | null, null>>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs>(
      args?: SelectSubset<T, ProductFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Product>>, PrismaPromise<Array<ProductGetPayload<T>>>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs>(
      args: SelectSubset<T, ProductCreateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Create many Products.
     *     @param {ProductCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const product = await prisma.product.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductCreateManyArgs>(
      args?: SelectSubset<T, ProductCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs>(
      args: SelectSubset<T, ProductDeleteArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs>(
      args: SelectSubset<T, ProductUpdateArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs>(
      args?: SelectSubset<T, ProductDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs>(
      args: SelectSubset<T, ProductUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs>(
      args: SelectSubset<T, ProductUpsertArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Find zero or more Products that matches the filter.
     * @param {ProductFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const product = await prisma.product.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ProductFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Product.
     * @param {ProductAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const product = await prisma.product.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ProductAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Product that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Find the first Product that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ProductClient<Product>, Prisma__ProductClient<ProductGetPayload<T>>>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Product base type for findUnique actions
   */
  export type ProductFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where: ProductWhereUniqueInput
  }

  /**
   * Product: findUnique
   */
  export interface ProductFindUniqueArgs extends ProductFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product base type for findFirst actions
   */
  export type ProductFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Filter, which Product to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     * 
    **/
    distinct?: Enumerable<ProductScalarFieldEnum>
  }

  /**
   * Product: findFirst
   */
  export interface ProductFindFirstArgs extends ProductFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Product findMany
   */
  export type ProductFindManyArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Filter, which Products to fetch.
     * 
    **/
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     * 
    **/
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductScalarFieldEnum>
  }


  /**
   * Product create
   */
  export type ProductCreateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * The data needed to create a Product.
     * 
    **/
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }


  /**
   * Product createMany
   */
  export type ProductCreateManyArgs = {
    /**
     * The data used to create many Products.
     * 
    **/
    data: Enumerable<ProductCreateManyInput>
  }


  /**
   * Product update
   */
  export type ProductUpdateArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * The data needed to update a Product.
     * 
    **/
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs = {
    /**
     * The data used to update Products.
     * 
    **/
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product upsert
   */
  export type ProductUpsertArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * The filter to search for the Product to update in case it exists.
     * 
    **/
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     * 
    **/
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }


  /**
   * Product delete
   */
  export type ProductDeleteArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
    /**
     * Filter which Product to delete.
     * 
    **/
    where: ProductWhereUniqueInput
  }


  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs = {
    /**
     * Filter which Products to delete
     * 
    **/
    where?: ProductWhereInput
  }


  /**
   * Product findRaw
   */
  export type ProductFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Product aggregateRaw
   */
  export type ProductAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Product: findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs = ProductFindUniqueArgsBase
      

  /**
   * Product: findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs = ProductFindFirstArgsBase
      

  /**
   * Product without action
   */
  export type ProductArgs = {
    /**
     * Select specific fields to fetch from the Product
     * 
    **/
    select?: ProductSelect | null
  }



  /**
   * Model Review
   */


  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    order: number | null
  }

  export type ReviewSumAggregateOutputType = {
    order: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: string | null
    author: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: string | null
    author: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    body: number
    author: number
    status: number
    order: number
    created_at: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    order?: true
  }

  export type ReviewSumAggregateInputType = {
    order?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    author?: true
    status?: true
    order?: true
    created_at?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    author?: true
    status?: true
    order?: true
    created_at?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    body?: true
    author?: true
    status?: true
    order?: true
    created_at?: true
    _all?: true
  }

  export type ReviewAggregateArgs = {
    /**
     * Filter which Review to aggregate.
     * 
    **/
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs = {
    where?: ReviewWhereInput
    orderBy?: Enumerable<ReviewOrderByWithAggregationInput>
    by: Array<ReviewScalarFieldEnum>
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }


  export type ReviewGroupByOutputType = {
    id: string
    body: string[]
    author: string
    status: boolean
    order: number
    created_at: string
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect = {
    id?: boolean
    body?: boolean
    author?: boolean
    status?: boolean
    order?: boolean
    created_at?: boolean
  }

  export type ReviewGetPayload<
    S extends boolean | null | undefined | ReviewArgs,
    U = keyof S
      > = S extends true
        ? Review
    : S extends undefined
    ? never
    : S extends ReviewArgs | ReviewFindManyArgs
    ?'include' extends U
    ? Review 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Review ? Review[P] : never
  } 
    : Review
  : Review


  type ReviewCountArgs = Merge<
    Omit<ReviewFindManyArgs, 'select' | 'include'> & {
      select?: ReviewCountAggregateInputType | true
    }
  >

  export interface ReviewDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReviewFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ReviewFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Review'> extends True ? CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>> : CheckSelect<T, Prisma__ReviewClient<Review | null, null>, Prisma__ReviewClient<ReviewGetPayload<T> | null, null>>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReviewFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ReviewFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Review'> extends True ? CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>> : CheckSelect<T, Prisma__ReviewClient<Review | null, null>, Prisma__ReviewClient<ReviewGetPayload<T> | null, null>>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ReviewFindManyArgs>(
      args?: SelectSubset<T, ReviewFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Review>>, PrismaPromise<Array<ReviewGetPayload<T>>>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
    **/
    create<T extends ReviewCreateArgs>(
      args: SelectSubset<T, ReviewCreateArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Create many Reviews.
     *     @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     *     @example
     *     // Create many Reviews
     *     const review = await prisma.review.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReviewCreateManyArgs>(
      args?: SelectSubset<T, ReviewCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
    **/
    delete<T extends ReviewDeleteArgs>(
      args: SelectSubset<T, ReviewDeleteArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReviewUpdateArgs>(
      args: SelectSubset<T, ReviewUpdateArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReviewDeleteManyArgs>(
      args?: SelectSubset<T, ReviewDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReviewUpdateManyArgs>(
      args: SelectSubset<T, ReviewUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
    **/
    upsert<T extends ReviewUpsertArgs>(
      args: SelectSubset<T, ReviewUpsertArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Find zero or more Reviews that matches the filter.
     * @param {ReviewFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const review = await prisma.review.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ReviewFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Review.
     * @param {ReviewAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const review = await prisma.review.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ReviewAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Review that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ReviewFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Find the first Review that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ReviewFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ReviewClient<Review>, Prisma__ReviewClient<ReviewGetPayload<T>>>

    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ReviewClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Review base type for findUnique actions
   */
  export type ReviewFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Filter, which Review to fetch.
     * 
    **/
    where: ReviewWhereUniqueInput
  }

  /**
   * Review: findUnique
   */
  export interface ReviewFindUniqueArgs extends ReviewFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Review base type for findFirst actions
   */
  export type ReviewFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Filter, which Review to fetch.
     * 
    **/
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     * 
    **/
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     * 
    **/
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }

  /**
   * Review: findFirst
   */
  export interface ReviewFindFirstArgs extends ReviewFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Filter, which Reviews to fetch.
     * 
    **/
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     * 
    **/
    orderBy?: Enumerable<ReviewOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     * 
    **/
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReviewScalarFieldEnum>
  }


  /**
   * Review create
   */
  export type ReviewCreateArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * The data needed to create a Review.
     * 
    **/
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }


  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs = {
    /**
     * The data used to create many Reviews.
     * 
    **/
    data: Enumerable<ReviewCreateManyInput>
  }


  /**
   * Review update
   */
  export type ReviewUpdateArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * The data needed to update a Review.
     * 
    **/
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     * 
    **/
    where: ReviewWhereUniqueInput
  }


  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs = {
    /**
     * The data used to update Reviews.
     * 
    **/
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     * 
    **/
    where?: ReviewWhereInput
  }


  /**
   * Review upsert
   */
  export type ReviewUpsertArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * The filter to search for the Review to update in case it exists.
     * 
    **/
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     * 
    **/
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }


  /**
   * Review delete
   */
  export type ReviewDeleteArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
    /**
     * Filter which Review to delete.
     * 
    **/
    where: ReviewWhereUniqueInput
  }


  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs = {
    /**
     * Filter which Reviews to delete
     * 
    **/
    where?: ReviewWhereInput
  }


  /**
   * Review findRaw
   */
  export type ReviewFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Review aggregateRaw
   */
  export type ReviewAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Review: findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs = ReviewFindUniqueArgsBase
      

  /**
   * Review: findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs = ReviewFindFirstArgsBase
      

  /**
   * Review without action
   */
  export type ReviewArgs = {
    /**
     * Select specific fields to fetch from the Review
     * 
    **/
    select?: ReviewSelect | null
  }



  /**
   * Model Success
   */


  export type AggregateSuccess = {
    _count: SuccessCountAggregateOutputType | null
    _avg: SuccessAvgAggregateOutputType | null
    _sum: SuccessSumAggregateOutputType | null
    _min: SuccessMinAggregateOutputType | null
    _max: SuccessMaxAggregateOutputType | null
  }

  export type SuccessAvgAggregateOutputType = {
    order: number | null
  }

  export type SuccessSumAggregateOutputType = {
    order: number | null
  }

  export type SuccessMinAggregateOutputType = {
    id: string | null
    title: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
  }

  export type SuccessMaxAggregateOutputType = {
    id: string | null
    title: string | null
    status: boolean | null
    order: number | null
    created_at: string | null
  }

  export type SuccessCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    order: number
    created_at: number
    _all: number
  }


  export type SuccessAvgAggregateInputType = {
    order?: true
  }

  export type SuccessSumAggregateInputType = {
    order?: true
  }

  export type SuccessMinAggregateInputType = {
    id?: true
    title?: true
    status?: true
    order?: true
    created_at?: true
  }

  export type SuccessMaxAggregateInputType = {
    id?: true
    title?: true
    status?: true
    order?: true
    created_at?: true
  }

  export type SuccessCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    order?: true
    created_at?: true
    _all?: true
  }

  export type SuccessAggregateArgs = {
    /**
     * Filter which Success to aggregate.
     * 
    **/
    where?: SuccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Successes to fetch.
     * 
    **/
    orderBy?: Enumerable<SuccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SuccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Successes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Successes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Successes
    **/
    _count?: true | SuccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SuccessAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SuccessSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SuccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SuccessMaxAggregateInputType
  }

  export type GetSuccessAggregateType<T extends SuccessAggregateArgs> = {
        [P in keyof T & keyof AggregateSuccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSuccess[P]>
      : GetScalarType<T[P], AggregateSuccess[P]>
  }




  export type SuccessGroupByArgs = {
    where?: SuccessWhereInput
    orderBy?: Enumerable<SuccessOrderByWithAggregationInput>
    by: Array<SuccessScalarFieldEnum>
    having?: SuccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SuccessCountAggregateInputType | true
    _avg?: SuccessAvgAggregateInputType
    _sum?: SuccessSumAggregateInputType
    _min?: SuccessMinAggregateInputType
    _max?: SuccessMaxAggregateInputType
  }


  export type SuccessGroupByOutputType = {
    id: string
    title: string
    description: string[]
    status: boolean
    order: number
    created_at: string
    _count: SuccessCountAggregateOutputType | null
    _avg: SuccessAvgAggregateOutputType | null
    _sum: SuccessSumAggregateOutputType | null
    _min: SuccessMinAggregateOutputType | null
    _max: SuccessMaxAggregateOutputType | null
  }

  type GetSuccessGroupByPayload<T extends SuccessGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SuccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SuccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SuccessGroupByOutputType[P]>
            : GetScalarType<T[P], SuccessGroupByOutputType[P]>
        }
      >
    >


  export type SuccessSelect = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    order?: boolean
    created_at?: boolean
  }

  export type SuccessGetPayload<
    S extends boolean | null | undefined | SuccessArgs,
    U = keyof S
      > = S extends true
        ? Success
    : S extends undefined
    ? never
    : S extends SuccessArgs | SuccessFindManyArgs
    ?'include' extends U
    ? Success 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Success ? Success[P] : never
  } 
    : Success
  : Success


  type SuccessCountArgs = Merge<
    Omit<SuccessFindManyArgs, 'select' | 'include'> & {
      select?: SuccessCountAggregateInputType | true
    }
  >

  export interface SuccessDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Success that matches the filter.
     * @param {SuccessFindUniqueArgs} args - Arguments to find a Success
     * @example
     * // Get one Success
     * const success = await prisma.success.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SuccessFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SuccessFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Success'> extends True ? CheckSelect<T, Prisma__SuccessClient<Success>, Prisma__SuccessClient<SuccessGetPayload<T>>> : CheckSelect<T, Prisma__SuccessClient<Success | null, null>, Prisma__SuccessClient<SuccessGetPayload<T> | null, null>>

    /**
     * Find the first Success that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuccessFindFirstArgs} args - Arguments to find a Success
     * @example
     * // Get one Success
     * const success = await prisma.success.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SuccessFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SuccessFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Success'> extends True ? CheckSelect<T, Prisma__SuccessClient<Success>, Prisma__SuccessClient<SuccessGetPayload<T>>> : CheckSelect<T, Prisma__SuccessClient<Success | null, null>, Prisma__SuccessClient<SuccessGetPayload<T> | null, null>>

    /**
     * Find zero or more Successes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuccessFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Successes
     * const successes = await prisma.success.findMany()
     * 
     * // Get first 10 Successes
     * const successes = await prisma.success.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const successWithIdOnly = await prisma.success.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SuccessFindManyArgs>(
      args?: SelectSubset<T, SuccessFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Success>>, PrismaPromise<Array<SuccessGetPayload<T>>>>

    /**
     * Create a Success.
     * @param {SuccessCreateArgs} args - Arguments to create a Success.
     * @example
     * // Create one Success
     * const Success = await prisma.success.create({
     *   data: {
     *     // ... data to create a Success
     *   }
     * })
     * 
    **/
    create<T extends SuccessCreateArgs>(
      args: SelectSubset<T, SuccessCreateArgs>
    ): CheckSelect<T, Prisma__SuccessClient<Success>, Prisma__SuccessClient<SuccessGetPayload<T>>>

    /**
     * Create many Successes.
     *     @param {SuccessCreateManyArgs} args - Arguments to create many Successes.
     *     @example
     *     // Create many Successes
     *     const success = await prisma.success.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SuccessCreateManyArgs>(
      args?: SelectSubset<T, SuccessCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Success.
     * @param {SuccessDeleteArgs} args - Arguments to delete one Success.
     * @example
     * // Delete one Success
     * const Success = await prisma.success.delete({
     *   where: {
     *     // ... filter to delete one Success
     *   }
     * })
     * 
    **/
    delete<T extends SuccessDeleteArgs>(
      args: SelectSubset<T, SuccessDeleteArgs>
    ): CheckSelect<T, Prisma__SuccessClient<Success>, Prisma__SuccessClient<SuccessGetPayload<T>>>

    /**
     * Update one Success.
     * @param {SuccessUpdateArgs} args - Arguments to update one Success.
     * @example
     * // Update one Success
     * const success = await prisma.success.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SuccessUpdateArgs>(
      args: SelectSubset<T, SuccessUpdateArgs>
    ): CheckSelect<T, Prisma__SuccessClient<Success>, Prisma__SuccessClient<SuccessGetPayload<T>>>

    /**
     * Delete zero or more Successes.
     * @param {SuccessDeleteManyArgs} args - Arguments to filter Successes to delete.
     * @example
     * // Delete a few Successes
     * const { count } = await prisma.success.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SuccessDeleteManyArgs>(
      args?: SelectSubset<T, SuccessDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Successes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Successes
     * const success = await prisma.success.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SuccessUpdateManyArgs>(
      args: SelectSubset<T, SuccessUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Success.
     * @param {SuccessUpsertArgs} args - Arguments to update or create a Success.
     * @example
     * // Update or create a Success
     * const success = await prisma.success.upsert({
     *   create: {
     *     // ... data to create a Success
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Success we want to update
     *   }
     * })
    **/
    upsert<T extends SuccessUpsertArgs>(
      args: SelectSubset<T, SuccessUpsertArgs>
    ): CheckSelect<T, Prisma__SuccessClient<Success>, Prisma__SuccessClient<SuccessGetPayload<T>>>

    /**
     * Find zero or more Successes that matches the filter.
     * @param {SuccessFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const success = await prisma.success.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SuccessFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Success.
     * @param {SuccessAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const success = await prisma.success.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SuccessAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Success that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SuccessFindUniqueOrThrowArgs} args - Arguments to find a Success
     * @example
     * // Get one Success
     * const success = await prisma.success.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SuccessFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SuccessFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SuccessClient<Success>, Prisma__SuccessClient<SuccessGetPayload<T>>>

    /**
     * Find the first Success that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuccessFindFirstOrThrowArgs} args - Arguments to find a Success
     * @example
     * // Get one Success
     * const success = await prisma.success.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SuccessFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SuccessFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SuccessClient<Success>, Prisma__SuccessClient<SuccessGetPayload<T>>>

    /**
     * Count the number of Successes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuccessCountArgs} args - Arguments to filter Successes to count.
     * @example
     * // Count the number of Successes
     * const count = await prisma.success.count({
     *   where: {
     *     // ... the filter for the Successes we want to count
     *   }
     * })
    **/
    count<T extends SuccessCountArgs>(
      args?: Subset<T, SuccessCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SuccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Success.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SuccessAggregateArgs>(args: Subset<T, SuccessAggregateArgs>): PrismaPromise<GetSuccessAggregateType<T>>

    /**
     * Group by Success.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SuccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SuccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SuccessGroupByArgs['orderBy'] }
        : { orderBy?: SuccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SuccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSuccessGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Success.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SuccessClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Success base type for findUnique actions
   */
  export type SuccessFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Success
     * 
    **/
    select?: SuccessSelect | null
    /**
     * Filter, which Success to fetch.
     * 
    **/
    where: SuccessWhereUniqueInput
  }

  /**
   * Success: findUnique
   */
  export interface SuccessFindUniqueArgs extends SuccessFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Success base type for findFirst actions
   */
  export type SuccessFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Success
     * 
    **/
    select?: SuccessSelect | null
    /**
     * Filter, which Success to fetch.
     * 
    **/
    where?: SuccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Successes to fetch.
     * 
    **/
    orderBy?: Enumerable<SuccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Successes.
     * 
    **/
    cursor?: SuccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Successes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Successes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Successes.
     * 
    **/
    distinct?: Enumerable<SuccessScalarFieldEnum>
  }

  /**
   * Success: findFirst
   */
  export interface SuccessFindFirstArgs extends SuccessFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Success findMany
   */
  export type SuccessFindManyArgs = {
    /**
     * Select specific fields to fetch from the Success
     * 
    **/
    select?: SuccessSelect | null
    /**
     * Filter, which Successes to fetch.
     * 
    **/
    where?: SuccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Successes to fetch.
     * 
    **/
    orderBy?: Enumerable<SuccessOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Successes.
     * 
    **/
    cursor?: SuccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Successes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Successes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SuccessScalarFieldEnum>
  }


  /**
   * Success create
   */
  export type SuccessCreateArgs = {
    /**
     * Select specific fields to fetch from the Success
     * 
    **/
    select?: SuccessSelect | null
    /**
     * The data needed to create a Success.
     * 
    **/
    data: XOR<SuccessCreateInput, SuccessUncheckedCreateInput>
  }


  /**
   * Success createMany
   */
  export type SuccessCreateManyArgs = {
    /**
     * The data used to create many Successes.
     * 
    **/
    data: Enumerable<SuccessCreateManyInput>
  }


  /**
   * Success update
   */
  export type SuccessUpdateArgs = {
    /**
     * Select specific fields to fetch from the Success
     * 
    **/
    select?: SuccessSelect | null
    /**
     * The data needed to update a Success.
     * 
    **/
    data: XOR<SuccessUpdateInput, SuccessUncheckedUpdateInput>
    /**
     * Choose, which Success to update.
     * 
    **/
    where: SuccessWhereUniqueInput
  }


  /**
   * Success updateMany
   */
  export type SuccessUpdateManyArgs = {
    /**
     * The data used to update Successes.
     * 
    **/
    data: XOR<SuccessUpdateManyMutationInput, SuccessUncheckedUpdateManyInput>
    /**
     * Filter which Successes to update
     * 
    **/
    where?: SuccessWhereInput
  }


  /**
   * Success upsert
   */
  export type SuccessUpsertArgs = {
    /**
     * Select specific fields to fetch from the Success
     * 
    **/
    select?: SuccessSelect | null
    /**
     * The filter to search for the Success to update in case it exists.
     * 
    **/
    where: SuccessWhereUniqueInput
    /**
     * In case the Success found by the `where` argument doesn't exist, create a new Success with this data.
     * 
    **/
    create: XOR<SuccessCreateInput, SuccessUncheckedCreateInput>
    /**
     * In case the Success was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SuccessUpdateInput, SuccessUncheckedUpdateInput>
  }


  /**
   * Success delete
   */
  export type SuccessDeleteArgs = {
    /**
     * Select specific fields to fetch from the Success
     * 
    **/
    select?: SuccessSelect | null
    /**
     * Filter which Success to delete.
     * 
    **/
    where: SuccessWhereUniqueInput
  }


  /**
   * Success deleteMany
   */
  export type SuccessDeleteManyArgs = {
    /**
     * Filter which Successes to delete
     * 
    **/
    where?: SuccessWhereInput
  }


  /**
   * Success findRaw
   */
  export type SuccessFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Success aggregateRaw
   */
  export type SuccessAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Success: findUniqueOrThrow
   */
  export type SuccessFindUniqueOrThrowArgs = SuccessFindUniqueArgsBase
      

  /**
   * Success: findFirstOrThrow
   */
  export type SuccessFindFirstOrThrowArgs = SuccessFindFirstArgsBase
      

  /**
   * Success without action
   */
  export type SuccessArgs = {
    /**
     * Select specific fields to fetch from the Success
     * 
    **/
    select?: SuccessSelect | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    created_at: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: string | null
    created_at: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    created_at: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    created_at?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    role: string
    created_at: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    created_at?: boolean
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null, null>, Prisma__UserClient<UserGetPayload<T> | null, null>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {UserFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UserFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {UserAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UserAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one User that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }

  /**
   * User: findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User: findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User findRaw
   */
  export type UserFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * User aggregateRaw
   */
  export type UserAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * User: findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = UserFindUniqueArgsBase
      

  /**
   * User: findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = UserFindFirstArgsBase
      

  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
  }



  /**
   * Model LubVehLiviano
   */


  export type AggregateLubVehLiviano = {
    _count: LubVehLivianoCountAggregateOutputType | null
    _avg: LubVehLivianoAvgAggregateOutputType | null
    _sum: LubVehLivianoSumAggregateOutputType | null
    _min: LubVehLivianoMinAggregateOutputType | null
    _max: LubVehLivianoMaxAggregateOutputType | null
  }

  export type LubVehLivianoAvgAggregateOutputType = {
    order: number | null
  }

  export type LubVehLivianoSumAggregateOutputType = {
    order: number | null
  }

  export type LubVehLivianoMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    image: string | null
    presentacion: string | null
    status: boolean | null
    order: number | null
    indicado_para: string | null
    especificacion: string | null
    created_at: string | null
    updated_at: string | null
  }

  export type LubVehLivianoMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    image: string | null
    presentacion: string | null
    status: boolean | null
    order: number | null
    indicado_para: string | null
    especificacion: string | null
    created_at: string | null
    updated_at: string | null
  }

  export type LubVehLivianoCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    image: number
    presentacion: number
    status: number
    order: number
    indicado_para: number
    especificacion: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LubVehLivianoAvgAggregateInputType = {
    order?: true
  }

  export type LubVehLivianoSumAggregateInputType = {
    order?: true
  }

  export type LubVehLivianoMinAggregateInputType = {
    id?: true
    nombre?: true
    image?: true
    presentacion?: true
    status?: true
    order?: true
    indicado_para?: true
    especificacion?: true
    created_at?: true
    updated_at?: true
  }

  export type LubVehLivianoMaxAggregateInputType = {
    id?: true
    nombre?: true
    image?: true
    presentacion?: true
    status?: true
    order?: true
    indicado_para?: true
    especificacion?: true
    created_at?: true
    updated_at?: true
  }

  export type LubVehLivianoCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    image?: true
    presentacion?: true
    status?: true
    order?: true
    indicado_para?: true
    especificacion?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LubVehLivianoAggregateArgs = {
    /**
     * Filter which LubVehLiviano to aggregate.
     * 
    **/
    where?: LubVehLivianoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubVehLivianos to fetch.
     * 
    **/
    orderBy?: Enumerable<LubVehLivianoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LubVehLivianoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubVehLivianos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubVehLivianos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LubVehLivianos
    **/
    _count?: true | LubVehLivianoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LubVehLivianoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LubVehLivianoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LubVehLivianoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LubVehLivianoMaxAggregateInputType
  }

  export type GetLubVehLivianoAggregateType<T extends LubVehLivianoAggregateArgs> = {
        [P in keyof T & keyof AggregateLubVehLiviano]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLubVehLiviano[P]>
      : GetScalarType<T[P], AggregateLubVehLiviano[P]>
  }




  export type LubVehLivianoGroupByArgs = {
    where?: LubVehLivianoWhereInput
    orderBy?: Enumerable<LubVehLivianoOrderByWithAggregationInput>
    by: Array<LubVehLivianoScalarFieldEnum>
    having?: LubVehLivianoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LubVehLivianoCountAggregateInputType | true
    _avg?: LubVehLivianoAvgAggregateInputType
    _sum?: LubVehLivianoSumAggregateInputType
    _min?: LubVehLivianoMinAggregateInputType
    _max?: LubVehLivianoMaxAggregateInputType
  }


  export type LubVehLivianoGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string[]
    image: string | null
    presentacion: string
    status: boolean
    order: number
    indicado_para: string
    especificacion: string
    created_at: string
    updated_at: string
    _count: LubVehLivianoCountAggregateOutputType | null
    _avg: LubVehLivianoAvgAggregateOutputType | null
    _sum: LubVehLivianoSumAggregateOutputType | null
    _min: LubVehLivianoMinAggregateOutputType | null
    _max: LubVehLivianoMaxAggregateOutputType | null
  }

  type GetLubVehLivianoGroupByPayload<T extends LubVehLivianoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LubVehLivianoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LubVehLivianoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LubVehLivianoGroupByOutputType[P]>
            : GetScalarType<T[P], LubVehLivianoGroupByOutputType[P]>
        }
      >
    >


  export type LubVehLivianoSelect = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    image?: boolean
    presentacion?: boolean
    status?: boolean
    order?: boolean
    indicado_para?: boolean
    especificacion?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LubVehLivianoGetPayload<
    S extends boolean | null | undefined | LubVehLivianoArgs,
    U = keyof S
      > = S extends true
        ? LubVehLiviano
    : S extends undefined
    ? never
    : S extends LubVehLivianoArgs | LubVehLivianoFindManyArgs
    ?'include' extends U
    ? LubVehLiviano 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof LubVehLiviano ? LubVehLiviano[P] : never
  } 
    : LubVehLiviano
  : LubVehLiviano


  type LubVehLivianoCountArgs = Merge<
    Omit<LubVehLivianoFindManyArgs, 'select' | 'include'> & {
      select?: LubVehLivianoCountAggregateInputType | true
    }
  >

  export interface LubVehLivianoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one LubVehLiviano that matches the filter.
     * @param {LubVehLivianoFindUniqueArgs} args - Arguments to find a LubVehLiviano
     * @example
     * // Get one LubVehLiviano
     * const lubVehLiviano = await prisma.lubVehLiviano.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LubVehLivianoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LubVehLivianoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LubVehLiviano'> extends True ? CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T>>> : CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano | null, null>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T> | null, null>>

    /**
     * Find the first LubVehLiviano that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehLivianoFindFirstArgs} args - Arguments to find a LubVehLiviano
     * @example
     * // Get one LubVehLiviano
     * const lubVehLiviano = await prisma.lubVehLiviano.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LubVehLivianoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LubVehLivianoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LubVehLiviano'> extends True ? CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T>>> : CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano | null, null>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T> | null, null>>

    /**
     * Find zero or more LubVehLivianos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehLivianoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LubVehLivianos
     * const lubVehLivianos = await prisma.lubVehLiviano.findMany()
     * 
     * // Get first 10 LubVehLivianos
     * const lubVehLivianos = await prisma.lubVehLiviano.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lubVehLivianoWithIdOnly = await prisma.lubVehLiviano.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LubVehLivianoFindManyArgs>(
      args?: SelectSubset<T, LubVehLivianoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<LubVehLiviano>>, PrismaPromise<Array<LubVehLivianoGetPayload<T>>>>

    /**
     * Create a LubVehLiviano.
     * @param {LubVehLivianoCreateArgs} args - Arguments to create a LubVehLiviano.
     * @example
     * // Create one LubVehLiviano
     * const LubVehLiviano = await prisma.lubVehLiviano.create({
     *   data: {
     *     // ... data to create a LubVehLiviano
     *   }
     * })
     * 
    **/
    create<T extends LubVehLivianoCreateArgs>(
      args: SelectSubset<T, LubVehLivianoCreateArgs>
    ): CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T>>>

    /**
     * Create many LubVehLivianos.
     *     @param {LubVehLivianoCreateManyArgs} args - Arguments to create many LubVehLivianos.
     *     @example
     *     // Create many LubVehLivianos
     *     const lubVehLiviano = await prisma.lubVehLiviano.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LubVehLivianoCreateManyArgs>(
      args?: SelectSubset<T, LubVehLivianoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a LubVehLiviano.
     * @param {LubVehLivianoDeleteArgs} args - Arguments to delete one LubVehLiviano.
     * @example
     * // Delete one LubVehLiviano
     * const LubVehLiviano = await prisma.lubVehLiviano.delete({
     *   where: {
     *     // ... filter to delete one LubVehLiviano
     *   }
     * })
     * 
    **/
    delete<T extends LubVehLivianoDeleteArgs>(
      args: SelectSubset<T, LubVehLivianoDeleteArgs>
    ): CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T>>>

    /**
     * Update one LubVehLiviano.
     * @param {LubVehLivianoUpdateArgs} args - Arguments to update one LubVehLiviano.
     * @example
     * // Update one LubVehLiviano
     * const lubVehLiviano = await prisma.lubVehLiviano.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LubVehLivianoUpdateArgs>(
      args: SelectSubset<T, LubVehLivianoUpdateArgs>
    ): CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T>>>

    /**
     * Delete zero or more LubVehLivianos.
     * @param {LubVehLivianoDeleteManyArgs} args - Arguments to filter LubVehLivianos to delete.
     * @example
     * // Delete a few LubVehLivianos
     * const { count } = await prisma.lubVehLiviano.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LubVehLivianoDeleteManyArgs>(
      args?: SelectSubset<T, LubVehLivianoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more LubVehLivianos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehLivianoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LubVehLivianos
     * const lubVehLiviano = await prisma.lubVehLiviano.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LubVehLivianoUpdateManyArgs>(
      args: SelectSubset<T, LubVehLivianoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one LubVehLiviano.
     * @param {LubVehLivianoUpsertArgs} args - Arguments to update or create a LubVehLiviano.
     * @example
     * // Update or create a LubVehLiviano
     * const lubVehLiviano = await prisma.lubVehLiviano.upsert({
     *   create: {
     *     // ... data to create a LubVehLiviano
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LubVehLiviano we want to update
     *   }
     * })
    **/
    upsert<T extends LubVehLivianoUpsertArgs>(
      args: SelectSubset<T, LubVehLivianoUpsertArgs>
    ): CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T>>>

    /**
     * Find zero or more LubVehLivianos that matches the filter.
     * @param {LubVehLivianoFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const lubVehLiviano = await prisma.lubVehLiviano.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: LubVehLivianoFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a LubVehLiviano.
     * @param {LubVehLivianoAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const lubVehLiviano = await prisma.lubVehLiviano.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: LubVehLivianoAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one LubVehLiviano that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {LubVehLivianoFindUniqueOrThrowArgs} args - Arguments to find a LubVehLiviano
     * @example
     * // Get one LubVehLiviano
     * const lubVehLiviano = await prisma.lubVehLiviano.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LubVehLivianoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LubVehLivianoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T>>>

    /**
     * Find the first LubVehLiviano that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehLivianoFindFirstOrThrowArgs} args - Arguments to find a LubVehLiviano
     * @example
     * // Get one LubVehLiviano
     * const lubVehLiviano = await prisma.lubVehLiviano.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LubVehLivianoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LubVehLivianoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__LubVehLivianoClient<LubVehLiviano>, Prisma__LubVehLivianoClient<LubVehLivianoGetPayload<T>>>

    /**
     * Count the number of LubVehLivianos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehLivianoCountArgs} args - Arguments to filter LubVehLivianos to count.
     * @example
     * // Count the number of LubVehLivianos
     * const count = await prisma.lubVehLiviano.count({
     *   where: {
     *     // ... the filter for the LubVehLivianos we want to count
     *   }
     * })
    **/
    count<T extends LubVehLivianoCountArgs>(
      args?: Subset<T, LubVehLivianoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LubVehLivianoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LubVehLiviano.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehLivianoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LubVehLivianoAggregateArgs>(args: Subset<T, LubVehLivianoAggregateArgs>): PrismaPromise<GetLubVehLivianoAggregateType<T>>

    /**
     * Group by LubVehLiviano.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehLivianoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LubVehLivianoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LubVehLivianoGroupByArgs['orderBy'] }
        : { orderBy?: LubVehLivianoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LubVehLivianoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLubVehLivianoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LubVehLiviano.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LubVehLivianoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LubVehLiviano base type for findUnique actions
   */
  export type LubVehLivianoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LubVehLiviano
     * 
    **/
    select?: LubVehLivianoSelect | null
    /**
     * Filter, which LubVehLiviano to fetch.
     * 
    **/
    where: LubVehLivianoWhereUniqueInput
  }

  /**
   * LubVehLiviano: findUnique
   */
  export interface LubVehLivianoFindUniqueArgs extends LubVehLivianoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LubVehLiviano base type for findFirst actions
   */
  export type LubVehLivianoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LubVehLiviano
     * 
    **/
    select?: LubVehLivianoSelect | null
    /**
     * Filter, which LubVehLiviano to fetch.
     * 
    **/
    where?: LubVehLivianoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubVehLivianos to fetch.
     * 
    **/
    orderBy?: Enumerable<LubVehLivianoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LubVehLivianos.
     * 
    **/
    cursor?: LubVehLivianoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubVehLivianos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubVehLivianos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LubVehLivianos.
     * 
    **/
    distinct?: Enumerable<LubVehLivianoScalarFieldEnum>
  }

  /**
   * LubVehLiviano: findFirst
   */
  export interface LubVehLivianoFindFirstArgs extends LubVehLivianoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LubVehLiviano findMany
   */
  export type LubVehLivianoFindManyArgs = {
    /**
     * Select specific fields to fetch from the LubVehLiviano
     * 
    **/
    select?: LubVehLivianoSelect | null
    /**
     * Filter, which LubVehLivianos to fetch.
     * 
    **/
    where?: LubVehLivianoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubVehLivianos to fetch.
     * 
    **/
    orderBy?: Enumerable<LubVehLivianoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LubVehLivianos.
     * 
    **/
    cursor?: LubVehLivianoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubVehLivianos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubVehLivianos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LubVehLivianoScalarFieldEnum>
  }


  /**
   * LubVehLiviano create
   */
  export type LubVehLivianoCreateArgs = {
    /**
     * Select specific fields to fetch from the LubVehLiviano
     * 
    **/
    select?: LubVehLivianoSelect | null
    /**
     * The data needed to create a LubVehLiviano.
     * 
    **/
    data: XOR<LubVehLivianoCreateInput, LubVehLivianoUncheckedCreateInput>
  }


  /**
   * LubVehLiviano createMany
   */
  export type LubVehLivianoCreateManyArgs = {
    /**
     * The data used to create many LubVehLivianos.
     * 
    **/
    data: Enumerable<LubVehLivianoCreateManyInput>
  }


  /**
   * LubVehLiviano update
   */
  export type LubVehLivianoUpdateArgs = {
    /**
     * Select specific fields to fetch from the LubVehLiviano
     * 
    **/
    select?: LubVehLivianoSelect | null
    /**
     * The data needed to update a LubVehLiviano.
     * 
    **/
    data: XOR<LubVehLivianoUpdateInput, LubVehLivianoUncheckedUpdateInput>
    /**
     * Choose, which LubVehLiviano to update.
     * 
    **/
    where: LubVehLivianoWhereUniqueInput
  }


  /**
   * LubVehLiviano updateMany
   */
  export type LubVehLivianoUpdateManyArgs = {
    /**
     * The data used to update LubVehLivianos.
     * 
    **/
    data: XOR<LubVehLivianoUpdateManyMutationInput, LubVehLivianoUncheckedUpdateManyInput>
    /**
     * Filter which LubVehLivianos to update
     * 
    **/
    where?: LubVehLivianoWhereInput
  }


  /**
   * LubVehLiviano upsert
   */
  export type LubVehLivianoUpsertArgs = {
    /**
     * Select specific fields to fetch from the LubVehLiviano
     * 
    **/
    select?: LubVehLivianoSelect | null
    /**
     * The filter to search for the LubVehLiviano to update in case it exists.
     * 
    **/
    where: LubVehLivianoWhereUniqueInput
    /**
     * In case the LubVehLiviano found by the `where` argument doesn't exist, create a new LubVehLiviano with this data.
     * 
    **/
    create: XOR<LubVehLivianoCreateInput, LubVehLivianoUncheckedCreateInput>
    /**
     * In case the LubVehLiviano was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LubVehLivianoUpdateInput, LubVehLivianoUncheckedUpdateInput>
  }


  /**
   * LubVehLiviano delete
   */
  export type LubVehLivianoDeleteArgs = {
    /**
     * Select specific fields to fetch from the LubVehLiviano
     * 
    **/
    select?: LubVehLivianoSelect | null
    /**
     * Filter which LubVehLiviano to delete.
     * 
    **/
    where: LubVehLivianoWhereUniqueInput
  }


  /**
   * LubVehLiviano deleteMany
   */
  export type LubVehLivianoDeleteManyArgs = {
    /**
     * Filter which LubVehLivianos to delete
     * 
    **/
    where?: LubVehLivianoWhereInput
  }


  /**
   * LubVehLiviano findRaw
   */
  export type LubVehLivianoFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * LubVehLiviano aggregateRaw
   */
  export type LubVehLivianoAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * LubVehLiviano: findUniqueOrThrow
   */
  export type LubVehLivianoFindUniqueOrThrowArgs = LubVehLivianoFindUniqueArgsBase
      

  /**
   * LubVehLiviano: findFirstOrThrow
   */
  export type LubVehLivianoFindFirstOrThrowArgs = LubVehLivianoFindFirstArgsBase
      

  /**
   * LubVehLiviano without action
   */
  export type LubVehLivianoArgs = {
    /**
     * Select specific fields to fetch from the LubVehLiviano
     * 
    **/
    select?: LubVehLivianoSelect | null
  }



  /**
   * Model LubMoto
   */


  export type AggregateLubMoto = {
    _count: LubMotoCountAggregateOutputType | null
    _avg: LubMotoAvgAggregateOutputType | null
    _sum: LubMotoSumAggregateOutputType | null
    _min: LubMotoMinAggregateOutputType | null
    _max: LubMotoMaxAggregateOutputType | null
  }

  export type LubMotoAvgAggregateOutputType = {
    order: number | null
  }

  export type LubMotoSumAggregateOutputType = {
    order: number | null
  }

  export type LubMotoMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    presentacion: string | null
    indicado_para: string | null
    status: boolean | null
    order: number | null
    image: string | null
    created_at: string | null
    updated_at: string | null
  }

  export type LubMotoMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    presentacion: string | null
    indicado_para: string | null
    status: boolean | null
    order: number | null
    image: string | null
    created_at: string | null
    updated_at: string | null
  }

  export type LubMotoCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    presentacion: number
    indicado_para: number
    status: number
    order: number
    image: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LubMotoAvgAggregateInputType = {
    order?: true
  }

  export type LubMotoSumAggregateInputType = {
    order?: true
  }

  export type LubMotoMinAggregateInputType = {
    id?: true
    nombre?: true
    presentacion?: true
    indicado_para?: true
    status?: true
    order?: true
    image?: true
    created_at?: true
    updated_at?: true
  }

  export type LubMotoMaxAggregateInputType = {
    id?: true
    nombre?: true
    presentacion?: true
    indicado_para?: true
    status?: true
    order?: true
    image?: true
    created_at?: true
    updated_at?: true
  }

  export type LubMotoCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    presentacion?: true
    indicado_para?: true
    status?: true
    order?: true
    image?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LubMotoAggregateArgs = {
    /**
     * Filter which LubMoto to aggregate.
     * 
    **/
    where?: LubMotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubMotos to fetch.
     * 
    **/
    orderBy?: Enumerable<LubMotoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LubMotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubMotos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubMotos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LubMotos
    **/
    _count?: true | LubMotoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LubMotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LubMotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LubMotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LubMotoMaxAggregateInputType
  }

  export type GetLubMotoAggregateType<T extends LubMotoAggregateArgs> = {
        [P in keyof T & keyof AggregateLubMoto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLubMoto[P]>
      : GetScalarType<T[P], AggregateLubMoto[P]>
  }




  export type LubMotoGroupByArgs = {
    where?: LubMotoWhereInput
    orderBy?: Enumerable<LubMotoOrderByWithAggregationInput>
    by: Array<LubMotoScalarFieldEnum>
    having?: LubMotoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LubMotoCountAggregateInputType | true
    _avg?: LubMotoAvgAggregateInputType
    _sum?: LubMotoSumAggregateInputType
    _min?: LubMotoMinAggregateInputType
    _max?: LubMotoMaxAggregateInputType
  }


  export type LubMotoGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string[]
    presentacion: string
    indicado_para: string
    status: boolean
    order: number
    image: string
    created_at: string
    updated_at: string
    _count: LubMotoCountAggregateOutputType | null
    _avg: LubMotoAvgAggregateOutputType | null
    _sum: LubMotoSumAggregateOutputType | null
    _min: LubMotoMinAggregateOutputType | null
    _max: LubMotoMaxAggregateOutputType | null
  }

  type GetLubMotoGroupByPayload<T extends LubMotoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LubMotoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LubMotoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LubMotoGroupByOutputType[P]>
            : GetScalarType<T[P], LubMotoGroupByOutputType[P]>
        }
      >
    >


  export type LubMotoSelect = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    presentacion?: boolean
    indicado_para?: boolean
    status?: boolean
    order?: boolean
    image?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LubMotoGetPayload<
    S extends boolean | null | undefined | LubMotoArgs,
    U = keyof S
      > = S extends true
        ? LubMoto
    : S extends undefined
    ? never
    : S extends LubMotoArgs | LubMotoFindManyArgs
    ?'include' extends U
    ? LubMoto 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof LubMoto ? LubMoto[P] : never
  } 
    : LubMoto
  : LubMoto


  type LubMotoCountArgs = Merge<
    Omit<LubMotoFindManyArgs, 'select' | 'include'> & {
      select?: LubMotoCountAggregateInputType | true
    }
  >

  export interface LubMotoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one LubMoto that matches the filter.
     * @param {LubMotoFindUniqueArgs} args - Arguments to find a LubMoto
     * @example
     * // Get one LubMoto
     * const lubMoto = await prisma.lubMoto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LubMotoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LubMotoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LubMoto'> extends True ? CheckSelect<T, Prisma__LubMotoClient<LubMoto>, Prisma__LubMotoClient<LubMotoGetPayload<T>>> : CheckSelect<T, Prisma__LubMotoClient<LubMoto | null, null>, Prisma__LubMotoClient<LubMotoGetPayload<T> | null, null>>

    /**
     * Find the first LubMoto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubMotoFindFirstArgs} args - Arguments to find a LubMoto
     * @example
     * // Get one LubMoto
     * const lubMoto = await prisma.lubMoto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LubMotoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LubMotoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LubMoto'> extends True ? CheckSelect<T, Prisma__LubMotoClient<LubMoto>, Prisma__LubMotoClient<LubMotoGetPayload<T>>> : CheckSelect<T, Prisma__LubMotoClient<LubMoto | null, null>, Prisma__LubMotoClient<LubMotoGetPayload<T> | null, null>>

    /**
     * Find zero or more LubMotos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubMotoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LubMotos
     * const lubMotos = await prisma.lubMoto.findMany()
     * 
     * // Get first 10 LubMotos
     * const lubMotos = await prisma.lubMoto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lubMotoWithIdOnly = await prisma.lubMoto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LubMotoFindManyArgs>(
      args?: SelectSubset<T, LubMotoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<LubMoto>>, PrismaPromise<Array<LubMotoGetPayload<T>>>>

    /**
     * Create a LubMoto.
     * @param {LubMotoCreateArgs} args - Arguments to create a LubMoto.
     * @example
     * // Create one LubMoto
     * const LubMoto = await prisma.lubMoto.create({
     *   data: {
     *     // ... data to create a LubMoto
     *   }
     * })
     * 
    **/
    create<T extends LubMotoCreateArgs>(
      args: SelectSubset<T, LubMotoCreateArgs>
    ): CheckSelect<T, Prisma__LubMotoClient<LubMoto>, Prisma__LubMotoClient<LubMotoGetPayload<T>>>

    /**
     * Create many LubMotos.
     *     @param {LubMotoCreateManyArgs} args - Arguments to create many LubMotos.
     *     @example
     *     // Create many LubMotos
     *     const lubMoto = await prisma.lubMoto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LubMotoCreateManyArgs>(
      args?: SelectSubset<T, LubMotoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a LubMoto.
     * @param {LubMotoDeleteArgs} args - Arguments to delete one LubMoto.
     * @example
     * // Delete one LubMoto
     * const LubMoto = await prisma.lubMoto.delete({
     *   where: {
     *     // ... filter to delete one LubMoto
     *   }
     * })
     * 
    **/
    delete<T extends LubMotoDeleteArgs>(
      args: SelectSubset<T, LubMotoDeleteArgs>
    ): CheckSelect<T, Prisma__LubMotoClient<LubMoto>, Prisma__LubMotoClient<LubMotoGetPayload<T>>>

    /**
     * Update one LubMoto.
     * @param {LubMotoUpdateArgs} args - Arguments to update one LubMoto.
     * @example
     * // Update one LubMoto
     * const lubMoto = await prisma.lubMoto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LubMotoUpdateArgs>(
      args: SelectSubset<T, LubMotoUpdateArgs>
    ): CheckSelect<T, Prisma__LubMotoClient<LubMoto>, Prisma__LubMotoClient<LubMotoGetPayload<T>>>

    /**
     * Delete zero or more LubMotos.
     * @param {LubMotoDeleteManyArgs} args - Arguments to filter LubMotos to delete.
     * @example
     * // Delete a few LubMotos
     * const { count } = await prisma.lubMoto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LubMotoDeleteManyArgs>(
      args?: SelectSubset<T, LubMotoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more LubMotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubMotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LubMotos
     * const lubMoto = await prisma.lubMoto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LubMotoUpdateManyArgs>(
      args: SelectSubset<T, LubMotoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one LubMoto.
     * @param {LubMotoUpsertArgs} args - Arguments to update or create a LubMoto.
     * @example
     * // Update or create a LubMoto
     * const lubMoto = await prisma.lubMoto.upsert({
     *   create: {
     *     // ... data to create a LubMoto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LubMoto we want to update
     *   }
     * })
    **/
    upsert<T extends LubMotoUpsertArgs>(
      args: SelectSubset<T, LubMotoUpsertArgs>
    ): CheckSelect<T, Prisma__LubMotoClient<LubMoto>, Prisma__LubMotoClient<LubMotoGetPayload<T>>>

    /**
     * Find zero or more LubMotos that matches the filter.
     * @param {LubMotoFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const lubMoto = await prisma.lubMoto.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: LubMotoFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a LubMoto.
     * @param {LubMotoAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const lubMoto = await prisma.lubMoto.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: LubMotoAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one LubMoto that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {LubMotoFindUniqueOrThrowArgs} args - Arguments to find a LubMoto
     * @example
     * // Get one LubMoto
     * const lubMoto = await prisma.lubMoto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LubMotoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LubMotoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__LubMotoClient<LubMoto>, Prisma__LubMotoClient<LubMotoGetPayload<T>>>

    /**
     * Find the first LubMoto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubMotoFindFirstOrThrowArgs} args - Arguments to find a LubMoto
     * @example
     * // Get one LubMoto
     * const lubMoto = await prisma.lubMoto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LubMotoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LubMotoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__LubMotoClient<LubMoto>, Prisma__LubMotoClient<LubMotoGetPayload<T>>>

    /**
     * Count the number of LubMotos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubMotoCountArgs} args - Arguments to filter LubMotos to count.
     * @example
     * // Count the number of LubMotos
     * const count = await prisma.lubMoto.count({
     *   where: {
     *     // ... the filter for the LubMotos we want to count
     *   }
     * })
    **/
    count<T extends LubMotoCountArgs>(
      args?: Subset<T, LubMotoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LubMotoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LubMoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubMotoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LubMotoAggregateArgs>(args: Subset<T, LubMotoAggregateArgs>): PrismaPromise<GetLubMotoAggregateType<T>>

    /**
     * Group by LubMoto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubMotoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LubMotoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LubMotoGroupByArgs['orderBy'] }
        : { orderBy?: LubMotoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LubMotoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLubMotoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LubMoto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LubMotoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LubMoto base type for findUnique actions
   */
  export type LubMotoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LubMoto
     * 
    **/
    select?: LubMotoSelect | null
    /**
     * Filter, which LubMoto to fetch.
     * 
    **/
    where: LubMotoWhereUniqueInput
  }

  /**
   * LubMoto: findUnique
   */
  export interface LubMotoFindUniqueArgs extends LubMotoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LubMoto base type for findFirst actions
   */
  export type LubMotoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LubMoto
     * 
    **/
    select?: LubMotoSelect | null
    /**
     * Filter, which LubMoto to fetch.
     * 
    **/
    where?: LubMotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubMotos to fetch.
     * 
    **/
    orderBy?: Enumerable<LubMotoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LubMotos.
     * 
    **/
    cursor?: LubMotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubMotos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubMotos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LubMotos.
     * 
    **/
    distinct?: Enumerable<LubMotoScalarFieldEnum>
  }

  /**
   * LubMoto: findFirst
   */
  export interface LubMotoFindFirstArgs extends LubMotoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LubMoto findMany
   */
  export type LubMotoFindManyArgs = {
    /**
     * Select specific fields to fetch from the LubMoto
     * 
    **/
    select?: LubMotoSelect | null
    /**
     * Filter, which LubMotos to fetch.
     * 
    **/
    where?: LubMotoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubMotos to fetch.
     * 
    **/
    orderBy?: Enumerable<LubMotoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LubMotos.
     * 
    **/
    cursor?: LubMotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubMotos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubMotos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LubMotoScalarFieldEnum>
  }


  /**
   * LubMoto create
   */
  export type LubMotoCreateArgs = {
    /**
     * Select specific fields to fetch from the LubMoto
     * 
    **/
    select?: LubMotoSelect | null
    /**
     * The data needed to create a LubMoto.
     * 
    **/
    data: XOR<LubMotoCreateInput, LubMotoUncheckedCreateInput>
  }


  /**
   * LubMoto createMany
   */
  export type LubMotoCreateManyArgs = {
    /**
     * The data used to create many LubMotos.
     * 
    **/
    data: Enumerable<LubMotoCreateManyInput>
  }


  /**
   * LubMoto update
   */
  export type LubMotoUpdateArgs = {
    /**
     * Select specific fields to fetch from the LubMoto
     * 
    **/
    select?: LubMotoSelect | null
    /**
     * The data needed to update a LubMoto.
     * 
    **/
    data: XOR<LubMotoUpdateInput, LubMotoUncheckedUpdateInput>
    /**
     * Choose, which LubMoto to update.
     * 
    **/
    where: LubMotoWhereUniqueInput
  }


  /**
   * LubMoto updateMany
   */
  export type LubMotoUpdateManyArgs = {
    /**
     * The data used to update LubMotos.
     * 
    **/
    data: XOR<LubMotoUpdateManyMutationInput, LubMotoUncheckedUpdateManyInput>
    /**
     * Filter which LubMotos to update
     * 
    **/
    where?: LubMotoWhereInput
  }


  /**
   * LubMoto upsert
   */
  export type LubMotoUpsertArgs = {
    /**
     * Select specific fields to fetch from the LubMoto
     * 
    **/
    select?: LubMotoSelect | null
    /**
     * The filter to search for the LubMoto to update in case it exists.
     * 
    **/
    where: LubMotoWhereUniqueInput
    /**
     * In case the LubMoto found by the `where` argument doesn't exist, create a new LubMoto with this data.
     * 
    **/
    create: XOR<LubMotoCreateInput, LubMotoUncheckedCreateInput>
    /**
     * In case the LubMoto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LubMotoUpdateInput, LubMotoUncheckedUpdateInput>
  }


  /**
   * LubMoto delete
   */
  export type LubMotoDeleteArgs = {
    /**
     * Select specific fields to fetch from the LubMoto
     * 
    **/
    select?: LubMotoSelect | null
    /**
     * Filter which LubMoto to delete.
     * 
    **/
    where: LubMotoWhereUniqueInput
  }


  /**
   * LubMoto deleteMany
   */
  export type LubMotoDeleteManyArgs = {
    /**
     * Filter which LubMotos to delete
     * 
    **/
    where?: LubMotoWhereInput
  }


  /**
   * LubMoto findRaw
   */
  export type LubMotoFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * LubMoto aggregateRaw
   */
  export type LubMotoAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * LubMoto: findUniqueOrThrow
   */
  export type LubMotoFindUniqueOrThrowArgs = LubMotoFindUniqueArgsBase
      

  /**
   * LubMoto: findFirstOrThrow
   */
  export type LubMotoFindFirstOrThrowArgs = LubMotoFindFirstArgsBase
      

  /**
   * LubMoto without action
   */
  export type LubMotoArgs = {
    /**
     * Select specific fields to fetch from the LubMoto
     * 
    **/
    select?: LubMotoSelect | null
  }



  /**
   * Model LubAux
   */


  export type AggregateLubAux = {
    _count: LubAuxCountAggregateOutputType | null
    _avg: LubAuxAvgAggregateOutputType | null
    _sum: LubAuxSumAggregateOutputType | null
    _min: LubAuxMinAggregateOutputType | null
    _max: LubAuxMaxAggregateOutputType | null
  }

  export type LubAuxAvgAggregateOutputType = {
    order: number | null
  }

  export type LubAuxSumAggregateOutputType = {
    order: number | null
  }

  export type LubAuxMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    image: string | null
    presentacion: string | null
    status: boolean | null
    order: number | null
    indicado_para: string | null
    rec_honda: boolean | null
    created_at: string | null
    updated_at: string | null
  }

  export type LubAuxMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    image: string | null
    presentacion: string | null
    status: boolean | null
    order: number | null
    indicado_para: string | null
    rec_honda: boolean | null
    created_at: string | null
    updated_at: string | null
  }

  export type LubAuxCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    image: number
    presentacion: number
    status: number
    order: number
    indicado_para: number
    rec_honda: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LubAuxAvgAggregateInputType = {
    order?: true
  }

  export type LubAuxSumAggregateInputType = {
    order?: true
  }

  export type LubAuxMinAggregateInputType = {
    id?: true
    nombre?: true
    image?: true
    presentacion?: true
    status?: true
    order?: true
    indicado_para?: true
    rec_honda?: true
    created_at?: true
    updated_at?: true
  }

  export type LubAuxMaxAggregateInputType = {
    id?: true
    nombre?: true
    image?: true
    presentacion?: true
    status?: true
    order?: true
    indicado_para?: true
    rec_honda?: true
    created_at?: true
    updated_at?: true
  }

  export type LubAuxCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    image?: true
    presentacion?: true
    status?: true
    order?: true
    indicado_para?: true
    rec_honda?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LubAuxAggregateArgs = {
    /**
     * Filter which LubAux to aggregate.
     * 
    **/
    where?: LubAuxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubAuxes to fetch.
     * 
    **/
    orderBy?: Enumerable<LubAuxOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LubAuxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubAuxes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubAuxes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LubAuxes
    **/
    _count?: true | LubAuxCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LubAuxAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LubAuxSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LubAuxMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LubAuxMaxAggregateInputType
  }

  export type GetLubAuxAggregateType<T extends LubAuxAggregateArgs> = {
        [P in keyof T & keyof AggregateLubAux]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLubAux[P]>
      : GetScalarType<T[P], AggregateLubAux[P]>
  }




  export type LubAuxGroupByArgs = {
    where?: LubAuxWhereInput
    orderBy?: Enumerable<LubAuxOrderByWithAggregationInput>
    by: Array<LubAuxScalarFieldEnum>
    having?: LubAuxScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LubAuxCountAggregateInputType | true
    _avg?: LubAuxAvgAggregateInputType
    _sum?: LubAuxSumAggregateInputType
    _min?: LubAuxMinAggregateInputType
    _max?: LubAuxMaxAggregateInputType
  }


  export type LubAuxGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string[]
    image: string
    presentacion: string
    status: boolean
    order: number
    indicado_para: string
    rec_honda: boolean
    created_at: string
    updated_at: string
    _count: LubAuxCountAggregateOutputType | null
    _avg: LubAuxAvgAggregateOutputType | null
    _sum: LubAuxSumAggregateOutputType | null
    _min: LubAuxMinAggregateOutputType | null
    _max: LubAuxMaxAggregateOutputType | null
  }

  type GetLubAuxGroupByPayload<T extends LubAuxGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LubAuxGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LubAuxGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LubAuxGroupByOutputType[P]>
            : GetScalarType<T[P], LubAuxGroupByOutputType[P]>
        }
      >
    >


  export type LubAuxSelect = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    image?: boolean
    presentacion?: boolean
    status?: boolean
    order?: boolean
    indicado_para?: boolean
    rec_honda?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LubAuxGetPayload<
    S extends boolean | null | undefined | LubAuxArgs,
    U = keyof S
      > = S extends true
        ? LubAux
    : S extends undefined
    ? never
    : S extends LubAuxArgs | LubAuxFindManyArgs
    ?'include' extends U
    ? LubAux 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof LubAux ? LubAux[P] : never
  } 
    : LubAux
  : LubAux


  type LubAuxCountArgs = Merge<
    Omit<LubAuxFindManyArgs, 'select' | 'include'> & {
      select?: LubAuxCountAggregateInputType | true
    }
  >

  export interface LubAuxDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one LubAux that matches the filter.
     * @param {LubAuxFindUniqueArgs} args - Arguments to find a LubAux
     * @example
     * // Get one LubAux
     * const lubAux = await prisma.lubAux.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LubAuxFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LubAuxFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LubAux'> extends True ? CheckSelect<T, Prisma__LubAuxClient<LubAux>, Prisma__LubAuxClient<LubAuxGetPayload<T>>> : CheckSelect<T, Prisma__LubAuxClient<LubAux | null, null>, Prisma__LubAuxClient<LubAuxGetPayload<T> | null, null>>

    /**
     * Find the first LubAux that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubAuxFindFirstArgs} args - Arguments to find a LubAux
     * @example
     * // Get one LubAux
     * const lubAux = await prisma.lubAux.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LubAuxFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LubAuxFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LubAux'> extends True ? CheckSelect<T, Prisma__LubAuxClient<LubAux>, Prisma__LubAuxClient<LubAuxGetPayload<T>>> : CheckSelect<T, Prisma__LubAuxClient<LubAux | null, null>, Prisma__LubAuxClient<LubAuxGetPayload<T> | null, null>>

    /**
     * Find zero or more LubAuxes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubAuxFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LubAuxes
     * const lubAuxes = await prisma.lubAux.findMany()
     * 
     * // Get first 10 LubAuxes
     * const lubAuxes = await prisma.lubAux.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lubAuxWithIdOnly = await prisma.lubAux.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LubAuxFindManyArgs>(
      args?: SelectSubset<T, LubAuxFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<LubAux>>, PrismaPromise<Array<LubAuxGetPayload<T>>>>

    /**
     * Create a LubAux.
     * @param {LubAuxCreateArgs} args - Arguments to create a LubAux.
     * @example
     * // Create one LubAux
     * const LubAux = await prisma.lubAux.create({
     *   data: {
     *     // ... data to create a LubAux
     *   }
     * })
     * 
    **/
    create<T extends LubAuxCreateArgs>(
      args: SelectSubset<T, LubAuxCreateArgs>
    ): CheckSelect<T, Prisma__LubAuxClient<LubAux>, Prisma__LubAuxClient<LubAuxGetPayload<T>>>

    /**
     * Create many LubAuxes.
     *     @param {LubAuxCreateManyArgs} args - Arguments to create many LubAuxes.
     *     @example
     *     // Create many LubAuxes
     *     const lubAux = await prisma.lubAux.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LubAuxCreateManyArgs>(
      args?: SelectSubset<T, LubAuxCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a LubAux.
     * @param {LubAuxDeleteArgs} args - Arguments to delete one LubAux.
     * @example
     * // Delete one LubAux
     * const LubAux = await prisma.lubAux.delete({
     *   where: {
     *     // ... filter to delete one LubAux
     *   }
     * })
     * 
    **/
    delete<T extends LubAuxDeleteArgs>(
      args: SelectSubset<T, LubAuxDeleteArgs>
    ): CheckSelect<T, Prisma__LubAuxClient<LubAux>, Prisma__LubAuxClient<LubAuxGetPayload<T>>>

    /**
     * Update one LubAux.
     * @param {LubAuxUpdateArgs} args - Arguments to update one LubAux.
     * @example
     * // Update one LubAux
     * const lubAux = await prisma.lubAux.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LubAuxUpdateArgs>(
      args: SelectSubset<T, LubAuxUpdateArgs>
    ): CheckSelect<T, Prisma__LubAuxClient<LubAux>, Prisma__LubAuxClient<LubAuxGetPayload<T>>>

    /**
     * Delete zero or more LubAuxes.
     * @param {LubAuxDeleteManyArgs} args - Arguments to filter LubAuxes to delete.
     * @example
     * // Delete a few LubAuxes
     * const { count } = await prisma.lubAux.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LubAuxDeleteManyArgs>(
      args?: SelectSubset<T, LubAuxDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more LubAuxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubAuxUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LubAuxes
     * const lubAux = await prisma.lubAux.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LubAuxUpdateManyArgs>(
      args: SelectSubset<T, LubAuxUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one LubAux.
     * @param {LubAuxUpsertArgs} args - Arguments to update or create a LubAux.
     * @example
     * // Update or create a LubAux
     * const lubAux = await prisma.lubAux.upsert({
     *   create: {
     *     // ... data to create a LubAux
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LubAux we want to update
     *   }
     * })
    **/
    upsert<T extends LubAuxUpsertArgs>(
      args: SelectSubset<T, LubAuxUpsertArgs>
    ): CheckSelect<T, Prisma__LubAuxClient<LubAux>, Prisma__LubAuxClient<LubAuxGetPayload<T>>>

    /**
     * Find zero or more LubAuxes that matches the filter.
     * @param {LubAuxFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const lubAux = await prisma.lubAux.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: LubAuxFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a LubAux.
     * @param {LubAuxAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const lubAux = await prisma.lubAux.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: LubAuxAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one LubAux that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {LubAuxFindUniqueOrThrowArgs} args - Arguments to find a LubAux
     * @example
     * // Get one LubAux
     * const lubAux = await prisma.lubAux.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LubAuxFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LubAuxFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__LubAuxClient<LubAux>, Prisma__LubAuxClient<LubAuxGetPayload<T>>>

    /**
     * Find the first LubAux that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubAuxFindFirstOrThrowArgs} args - Arguments to find a LubAux
     * @example
     * // Get one LubAux
     * const lubAux = await prisma.lubAux.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LubAuxFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LubAuxFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__LubAuxClient<LubAux>, Prisma__LubAuxClient<LubAuxGetPayload<T>>>

    /**
     * Count the number of LubAuxes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubAuxCountArgs} args - Arguments to filter LubAuxes to count.
     * @example
     * // Count the number of LubAuxes
     * const count = await prisma.lubAux.count({
     *   where: {
     *     // ... the filter for the LubAuxes we want to count
     *   }
     * })
    **/
    count<T extends LubAuxCountArgs>(
      args?: Subset<T, LubAuxCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LubAuxCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LubAux.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubAuxAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LubAuxAggregateArgs>(args: Subset<T, LubAuxAggregateArgs>): PrismaPromise<GetLubAuxAggregateType<T>>

    /**
     * Group by LubAux.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubAuxGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LubAuxGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LubAuxGroupByArgs['orderBy'] }
        : { orderBy?: LubAuxGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LubAuxGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLubAuxGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LubAux.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LubAuxClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LubAux base type for findUnique actions
   */
  export type LubAuxFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LubAux
     * 
    **/
    select?: LubAuxSelect | null
    /**
     * Filter, which LubAux to fetch.
     * 
    **/
    where: LubAuxWhereUniqueInput
  }

  /**
   * LubAux: findUnique
   */
  export interface LubAuxFindUniqueArgs extends LubAuxFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LubAux base type for findFirst actions
   */
  export type LubAuxFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LubAux
     * 
    **/
    select?: LubAuxSelect | null
    /**
     * Filter, which LubAux to fetch.
     * 
    **/
    where?: LubAuxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubAuxes to fetch.
     * 
    **/
    orderBy?: Enumerable<LubAuxOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LubAuxes.
     * 
    **/
    cursor?: LubAuxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubAuxes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubAuxes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LubAuxes.
     * 
    **/
    distinct?: Enumerable<LubAuxScalarFieldEnum>
  }

  /**
   * LubAux: findFirst
   */
  export interface LubAuxFindFirstArgs extends LubAuxFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LubAux findMany
   */
  export type LubAuxFindManyArgs = {
    /**
     * Select specific fields to fetch from the LubAux
     * 
    **/
    select?: LubAuxSelect | null
    /**
     * Filter, which LubAuxes to fetch.
     * 
    **/
    where?: LubAuxWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubAuxes to fetch.
     * 
    **/
    orderBy?: Enumerable<LubAuxOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LubAuxes.
     * 
    **/
    cursor?: LubAuxWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubAuxes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubAuxes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LubAuxScalarFieldEnum>
  }


  /**
   * LubAux create
   */
  export type LubAuxCreateArgs = {
    /**
     * Select specific fields to fetch from the LubAux
     * 
    **/
    select?: LubAuxSelect | null
    /**
     * The data needed to create a LubAux.
     * 
    **/
    data: XOR<LubAuxCreateInput, LubAuxUncheckedCreateInput>
  }


  /**
   * LubAux createMany
   */
  export type LubAuxCreateManyArgs = {
    /**
     * The data used to create many LubAuxes.
     * 
    **/
    data: Enumerable<LubAuxCreateManyInput>
  }


  /**
   * LubAux update
   */
  export type LubAuxUpdateArgs = {
    /**
     * Select specific fields to fetch from the LubAux
     * 
    **/
    select?: LubAuxSelect | null
    /**
     * The data needed to update a LubAux.
     * 
    **/
    data: XOR<LubAuxUpdateInput, LubAuxUncheckedUpdateInput>
    /**
     * Choose, which LubAux to update.
     * 
    **/
    where: LubAuxWhereUniqueInput
  }


  /**
   * LubAux updateMany
   */
  export type LubAuxUpdateManyArgs = {
    /**
     * The data used to update LubAuxes.
     * 
    **/
    data: XOR<LubAuxUpdateManyMutationInput, LubAuxUncheckedUpdateManyInput>
    /**
     * Filter which LubAuxes to update
     * 
    **/
    where?: LubAuxWhereInput
  }


  /**
   * LubAux upsert
   */
  export type LubAuxUpsertArgs = {
    /**
     * Select specific fields to fetch from the LubAux
     * 
    **/
    select?: LubAuxSelect | null
    /**
     * The filter to search for the LubAux to update in case it exists.
     * 
    **/
    where: LubAuxWhereUniqueInput
    /**
     * In case the LubAux found by the `where` argument doesn't exist, create a new LubAux with this data.
     * 
    **/
    create: XOR<LubAuxCreateInput, LubAuxUncheckedCreateInput>
    /**
     * In case the LubAux was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LubAuxUpdateInput, LubAuxUncheckedUpdateInput>
  }


  /**
   * LubAux delete
   */
  export type LubAuxDeleteArgs = {
    /**
     * Select specific fields to fetch from the LubAux
     * 
    **/
    select?: LubAuxSelect | null
    /**
     * Filter which LubAux to delete.
     * 
    **/
    where: LubAuxWhereUniqueInput
  }


  /**
   * LubAux deleteMany
   */
  export type LubAuxDeleteManyArgs = {
    /**
     * Filter which LubAuxes to delete
     * 
    **/
    where?: LubAuxWhereInput
  }


  /**
   * LubAux findRaw
   */
  export type LubAuxFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * LubAux aggregateRaw
   */
  export type LubAuxAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * LubAux: findUniqueOrThrow
   */
  export type LubAuxFindUniqueOrThrowArgs = LubAuxFindUniqueArgsBase
      

  /**
   * LubAux: findFirstOrThrow
   */
  export type LubAuxFindFirstOrThrowArgs = LubAuxFindFirstArgsBase
      

  /**
   * LubAux without action
   */
  export type LubAuxArgs = {
    /**
     * Select specific fields to fetch from the LubAux
     * 
    **/
    select?: LubAuxSelect | null
  }



  /**
   * Model LubVehPesado
   */


  export type AggregateLubVehPesado = {
    _count: LubVehPesadoCountAggregateOutputType | null
    _avg: LubVehPesadoAvgAggregateOutputType | null
    _sum: LubVehPesadoSumAggregateOutputType | null
    _min: LubVehPesadoMinAggregateOutputType | null
    _max: LubVehPesadoMaxAggregateOutputType | null
  }

  export type LubVehPesadoAvgAggregateOutputType = {
    order: number | null
  }

  export type LubVehPesadoSumAggregateOutputType = {
    order: number | null
  }

  export type LubVehPesadoMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    image: string | null
    presentacion: string | null
    atiende_excede: string | null
    aprobado: string | null
    status: boolean | null
    order: number | null
    rec_exxon_mob: string | null
    created_at: string | null
    updated_at: string | null
  }

  export type LubVehPesadoMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    image: string | null
    presentacion: string | null
    atiende_excede: string | null
    aprobado: string | null
    status: boolean | null
    order: number | null
    rec_exxon_mob: string | null
    created_at: string | null
    updated_at: string | null
  }

  export type LubVehPesadoCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    caracteristicas: number
    image: number
    presentacion: number
    atiende_excede: number
    aprobado: number
    status: number
    order: number
    rec_exxon_mob: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LubVehPesadoAvgAggregateInputType = {
    order?: true
  }

  export type LubVehPesadoSumAggregateInputType = {
    order?: true
  }

  export type LubVehPesadoMinAggregateInputType = {
    id?: true
    nombre?: true
    image?: true
    presentacion?: true
    atiende_excede?: true
    aprobado?: true
    status?: true
    order?: true
    rec_exxon_mob?: true
    created_at?: true
    updated_at?: true
  }

  export type LubVehPesadoMaxAggregateInputType = {
    id?: true
    nombre?: true
    image?: true
    presentacion?: true
    atiende_excede?: true
    aprobado?: true
    status?: true
    order?: true
    rec_exxon_mob?: true
    created_at?: true
    updated_at?: true
  }

  export type LubVehPesadoCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    caracteristicas?: true
    image?: true
    presentacion?: true
    atiende_excede?: true
    aprobado?: true
    status?: true
    order?: true
    rec_exxon_mob?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LubVehPesadoAggregateArgs = {
    /**
     * Filter which LubVehPesado to aggregate.
     * 
    **/
    where?: LubVehPesadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubVehPesados to fetch.
     * 
    **/
    orderBy?: Enumerable<LubVehPesadoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LubVehPesadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubVehPesados from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubVehPesados.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LubVehPesados
    **/
    _count?: true | LubVehPesadoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LubVehPesadoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LubVehPesadoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LubVehPesadoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LubVehPesadoMaxAggregateInputType
  }

  export type GetLubVehPesadoAggregateType<T extends LubVehPesadoAggregateArgs> = {
        [P in keyof T & keyof AggregateLubVehPesado]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLubVehPesado[P]>
      : GetScalarType<T[P], AggregateLubVehPesado[P]>
  }




  export type LubVehPesadoGroupByArgs = {
    where?: LubVehPesadoWhereInput
    orderBy?: Enumerable<LubVehPesadoOrderByWithAggregationInput>
    by: Array<LubVehPesadoScalarFieldEnum>
    having?: LubVehPesadoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LubVehPesadoCountAggregateInputType | true
    _avg?: LubVehPesadoAvgAggregateInputType
    _sum?: LubVehPesadoSumAggregateInputType
    _min?: LubVehPesadoMinAggregateInputType
    _max?: LubVehPesadoMaxAggregateInputType
  }


  export type LubVehPesadoGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string[]
    caracteristicas: string[]
    image: string
    presentacion: string
    atiende_excede: string
    aprobado: string
    status: boolean
    order: number
    rec_exxon_mob: string
    created_at: string
    updated_at: string
    _count: LubVehPesadoCountAggregateOutputType | null
    _avg: LubVehPesadoAvgAggregateOutputType | null
    _sum: LubVehPesadoSumAggregateOutputType | null
    _min: LubVehPesadoMinAggregateOutputType | null
    _max: LubVehPesadoMaxAggregateOutputType | null
  }

  type GetLubVehPesadoGroupByPayload<T extends LubVehPesadoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LubVehPesadoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LubVehPesadoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LubVehPesadoGroupByOutputType[P]>
            : GetScalarType<T[P], LubVehPesadoGroupByOutputType[P]>
        }
      >
    >


  export type LubVehPesadoSelect = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    caracteristicas?: boolean
    image?: boolean
    presentacion?: boolean
    atiende_excede?: boolean
    aprobado?: boolean
    status?: boolean
    order?: boolean
    rec_exxon_mob?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LubVehPesadoGetPayload<
    S extends boolean | null | undefined | LubVehPesadoArgs,
    U = keyof S
      > = S extends true
        ? LubVehPesado
    : S extends undefined
    ? never
    : S extends LubVehPesadoArgs | LubVehPesadoFindManyArgs
    ?'include' extends U
    ? LubVehPesado 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof LubVehPesado ? LubVehPesado[P] : never
  } 
    : LubVehPesado
  : LubVehPesado


  type LubVehPesadoCountArgs = Merge<
    Omit<LubVehPesadoFindManyArgs, 'select' | 'include'> & {
      select?: LubVehPesadoCountAggregateInputType | true
    }
  >

  export interface LubVehPesadoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one LubVehPesado that matches the filter.
     * @param {LubVehPesadoFindUniqueArgs} args - Arguments to find a LubVehPesado
     * @example
     * // Get one LubVehPesado
     * const lubVehPesado = await prisma.lubVehPesado.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LubVehPesadoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LubVehPesadoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LubVehPesado'> extends True ? CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T>>> : CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado | null, null>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T> | null, null>>

    /**
     * Find the first LubVehPesado that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehPesadoFindFirstArgs} args - Arguments to find a LubVehPesado
     * @example
     * // Get one LubVehPesado
     * const lubVehPesado = await prisma.lubVehPesado.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LubVehPesadoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LubVehPesadoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LubVehPesado'> extends True ? CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T>>> : CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado | null, null>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T> | null, null>>

    /**
     * Find zero or more LubVehPesados that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehPesadoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LubVehPesados
     * const lubVehPesados = await prisma.lubVehPesado.findMany()
     * 
     * // Get first 10 LubVehPesados
     * const lubVehPesados = await prisma.lubVehPesado.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lubVehPesadoWithIdOnly = await prisma.lubVehPesado.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LubVehPesadoFindManyArgs>(
      args?: SelectSubset<T, LubVehPesadoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<LubVehPesado>>, PrismaPromise<Array<LubVehPesadoGetPayload<T>>>>

    /**
     * Create a LubVehPesado.
     * @param {LubVehPesadoCreateArgs} args - Arguments to create a LubVehPesado.
     * @example
     * // Create one LubVehPesado
     * const LubVehPesado = await prisma.lubVehPesado.create({
     *   data: {
     *     // ... data to create a LubVehPesado
     *   }
     * })
     * 
    **/
    create<T extends LubVehPesadoCreateArgs>(
      args: SelectSubset<T, LubVehPesadoCreateArgs>
    ): CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T>>>

    /**
     * Create many LubVehPesados.
     *     @param {LubVehPesadoCreateManyArgs} args - Arguments to create many LubVehPesados.
     *     @example
     *     // Create many LubVehPesados
     *     const lubVehPesado = await prisma.lubVehPesado.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LubVehPesadoCreateManyArgs>(
      args?: SelectSubset<T, LubVehPesadoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a LubVehPesado.
     * @param {LubVehPesadoDeleteArgs} args - Arguments to delete one LubVehPesado.
     * @example
     * // Delete one LubVehPesado
     * const LubVehPesado = await prisma.lubVehPesado.delete({
     *   where: {
     *     // ... filter to delete one LubVehPesado
     *   }
     * })
     * 
    **/
    delete<T extends LubVehPesadoDeleteArgs>(
      args: SelectSubset<T, LubVehPesadoDeleteArgs>
    ): CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T>>>

    /**
     * Update one LubVehPesado.
     * @param {LubVehPesadoUpdateArgs} args - Arguments to update one LubVehPesado.
     * @example
     * // Update one LubVehPesado
     * const lubVehPesado = await prisma.lubVehPesado.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LubVehPesadoUpdateArgs>(
      args: SelectSubset<T, LubVehPesadoUpdateArgs>
    ): CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T>>>

    /**
     * Delete zero or more LubVehPesados.
     * @param {LubVehPesadoDeleteManyArgs} args - Arguments to filter LubVehPesados to delete.
     * @example
     * // Delete a few LubVehPesados
     * const { count } = await prisma.lubVehPesado.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LubVehPesadoDeleteManyArgs>(
      args?: SelectSubset<T, LubVehPesadoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more LubVehPesados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehPesadoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LubVehPesados
     * const lubVehPesado = await prisma.lubVehPesado.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LubVehPesadoUpdateManyArgs>(
      args: SelectSubset<T, LubVehPesadoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one LubVehPesado.
     * @param {LubVehPesadoUpsertArgs} args - Arguments to update or create a LubVehPesado.
     * @example
     * // Update or create a LubVehPesado
     * const lubVehPesado = await prisma.lubVehPesado.upsert({
     *   create: {
     *     // ... data to create a LubVehPesado
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LubVehPesado we want to update
     *   }
     * })
    **/
    upsert<T extends LubVehPesadoUpsertArgs>(
      args: SelectSubset<T, LubVehPesadoUpsertArgs>
    ): CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T>>>

    /**
     * Find zero or more LubVehPesados that matches the filter.
     * @param {LubVehPesadoFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const lubVehPesado = await prisma.lubVehPesado.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: LubVehPesadoFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a LubVehPesado.
     * @param {LubVehPesadoAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const lubVehPesado = await prisma.lubVehPesado.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: LubVehPesadoAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one LubVehPesado that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {LubVehPesadoFindUniqueOrThrowArgs} args - Arguments to find a LubVehPesado
     * @example
     * // Get one LubVehPesado
     * const lubVehPesado = await prisma.lubVehPesado.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LubVehPesadoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LubVehPesadoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T>>>

    /**
     * Find the first LubVehPesado that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehPesadoFindFirstOrThrowArgs} args - Arguments to find a LubVehPesado
     * @example
     * // Get one LubVehPesado
     * const lubVehPesado = await prisma.lubVehPesado.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LubVehPesadoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LubVehPesadoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__LubVehPesadoClient<LubVehPesado>, Prisma__LubVehPesadoClient<LubVehPesadoGetPayload<T>>>

    /**
     * Count the number of LubVehPesados.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehPesadoCountArgs} args - Arguments to filter LubVehPesados to count.
     * @example
     * // Count the number of LubVehPesados
     * const count = await prisma.lubVehPesado.count({
     *   where: {
     *     // ... the filter for the LubVehPesados we want to count
     *   }
     * })
    **/
    count<T extends LubVehPesadoCountArgs>(
      args?: Subset<T, LubVehPesadoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LubVehPesadoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LubVehPesado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehPesadoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LubVehPesadoAggregateArgs>(args: Subset<T, LubVehPesadoAggregateArgs>): PrismaPromise<GetLubVehPesadoAggregateType<T>>

    /**
     * Group by LubVehPesado.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubVehPesadoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LubVehPesadoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LubVehPesadoGroupByArgs['orderBy'] }
        : { orderBy?: LubVehPesadoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LubVehPesadoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLubVehPesadoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for LubVehPesado.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LubVehPesadoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * LubVehPesado base type for findUnique actions
   */
  export type LubVehPesadoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the LubVehPesado
     * 
    **/
    select?: LubVehPesadoSelect | null
    /**
     * Filter, which LubVehPesado to fetch.
     * 
    **/
    where: LubVehPesadoWhereUniqueInput
  }

  /**
   * LubVehPesado: findUnique
   */
  export interface LubVehPesadoFindUniqueArgs extends LubVehPesadoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LubVehPesado base type for findFirst actions
   */
  export type LubVehPesadoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the LubVehPesado
     * 
    **/
    select?: LubVehPesadoSelect | null
    /**
     * Filter, which LubVehPesado to fetch.
     * 
    **/
    where?: LubVehPesadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubVehPesados to fetch.
     * 
    **/
    orderBy?: Enumerable<LubVehPesadoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LubVehPesados.
     * 
    **/
    cursor?: LubVehPesadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubVehPesados from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubVehPesados.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LubVehPesados.
     * 
    **/
    distinct?: Enumerable<LubVehPesadoScalarFieldEnum>
  }

  /**
   * LubVehPesado: findFirst
   */
  export interface LubVehPesadoFindFirstArgs extends LubVehPesadoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * LubVehPesado findMany
   */
  export type LubVehPesadoFindManyArgs = {
    /**
     * Select specific fields to fetch from the LubVehPesado
     * 
    **/
    select?: LubVehPesadoSelect | null
    /**
     * Filter, which LubVehPesados to fetch.
     * 
    **/
    where?: LubVehPesadoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LubVehPesados to fetch.
     * 
    **/
    orderBy?: Enumerable<LubVehPesadoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LubVehPesados.
     * 
    **/
    cursor?: LubVehPesadoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LubVehPesados from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LubVehPesados.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LubVehPesadoScalarFieldEnum>
  }


  /**
   * LubVehPesado create
   */
  export type LubVehPesadoCreateArgs = {
    /**
     * Select specific fields to fetch from the LubVehPesado
     * 
    **/
    select?: LubVehPesadoSelect | null
    /**
     * The data needed to create a LubVehPesado.
     * 
    **/
    data: XOR<LubVehPesadoCreateInput, LubVehPesadoUncheckedCreateInput>
  }


  /**
   * LubVehPesado createMany
   */
  export type LubVehPesadoCreateManyArgs = {
    /**
     * The data used to create many LubVehPesados.
     * 
    **/
    data: Enumerable<LubVehPesadoCreateManyInput>
  }


  /**
   * LubVehPesado update
   */
  export type LubVehPesadoUpdateArgs = {
    /**
     * Select specific fields to fetch from the LubVehPesado
     * 
    **/
    select?: LubVehPesadoSelect | null
    /**
     * The data needed to update a LubVehPesado.
     * 
    **/
    data: XOR<LubVehPesadoUpdateInput, LubVehPesadoUncheckedUpdateInput>
    /**
     * Choose, which LubVehPesado to update.
     * 
    **/
    where: LubVehPesadoWhereUniqueInput
  }


  /**
   * LubVehPesado updateMany
   */
  export type LubVehPesadoUpdateManyArgs = {
    /**
     * The data used to update LubVehPesados.
     * 
    **/
    data: XOR<LubVehPesadoUpdateManyMutationInput, LubVehPesadoUncheckedUpdateManyInput>
    /**
     * Filter which LubVehPesados to update
     * 
    **/
    where?: LubVehPesadoWhereInput
  }


  /**
   * LubVehPesado upsert
   */
  export type LubVehPesadoUpsertArgs = {
    /**
     * Select specific fields to fetch from the LubVehPesado
     * 
    **/
    select?: LubVehPesadoSelect | null
    /**
     * The filter to search for the LubVehPesado to update in case it exists.
     * 
    **/
    where: LubVehPesadoWhereUniqueInput
    /**
     * In case the LubVehPesado found by the `where` argument doesn't exist, create a new LubVehPesado with this data.
     * 
    **/
    create: XOR<LubVehPesadoCreateInput, LubVehPesadoUncheckedCreateInput>
    /**
     * In case the LubVehPesado was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LubVehPesadoUpdateInput, LubVehPesadoUncheckedUpdateInput>
  }


  /**
   * LubVehPesado delete
   */
  export type LubVehPesadoDeleteArgs = {
    /**
     * Select specific fields to fetch from the LubVehPesado
     * 
    **/
    select?: LubVehPesadoSelect | null
    /**
     * Filter which LubVehPesado to delete.
     * 
    **/
    where: LubVehPesadoWhereUniqueInput
  }


  /**
   * LubVehPesado deleteMany
   */
  export type LubVehPesadoDeleteManyArgs = {
    /**
     * Filter which LubVehPesados to delete
     * 
    **/
    where?: LubVehPesadoWhereInput
  }


  /**
   * LubVehPesado findRaw
   */
  export type LubVehPesadoFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * LubVehPesado aggregateRaw
   */
  export type LubVehPesadoAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * LubVehPesado: findUniqueOrThrow
   */
  export type LubVehPesadoFindUniqueOrThrowArgs = LubVehPesadoFindUniqueArgsBase
      

  /**
   * LubVehPesado: findFirstOrThrow
   */
  export type LubVehPesadoFindFirstOrThrowArgs = LubVehPesadoFindFirstArgsBase
      

  /**
   * LubVehPesado without action
   */
  export type LubVehPesadoArgs = {
    /**
     * Select specific fields to fetch from the LubVehPesado
     * 
    **/
    select?: LubVehPesadoSelect | null
  }



  /**
   * Model Filtros
   */


  export type AggregateFiltros = {
    _count: FiltrosCountAggregateOutputType | null
    _avg: FiltrosAvgAggregateOutputType | null
    _sum: FiltrosSumAggregateOutputType | null
    _min: FiltrosMinAggregateOutputType | null
    _max: FiltrosMaxAggregateOutputType | null
  }

  export type FiltrosAvgAggregateOutputType = {
    orden: number | null
  }

  export type FiltrosSumAggregateOutputType = {
    orden: number | null
  }

  export type FiltrosMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    linea: string | null
    imagen: string | null
    altura: string | null
    dia_ext: string | null
    dia_int: string | null
    estado: boolean | null
    orden: number | null
    rosca: string | null
    tipo: string | null
    val_anti_ret: string | null
    val_ali: string | null
    modelo: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type FiltrosMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    linea: string | null
    imagen: string | null
    altura: string | null
    dia_ext: string | null
    dia_int: string | null
    estado: boolean | null
    orden: number | null
    rosca: string | null
    tipo: string | null
    val_anti_ret: string | null
    val_ali: string | null
    modelo: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type FiltrosCountAggregateOutputType = {
    id: number
    nombre: number
    linea: number
    imagen: number
    altura: number
    dia_ext: number
    dia_int: number
    estado: number
    orden: number
    rosca: number
    tipo: number
    val_anti_ret: number
    val_ali: number
    modelo: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type FiltrosAvgAggregateInputType = {
    orden?: true
  }

  export type FiltrosSumAggregateInputType = {
    orden?: true
  }

  export type FiltrosMinAggregateInputType = {
    id?: true
    nombre?: true
    linea?: true
    imagen?: true
    altura?: true
    dia_ext?: true
    dia_int?: true
    estado?: true
    orden?: true
    rosca?: true
    tipo?: true
    val_anti_ret?: true
    val_ali?: true
    modelo?: true
    created_at?: true
    updated_at?: true
  }

  export type FiltrosMaxAggregateInputType = {
    id?: true
    nombre?: true
    linea?: true
    imagen?: true
    altura?: true
    dia_ext?: true
    dia_int?: true
    estado?: true
    orden?: true
    rosca?: true
    tipo?: true
    val_anti_ret?: true
    val_ali?: true
    modelo?: true
    created_at?: true
    updated_at?: true
  }

  export type FiltrosCountAggregateInputType = {
    id?: true
    nombre?: true
    linea?: true
    imagen?: true
    altura?: true
    dia_ext?: true
    dia_int?: true
    estado?: true
    orden?: true
    rosca?: true
    tipo?: true
    val_anti_ret?: true
    val_ali?: true
    modelo?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type FiltrosAggregateArgs = {
    /**
     * Filter which Filtros to aggregate.
     * 
    **/
    where?: FiltrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filtros to fetch.
     * 
    **/
    orderBy?: Enumerable<FiltrosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: FiltrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filtros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filtros.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Filtros
    **/
    _count?: true | FiltrosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FiltrosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FiltrosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FiltrosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FiltrosMaxAggregateInputType
  }

  export type GetFiltrosAggregateType<T extends FiltrosAggregateArgs> = {
        [P in keyof T & keyof AggregateFiltros]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiltros[P]>
      : GetScalarType<T[P], AggregateFiltros[P]>
  }




  export type FiltrosGroupByArgs = {
    where?: FiltrosWhereInput
    orderBy?: Enumerable<FiltrosOrderByWithAggregationInput>
    by: Array<FiltrosScalarFieldEnum>
    having?: FiltrosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FiltrosCountAggregateInputType | true
    _avg?: FiltrosAvgAggregateInputType
    _sum?: FiltrosSumAggregateInputType
    _min?: FiltrosMinAggregateInputType
    _max?: FiltrosMaxAggregateInputType
  }


  export type FiltrosGroupByOutputType = {
    id: string
    nombre: string
    linea: string
    imagen: string
    altura: string | null
    dia_ext: string | null
    dia_int: string | null
    estado: boolean
    orden: number
    rosca: string | null
    tipo: string
    val_anti_ret: string | null
    val_ali: string | null
    modelo: string | null
    created_at: Date
    updated_at: Date | null
    _count: FiltrosCountAggregateOutputType | null
    _avg: FiltrosAvgAggregateOutputType | null
    _sum: FiltrosSumAggregateOutputType | null
    _min: FiltrosMinAggregateOutputType | null
    _max: FiltrosMaxAggregateOutputType | null
  }

  type GetFiltrosGroupByPayload<T extends FiltrosGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FiltrosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FiltrosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FiltrosGroupByOutputType[P]>
            : GetScalarType<T[P], FiltrosGroupByOutputType[P]>
        }
      >
    >


  export type FiltrosSelect = {
    id?: boolean
    nombre?: boolean
    linea?: boolean
    imagen?: boolean
    altura?: boolean
    dia_ext?: boolean
    dia_int?: boolean
    estado?: boolean
    orden?: boolean
    rosca?: boolean
    tipo?: boolean
    val_anti_ret?: boolean
    val_ali?: boolean
    modelo?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type FiltrosGetPayload<
    S extends boolean | null | undefined | FiltrosArgs,
    U = keyof S
      > = S extends true
        ? Filtros
    : S extends undefined
    ? never
    : S extends FiltrosArgs | FiltrosFindManyArgs
    ?'include' extends U
    ? Filtros 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Filtros ? Filtros[P] : never
  } 
    : Filtros
  : Filtros


  type FiltrosCountArgs = Merge<
    Omit<FiltrosFindManyArgs, 'select' | 'include'> & {
      select?: FiltrosCountAggregateInputType | true
    }
  >

  export interface FiltrosDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Filtros that matches the filter.
     * @param {FiltrosFindUniqueArgs} args - Arguments to find a Filtros
     * @example
     * // Get one Filtros
     * const filtros = await prisma.filtros.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FiltrosFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, FiltrosFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Filtros'> extends True ? CheckSelect<T, Prisma__FiltrosClient<Filtros>, Prisma__FiltrosClient<FiltrosGetPayload<T>>> : CheckSelect<T, Prisma__FiltrosClient<Filtros | null, null>, Prisma__FiltrosClient<FiltrosGetPayload<T> | null, null>>

    /**
     * Find the first Filtros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiltrosFindFirstArgs} args - Arguments to find a Filtros
     * @example
     * // Get one Filtros
     * const filtros = await prisma.filtros.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FiltrosFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, FiltrosFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Filtros'> extends True ? CheckSelect<T, Prisma__FiltrosClient<Filtros>, Prisma__FiltrosClient<FiltrosGetPayload<T>>> : CheckSelect<T, Prisma__FiltrosClient<Filtros | null, null>, Prisma__FiltrosClient<FiltrosGetPayload<T> | null, null>>

    /**
     * Find zero or more Filtros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiltrosFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Filtros
     * const filtros = await prisma.filtros.findMany()
     * 
     * // Get first 10 Filtros
     * const filtros = await prisma.filtros.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const filtrosWithIdOnly = await prisma.filtros.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FiltrosFindManyArgs>(
      args?: SelectSubset<T, FiltrosFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Filtros>>, PrismaPromise<Array<FiltrosGetPayload<T>>>>

    /**
     * Create a Filtros.
     * @param {FiltrosCreateArgs} args - Arguments to create a Filtros.
     * @example
     * // Create one Filtros
     * const Filtros = await prisma.filtros.create({
     *   data: {
     *     // ... data to create a Filtros
     *   }
     * })
     * 
    **/
    create<T extends FiltrosCreateArgs>(
      args: SelectSubset<T, FiltrosCreateArgs>
    ): CheckSelect<T, Prisma__FiltrosClient<Filtros>, Prisma__FiltrosClient<FiltrosGetPayload<T>>>

    /**
     * Create many Filtros.
     *     @param {FiltrosCreateManyArgs} args - Arguments to create many Filtros.
     *     @example
     *     // Create many Filtros
     *     const filtros = await prisma.filtros.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FiltrosCreateManyArgs>(
      args?: SelectSubset<T, FiltrosCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Filtros.
     * @param {FiltrosDeleteArgs} args - Arguments to delete one Filtros.
     * @example
     * // Delete one Filtros
     * const Filtros = await prisma.filtros.delete({
     *   where: {
     *     // ... filter to delete one Filtros
     *   }
     * })
     * 
    **/
    delete<T extends FiltrosDeleteArgs>(
      args: SelectSubset<T, FiltrosDeleteArgs>
    ): CheckSelect<T, Prisma__FiltrosClient<Filtros>, Prisma__FiltrosClient<FiltrosGetPayload<T>>>

    /**
     * Update one Filtros.
     * @param {FiltrosUpdateArgs} args - Arguments to update one Filtros.
     * @example
     * // Update one Filtros
     * const filtros = await prisma.filtros.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FiltrosUpdateArgs>(
      args: SelectSubset<T, FiltrosUpdateArgs>
    ): CheckSelect<T, Prisma__FiltrosClient<Filtros>, Prisma__FiltrosClient<FiltrosGetPayload<T>>>

    /**
     * Delete zero or more Filtros.
     * @param {FiltrosDeleteManyArgs} args - Arguments to filter Filtros to delete.
     * @example
     * // Delete a few Filtros
     * const { count } = await prisma.filtros.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FiltrosDeleteManyArgs>(
      args?: SelectSubset<T, FiltrosDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Filtros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiltrosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Filtros
     * const filtros = await prisma.filtros.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FiltrosUpdateManyArgs>(
      args: SelectSubset<T, FiltrosUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Filtros.
     * @param {FiltrosUpsertArgs} args - Arguments to update or create a Filtros.
     * @example
     * // Update or create a Filtros
     * const filtros = await prisma.filtros.upsert({
     *   create: {
     *     // ... data to create a Filtros
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Filtros we want to update
     *   }
     * })
    **/
    upsert<T extends FiltrosUpsertArgs>(
      args: SelectSubset<T, FiltrosUpsertArgs>
    ): CheckSelect<T, Prisma__FiltrosClient<Filtros>, Prisma__FiltrosClient<FiltrosGetPayload<T>>>

    /**
     * Find zero or more Filtros that matches the filter.
     * @param {FiltrosFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const filtros = await prisma.filtros.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: FiltrosFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Filtros.
     * @param {FiltrosAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const filtros = await prisma.filtros.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: FiltrosAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Filtros that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {FiltrosFindUniqueOrThrowArgs} args - Arguments to find a Filtros
     * @example
     * // Get one Filtros
     * const filtros = await prisma.filtros.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FiltrosFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, FiltrosFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__FiltrosClient<Filtros>, Prisma__FiltrosClient<FiltrosGetPayload<T>>>

    /**
     * Find the first Filtros that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiltrosFindFirstOrThrowArgs} args - Arguments to find a Filtros
     * @example
     * // Get one Filtros
     * const filtros = await prisma.filtros.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FiltrosFindFirstOrThrowArgs>(
      args?: SelectSubset<T, FiltrosFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__FiltrosClient<Filtros>, Prisma__FiltrosClient<FiltrosGetPayload<T>>>

    /**
     * Count the number of Filtros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiltrosCountArgs} args - Arguments to filter Filtros to count.
     * @example
     * // Count the number of Filtros
     * const count = await prisma.filtros.count({
     *   where: {
     *     // ... the filter for the Filtros we want to count
     *   }
     * })
    **/
    count<T extends FiltrosCountArgs>(
      args?: Subset<T, FiltrosCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FiltrosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Filtros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiltrosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FiltrosAggregateArgs>(args: Subset<T, FiltrosAggregateArgs>): PrismaPromise<GetFiltrosAggregateType<T>>

    /**
     * Group by Filtros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiltrosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FiltrosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FiltrosGroupByArgs['orderBy'] }
        : { orderBy?: FiltrosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FiltrosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFiltrosGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Filtros.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__FiltrosClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Filtros base type for findUnique actions
   */
  export type FiltrosFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Filtros
     * 
    **/
    select?: FiltrosSelect | null
    /**
     * Filter, which Filtros to fetch.
     * 
    **/
    where: FiltrosWhereUniqueInput
  }

  /**
   * Filtros: findUnique
   */
  export interface FiltrosFindUniqueArgs extends FiltrosFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Filtros base type for findFirst actions
   */
  export type FiltrosFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Filtros
     * 
    **/
    select?: FiltrosSelect | null
    /**
     * Filter, which Filtros to fetch.
     * 
    **/
    where?: FiltrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filtros to fetch.
     * 
    **/
    orderBy?: Enumerable<FiltrosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Filtros.
     * 
    **/
    cursor?: FiltrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filtros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filtros.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Filtros.
     * 
    **/
    distinct?: Enumerable<FiltrosScalarFieldEnum>
  }

  /**
   * Filtros: findFirst
   */
  export interface FiltrosFindFirstArgs extends FiltrosFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Filtros findMany
   */
  export type FiltrosFindManyArgs = {
    /**
     * Select specific fields to fetch from the Filtros
     * 
    **/
    select?: FiltrosSelect | null
    /**
     * Filter, which Filtros to fetch.
     * 
    **/
    where?: FiltrosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Filtros to fetch.
     * 
    **/
    orderBy?: Enumerable<FiltrosOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Filtros.
     * 
    **/
    cursor?: FiltrosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Filtros from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Filtros.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FiltrosScalarFieldEnum>
  }


  /**
   * Filtros create
   */
  export type FiltrosCreateArgs = {
    /**
     * Select specific fields to fetch from the Filtros
     * 
    **/
    select?: FiltrosSelect | null
    /**
     * The data needed to create a Filtros.
     * 
    **/
    data: XOR<FiltrosCreateInput, FiltrosUncheckedCreateInput>
  }


  /**
   * Filtros createMany
   */
  export type FiltrosCreateManyArgs = {
    /**
     * The data used to create many Filtros.
     * 
    **/
    data: Enumerable<FiltrosCreateManyInput>
  }


  /**
   * Filtros update
   */
  export type FiltrosUpdateArgs = {
    /**
     * Select specific fields to fetch from the Filtros
     * 
    **/
    select?: FiltrosSelect | null
    /**
     * The data needed to update a Filtros.
     * 
    **/
    data: XOR<FiltrosUpdateInput, FiltrosUncheckedUpdateInput>
    /**
     * Choose, which Filtros to update.
     * 
    **/
    where: FiltrosWhereUniqueInput
  }


  /**
   * Filtros updateMany
   */
  export type FiltrosUpdateManyArgs = {
    /**
     * The data used to update Filtros.
     * 
    **/
    data: XOR<FiltrosUpdateManyMutationInput, FiltrosUncheckedUpdateManyInput>
    /**
     * Filter which Filtros to update
     * 
    **/
    where?: FiltrosWhereInput
  }


  /**
   * Filtros upsert
   */
  export type FiltrosUpsertArgs = {
    /**
     * Select specific fields to fetch from the Filtros
     * 
    **/
    select?: FiltrosSelect | null
    /**
     * The filter to search for the Filtros to update in case it exists.
     * 
    **/
    where: FiltrosWhereUniqueInput
    /**
     * In case the Filtros found by the `where` argument doesn't exist, create a new Filtros with this data.
     * 
    **/
    create: XOR<FiltrosCreateInput, FiltrosUncheckedCreateInput>
    /**
     * In case the Filtros was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<FiltrosUpdateInput, FiltrosUncheckedUpdateInput>
  }


  /**
   * Filtros delete
   */
  export type FiltrosDeleteArgs = {
    /**
     * Select specific fields to fetch from the Filtros
     * 
    **/
    select?: FiltrosSelect | null
    /**
     * Filter which Filtros to delete.
     * 
    **/
    where: FiltrosWhereUniqueInput
  }


  /**
   * Filtros deleteMany
   */
  export type FiltrosDeleteManyArgs = {
    /**
     * Filter which Filtros to delete
     * 
    **/
    where?: FiltrosWhereInput
  }


  /**
   * Filtros findRaw
   */
  export type FiltrosFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Filtros aggregateRaw
   */
  export type FiltrosAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Filtros: findUniqueOrThrow
   */
  export type FiltrosFindUniqueOrThrowArgs = FiltrosFindUniqueArgsBase
      

  /**
   * Filtros: findFirstOrThrow
   */
  export type FiltrosFindFirstOrThrowArgs = FiltrosFindFirstArgsBase
      

  /**
   * Filtros without action
   */
  export type FiltrosArgs = {
    /**
     * Select specific fields to fetch from the Filtros
     * 
    **/
    select?: FiltrosSelect | null
  }



  /**
   * Model Lubricantes
   */


  export type AggregateLubricantes = {
    _count: LubricantesCountAggregateOutputType | null
    _avg: LubricantesAvgAggregateOutputType | null
    _sum: LubricantesSumAggregateOutputType | null
    _min: LubricantesMinAggregateOutputType | null
    _max: LubricantesMaxAggregateOutputType | null
  }

  export type LubricantesAvgAggregateOutputType = {
    orden: number | null
  }

  export type LubricantesSumAggregateOutputType = {
    orden: number | null
  }

  export type LubricantesMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    imagen: string | null
    linea: string | null
    presentacion: string | null
    indicado_para: string | null
    especificacion: string | null
    rec_honda: boolean | null
    rec_exxon_mob: string | null
    atiende_excede: string | null
    aprobado: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LubricantesMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    imagen: string | null
    linea: string | null
    presentacion: string | null
    indicado_para: string | null
    especificacion: string | null
    rec_honda: boolean | null
    rec_exxon_mob: string | null
    atiende_excede: string | null
    aprobado: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type LubricantesCountAggregateOutputType = {
    id: number
    nombre: number
    descripcion: number
    imagen: number
    linea: number
    presentacion: number
    indicado_para: number
    especificacion: number
    rec_honda: number
    rec_exxon_mob: number
    caracteristicas: number
    atiende_excede: number
    aprobado: number
    estado: number
    orden: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type LubricantesAvgAggregateInputType = {
    orden?: true
  }

  export type LubricantesSumAggregateInputType = {
    orden?: true
  }

  export type LubricantesMinAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    linea?: true
    presentacion?: true
    indicado_para?: true
    especificacion?: true
    rec_honda?: true
    rec_exxon_mob?: true
    atiende_excede?: true
    aprobado?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type LubricantesMaxAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    linea?: true
    presentacion?: true
    indicado_para?: true
    especificacion?: true
    rec_honda?: true
    rec_exxon_mob?: true
    atiende_excede?: true
    aprobado?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type LubricantesCountAggregateInputType = {
    id?: true
    nombre?: true
    descripcion?: true
    imagen?: true
    linea?: true
    presentacion?: true
    indicado_para?: true
    especificacion?: true
    rec_honda?: true
    rec_exxon_mob?: true
    caracteristicas?: true
    atiende_excede?: true
    aprobado?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type LubricantesAggregateArgs = {
    /**
     * Filter which Lubricantes to aggregate.
     * 
    **/
    where?: LubricantesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lubricantes to fetch.
     * 
    **/
    orderBy?: Enumerable<LubricantesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LubricantesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lubricantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lubricantes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lubricantes
    **/
    _count?: true | LubricantesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LubricantesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LubricantesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LubricantesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LubricantesMaxAggregateInputType
  }

  export type GetLubricantesAggregateType<T extends LubricantesAggregateArgs> = {
        [P in keyof T & keyof AggregateLubricantes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLubricantes[P]>
      : GetScalarType<T[P], AggregateLubricantes[P]>
  }




  export type LubricantesGroupByArgs = {
    where?: LubricantesWhereInput
    orderBy?: Enumerable<LubricantesOrderByWithAggregationInput>
    by: Array<LubricantesScalarFieldEnum>
    having?: LubricantesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LubricantesCountAggregateInputType | true
    _avg?: LubricantesAvgAggregateInputType
    _sum?: LubricantesSumAggregateInputType
    _min?: LubricantesMinAggregateInputType
    _max?: LubricantesMaxAggregateInputType
  }


  export type LubricantesGroupByOutputType = {
    id: string
    nombre: string
    descripcion: string[]
    imagen: string
    linea: string
    presentacion: string | null
    indicado_para: string | null
    especificacion: string | null
    rec_honda: boolean
    rec_exxon_mob: string | null
    caracteristicas: string[]
    atiende_excede: string | null
    aprobado: string | null
    estado: boolean
    orden: number
    created_at: Date
    updated_at: Date | null
    _count: LubricantesCountAggregateOutputType | null
    _avg: LubricantesAvgAggregateOutputType | null
    _sum: LubricantesSumAggregateOutputType | null
    _min: LubricantesMinAggregateOutputType | null
    _max: LubricantesMaxAggregateOutputType | null
  }

  type GetLubricantesGroupByPayload<T extends LubricantesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LubricantesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LubricantesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LubricantesGroupByOutputType[P]>
            : GetScalarType<T[P], LubricantesGroupByOutputType[P]>
        }
      >
    >


  export type LubricantesSelect = {
    id?: boolean
    nombre?: boolean
    descripcion?: boolean
    imagen?: boolean
    linea?: boolean
    presentacion?: boolean
    indicado_para?: boolean
    especificacion?: boolean
    rec_honda?: boolean
    rec_exxon_mob?: boolean
    caracteristicas?: boolean
    atiende_excede?: boolean
    aprobado?: boolean
    estado?: boolean
    orden?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type LubricantesGetPayload<
    S extends boolean | null | undefined | LubricantesArgs,
    U = keyof S
      > = S extends true
        ? Lubricantes
    : S extends undefined
    ? never
    : S extends LubricantesArgs | LubricantesFindManyArgs
    ?'include' extends U
    ? Lubricantes 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Lubricantes ? Lubricantes[P] : never
  } 
    : Lubricantes
  : Lubricantes


  type LubricantesCountArgs = Merge<
    Omit<LubricantesFindManyArgs, 'select' | 'include'> & {
      select?: LubricantesCountAggregateInputType | true
    }
  >

  export interface LubricantesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Lubricantes that matches the filter.
     * @param {LubricantesFindUniqueArgs} args - Arguments to find a Lubricantes
     * @example
     * // Get one Lubricantes
     * const lubricantes = await prisma.lubricantes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LubricantesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LubricantesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Lubricantes'> extends True ? CheckSelect<T, Prisma__LubricantesClient<Lubricantes>, Prisma__LubricantesClient<LubricantesGetPayload<T>>> : CheckSelect<T, Prisma__LubricantesClient<Lubricantes | null, null>, Prisma__LubricantesClient<LubricantesGetPayload<T> | null, null>>

    /**
     * Find the first Lubricantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubricantesFindFirstArgs} args - Arguments to find a Lubricantes
     * @example
     * // Get one Lubricantes
     * const lubricantes = await prisma.lubricantes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LubricantesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LubricantesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Lubricantes'> extends True ? CheckSelect<T, Prisma__LubricantesClient<Lubricantes>, Prisma__LubricantesClient<LubricantesGetPayload<T>>> : CheckSelect<T, Prisma__LubricantesClient<Lubricantes | null, null>, Prisma__LubricantesClient<LubricantesGetPayload<T> | null, null>>

    /**
     * Find zero or more Lubricantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubricantesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lubricantes
     * const lubricantes = await prisma.lubricantes.findMany()
     * 
     * // Get first 10 Lubricantes
     * const lubricantes = await prisma.lubricantes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lubricantesWithIdOnly = await prisma.lubricantes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LubricantesFindManyArgs>(
      args?: SelectSubset<T, LubricantesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Lubricantes>>, PrismaPromise<Array<LubricantesGetPayload<T>>>>

    /**
     * Create a Lubricantes.
     * @param {LubricantesCreateArgs} args - Arguments to create a Lubricantes.
     * @example
     * // Create one Lubricantes
     * const Lubricantes = await prisma.lubricantes.create({
     *   data: {
     *     // ... data to create a Lubricantes
     *   }
     * })
     * 
    **/
    create<T extends LubricantesCreateArgs>(
      args: SelectSubset<T, LubricantesCreateArgs>
    ): CheckSelect<T, Prisma__LubricantesClient<Lubricantes>, Prisma__LubricantesClient<LubricantesGetPayload<T>>>

    /**
     * Create many Lubricantes.
     *     @param {LubricantesCreateManyArgs} args - Arguments to create many Lubricantes.
     *     @example
     *     // Create many Lubricantes
     *     const lubricantes = await prisma.lubricantes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LubricantesCreateManyArgs>(
      args?: SelectSubset<T, LubricantesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Lubricantes.
     * @param {LubricantesDeleteArgs} args - Arguments to delete one Lubricantes.
     * @example
     * // Delete one Lubricantes
     * const Lubricantes = await prisma.lubricantes.delete({
     *   where: {
     *     // ... filter to delete one Lubricantes
     *   }
     * })
     * 
    **/
    delete<T extends LubricantesDeleteArgs>(
      args: SelectSubset<T, LubricantesDeleteArgs>
    ): CheckSelect<T, Prisma__LubricantesClient<Lubricantes>, Prisma__LubricantesClient<LubricantesGetPayload<T>>>

    /**
     * Update one Lubricantes.
     * @param {LubricantesUpdateArgs} args - Arguments to update one Lubricantes.
     * @example
     * // Update one Lubricantes
     * const lubricantes = await prisma.lubricantes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LubricantesUpdateArgs>(
      args: SelectSubset<T, LubricantesUpdateArgs>
    ): CheckSelect<T, Prisma__LubricantesClient<Lubricantes>, Prisma__LubricantesClient<LubricantesGetPayload<T>>>

    /**
     * Delete zero or more Lubricantes.
     * @param {LubricantesDeleteManyArgs} args - Arguments to filter Lubricantes to delete.
     * @example
     * // Delete a few Lubricantes
     * const { count } = await prisma.lubricantes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LubricantesDeleteManyArgs>(
      args?: SelectSubset<T, LubricantesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lubricantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubricantesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lubricantes
     * const lubricantes = await prisma.lubricantes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LubricantesUpdateManyArgs>(
      args: SelectSubset<T, LubricantesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Lubricantes.
     * @param {LubricantesUpsertArgs} args - Arguments to update or create a Lubricantes.
     * @example
     * // Update or create a Lubricantes
     * const lubricantes = await prisma.lubricantes.upsert({
     *   create: {
     *     // ... data to create a Lubricantes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lubricantes we want to update
     *   }
     * })
    **/
    upsert<T extends LubricantesUpsertArgs>(
      args: SelectSubset<T, LubricantesUpsertArgs>
    ): CheckSelect<T, Prisma__LubricantesClient<Lubricantes>, Prisma__LubricantesClient<LubricantesGetPayload<T>>>

    /**
     * Find zero or more Lubricantes that matches the filter.
     * @param {LubricantesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const lubricantes = await prisma.lubricantes.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: LubricantesFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Lubricantes.
     * @param {LubricantesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const lubricantes = await prisma.lubricantes.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: LubricantesAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Lubricantes that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {LubricantesFindUniqueOrThrowArgs} args - Arguments to find a Lubricantes
     * @example
     * // Get one Lubricantes
     * const lubricantes = await prisma.lubricantes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LubricantesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, LubricantesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__LubricantesClient<Lubricantes>, Prisma__LubricantesClient<LubricantesGetPayload<T>>>

    /**
     * Find the first Lubricantes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubricantesFindFirstOrThrowArgs} args - Arguments to find a Lubricantes
     * @example
     * // Get one Lubricantes
     * const lubricantes = await prisma.lubricantes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LubricantesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, LubricantesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__LubricantesClient<Lubricantes>, Prisma__LubricantesClient<LubricantesGetPayload<T>>>

    /**
     * Count the number of Lubricantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubricantesCountArgs} args - Arguments to filter Lubricantes to count.
     * @example
     * // Count the number of Lubricantes
     * const count = await prisma.lubricantes.count({
     *   where: {
     *     // ... the filter for the Lubricantes we want to count
     *   }
     * })
    **/
    count<T extends LubricantesCountArgs>(
      args?: Subset<T, LubricantesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LubricantesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lubricantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubricantesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LubricantesAggregateArgs>(args: Subset<T, LubricantesAggregateArgs>): PrismaPromise<GetLubricantesAggregateType<T>>

    /**
     * Group by Lubricantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LubricantesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LubricantesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LubricantesGroupByArgs['orderBy'] }
        : { orderBy?: LubricantesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LubricantesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLubricantesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Lubricantes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LubricantesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Lubricantes base type for findUnique actions
   */
  export type LubricantesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Lubricantes
     * 
    **/
    select?: LubricantesSelect | null
    /**
     * Filter, which Lubricantes to fetch.
     * 
    **/
    where: LubricantesWhereUniqueInput
  }

  /**
   * Lubricantes: findUnique
   */
  export interface LubricantesFindUniqueArgs extends LubricantesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Lubricantes base type for findFirst actions
   */
  export type LubricantesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Lubricantes
     * 
    **/
    select?: LubricantesSelect | null
    /**
     * Filter, which Lubricantes to fetch.
     * 
    **/
    where?: LubricantesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lubricantes to fetch.
     * 
    **/
    orderBy?: Enumerable<LubricantesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lubricantes.
     * 
    **/
    cursor?: LubricantesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lubricantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lubricantes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lubricantes.
     * 
    **/
    distinct?: Enumerable<LubricantesScalarFieldEnum>
  }

  /**
   * Lubricantes: findFirst
   */
  export interface LubricantesFindFirstArgs extends LubricantesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Lubricantes findMany
   */
  export type LubricantesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Lubricantes
     * 
    **/
    select?: LubricantesSelect | null
    /**
     * Filter, which Lubricantes to fetch.
     * 
    **/
    where?: LubricantesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lubricantes to fetch.
     * 
    **/
    orderBy?: Enumerable<LubricantesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lubricantes.
     * 
    **/
    cursor?: LubricantesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lubricantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lubricantes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LubricantesScalarFieldEnum>
  }


  /**
   * Lubricantes create
   */
  export type LubricantesCreateArgs = {
    /**
     * Select specific fields to fetch from the Lubricantes
     * 
    **/
    select?: LubricantesSelect | null
    /**
     * The data needed to create a Lubricantes.
     * 
    **/
    data: XOR<LubricantesCreateInput, LubricantesUncheckedCreateInput>
  }


  /**
   * Lubricantes createMany
   */
  export type LubricantesCreateManyArgs = {
    /**
     * The data used to create many Lubricantes.
     * 
    **/
    data: Enumerable<LubricantesCreateManyInput>
  }


  /**
   * Lubricantes update
   */
  export type LubricantesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Lubricantes
     * 
    **/
    select?: LubricantesSelect | null
    /**
     * The data needed to update a Lubricantes.
     * 
    **/
    data: XOR<LubricantesUpdateInput, LubricantesUncheckedUpdateInput>
    /**
     * Choose, which Lubricantes to update.
     * 
    **/
    where: LubricantesWhereUniqueInput
  }


  /**
   * Lubricantes updateMany
   */
  export type LubricantesUpdateManyArgs = {
    /**
     * The data used to update Lubricantes.
     * 
    **/
    data: XOR<LubricantesUpdateManyMutationInput, LubricantesUncheckedUpdateManyInput>
    /**
     * Filter which Lubricantes to update
     * 
    **/
    where?: LubricantesWhereInput
  }


  /**
   * Lubricantes upsert
   */
  export type LubricantesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Lubricantes
     * 
    **/
    select?: LubricantesSelect | null
    /**
     * The filter to search for the Lubricantes to update in case it exists.
     * 
    **/
    where: LubricantesWhereUniqueInput
    /**
     * In case the Lubricantes found by the `where` argument doesn't exist, create a new Lubricantes with this data.
     * 
    **/
    create: XOR<LubricantesCreateInput, LubricantesUncheckedCreateInput>
    /**
     * In case the Lubricantes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LubricantesUpdateInput, LubricantesUncheckedUpdateInput>
  }


  /**
   * Lubricantes delete
   */
  export type LubricantesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Lubricantes
     * 
    **/
    select?: LubricantesSelect | null
    /**
     * Filter which Lubricantes to delete.
     * 
    **/
    where: LubricantesWhereUniqueInput
  }


  /**
   * Lubricantes deleteMany
   */
  export type LubricantesDeleteManyArgs = {
    /**
     * Filter which Lubricantes to delete
     * 
    **/
    where?: LubricantesWhereInput
  }


  /**
   * Lubricantes findRaw
   */
  export type LubricantesFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Lubricantes aggregateRaw
   */
  export type LubricantesAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Lubricantes: findUniqueOrThrow
   */
  export type LubricantesFindUniqueOrThrowArgs = LubricantesFindUniqueArgsBase
      

  /**
   * Lubricantes: findFirstOrThrow
   */
  export type LubricantesFindFirstOrThrowArgs = LubricantesFindFirstArgsBase
      

  /**
   * Lubricantes without action
   */
  export type LubricantesArgs = {
    /**
     * Select specific fields to fetch from the Lubricantes
     * 
    **/
    select?: LubricantesSelect | null
  }



  /**
   * Model Baterias
   */


  export type AggregateBaterias = {
    _count: BateriasCountAggregateOutputType | null
    _avg: BateriasAvgAggregateOutputType | null
    _sum: BateriasSumAggregateOutputType | null
    _min: BateriasMinAggregateOutputType | null
    _max: BateriasMaxAggregateOutputType | null
  }

  export type BateriasAvgAggregateOutputType = {
    orden: number | null
  }

  export type BateriasSumAggregateOutputType = {
    orden: number | null
  }

  export type BateriasMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    imagen: string | null
    categoria: string | null
    capacidad: string | null
    cca10: string | null
    polaridad: string | null
    largo: string | null
    ancho: string | null
    altura: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type BateriasMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    imagen: string | null
    categoria: string | null
    capacidad: string | null
    cca10: string | null
    polaridad: string | null
    largo: string | null
    ancho: string | null
    altura: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type BateriasCountAggregateOutputType = {
    id: number
    nombre: number
    imagen: number
    categoria: number
    capacidad: number
    cca10: number
    polaridad: number
    largo: number
    ancho: number
    altura: number
    estado: number
    orden: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type BateriasAvgAggregateInputType = {
    orden?: true
  }

  export type BateriasSumAggregateInputType = {
    orden?: true
  }

  export type BateriasMinAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    categoria?: true
    capacidad?: true
    cca10?: true
    polaridad?: true
    largo?: true
    ancho?: true
    altura?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type BateriasMaxAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    categoria?: true
    capacidad?: true
    cca10?: true
    polaridad?: true
    largo?: true
    ancho?: true
    altura?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type BateriasCountAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    categoria?: true
    capacidad?: true
    cca10?: true
    polaridad?: true
    largo?: true
    ancho?: true
    altura?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type BateriasAggregateArgs = {
    /**
     * Filter which Baterias to aggregate.
     * 
    **/
    where?: BateriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baterias to fetch.
     * 
    **/
    orderBy?: Enumerable<BateriasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: BateriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baterias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baterias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Baterias
    **/
    _count?: true | BateriasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BateriasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BateriasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BateriasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BateriasMaxAggregateInputType
  }

  export type GetBateriasAggregateType<T extends BateriasAggregateArgs> = {
        [P in keyof T & keyof AggregateBaterias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBaterias[P]>
      : GetScalarType<T[P], AggregateBaterias[P]>
  }




  export type BateriasGroupByArgs = {
    where?: BateriasWhereInput
    orderBy?: Enumerable<BateriasOrderByWithAggregationInput>
    by: Array<BateriasScalarFieldEnum>
    having?: BateriasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BateriasCountAggregateInputType | true
    _avg?: BateriasAvgAggregateInputType
    _sum?: BateriasSumAggregateInputType
    _min?: BateriasMinAggregateInputType
    _max?: BateriasMaxAggregateInputType
  }


  export type BateriasGroupByOutputType = {
    id: string
    nombre: string
    imagen: string
    categoria: string | null
    capacidad: string | null
    cca10: string | null
    polaridad: string | null
    largo: string | null
    ancho: string | null
    altura: string | null
    estado: boolean
    orden: number
    created_at: Date
    updated_at: Date | null
    _count: BateriasCountAggregateOutputType | null
    _avg: BateriasAvgAggregateOutputType | null
    _sum: BateriasSumAggregateOutputType | null
    _min: BateriasMinAggregateOutputType | null
    _max: BateriasMaxAggregateOutputType | null
  }

  type GetBateriasGroupByPayload<T extends BateriasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<BateriasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BateriasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BateriasGroupByOutputType[P]>
            : GetScalarType<T[P], BateriasGroupByOutputType[P]>
        }
      >
    >


  export type BateriasSelect = {
    id?: boolean
    nombre?: boolean
    imagen?: boolean
    categoria?: boolean
    capacidad?: boolean
    cca10?: boolean
    polaridad?: boolean
    largo?: boolean
    ancho?: boolean
    altura?: boolean
    estado?: boolean
    orden?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type BateriasGetPayload<
    S extends boolean | null | undefined | BateriasArgs,
    U = keyof S
      > = S extends true
        ? Baterias
    : S extends undefined
    ? never
    : S extends BateriasArgs | BateriasFindManyArgs
    ?'include' extends U
    ? Baterias 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Baterias ? Baterias[P] : never
  } 
    : Baterias
  : Baterias


  type BateriasCountArgs = Merge<
    Omit<BateriasFindManyArgs, 'select' | 'include'> & {
      select?: BateriasCountAggregateInputType | true
    }
  >

  export interface BateriasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Baterias that matches the filter.
     * @param {BateriasFindUniqueArgs} args - Arguments to find a Baterias
     * @example
     * // Get one Baterias
     * const baterias = await prisma.baterias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BateriasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BateriasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Baterias'> extends True ? CheckSelect<T, Prisma__BateriasClient<Baterias>, Prisma__BateriasClient<BateriasGetPayload<T>>> : CheckSelect<T, Prisma__BateriasClient<Baterias | null, null>, Prisma__BateriasClient<BateriasGetPayload<T> | null, null>>

    /**
     * Find the first Baterias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateriasFindFirstArgs} args - Arguments to find a Baterias
     * @example
     * // Get one Baterias
     * const baterias = await prisma.baterias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BateriasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BateriasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Baterias'> extends True ? CheckSelect<T, Prisma__BateriasClient<Baterias>, Prisma__BateriasClient<BateriasGetPayload<T>>> : CheckSelect<T, Prisma__BateriasClient<Baterias | null, null>, Prisma__BateriasClient<BateriasGetPayload<T> | null, null>>

    /**
     * Find zero or more Baterias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateriasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Baterias
     * const baterias = await prisma.baterias.findMany()
     * 
     * // Get first 10 Baterias
     * const baterias = await prisma.baterias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bateriasWithIdOnly = await prisma.baterias.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BateriasFindManyArgs>(
      args?: SelectSubset<T, BateriasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Baterias>>, PrismaPromise<Array<BateriasGetPayload<T>>>>

    /**
     * Create a Baterias.
     * @param {BateriasCreateArgs} args - Arguments to create a Baterias.
     * @example
     * // Create one Baterias
     * const Baterias = await prisma.baterias.create({
     *   data: {
     *     // ... data to create a Baterias
     *   }
     * })
     * 
    **/
    create<T extends BateriasCreateArgs>(
      args: SelectSubset<T, BateriasCreateArgs>
    ): CheckSelect<T, Prisma__BateriasClient<Baterias>, Prisma__BateriasClient<BateriasGetPayload<T>>>

    /**
     * Create many Baterias.
     *     @param {BateriasCreateManyArgs} args - Arguments to create many Baterias.
     *     @example
     *     // Create many Baterias
     *     const baterias = await prisma.baterias.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BateriasCreateManyArgs>(
      args?: SelectSubset<T, BateriasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Baterias.
     * @param {BateriasDeleteArgs} args - Arguments to delete one Baterias.
     * @example
     * // Delete one Baterias
     * const Baterias = await prisma.baterias.delete({
     *   where: {
     *     // ... filter to delete one Baterias
     *   }
     * })
     * 
    **/
    delete<T extends BateriasDeleteArgs>(
      args: SelectSubset<T, BateriasDeleteArgs>
    ): CheckSelect<T, Prisma__BateriasClient<Baterias>, Prisma__BateriasClient<BateriasGetPayload<T>>>

    /**
     * Update one Baterias.
     * @param {BateriasUpdateArgs} args - Arguments to update one Baterias.
     * @example
     * // Update one Baterias
     * const baterias = await prisma.baterias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BateriasUpdateArgs>(
      args: SelectSubset<T, BateriasUpdateArgs>
    ): CheckSelect<T, Prisma__BateriasClient<Baterias>, Prisma__BateriasClient<BateriasGetPayload<T>>>

    /**
     * Delete zero or more Baterias.
     * @param {BateriasDeleteManyArgs} args - Arguments to filter Baterias to delete.
     * @example
     * // Delete a few Baterias
     * const { count } = await prisma.baterias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BateriasDeleteManyArgs>(
      args?: SelectSubset<T, BateriasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Baterias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateriasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Baterias
     * const baterias = await prisma.baterias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BateriasUpdateManyArgs>(
      args: SelectSubset<T, BateriasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Baterias.
     * @param {BateriasUpsertArgs} args - Arguments to update or create a Baterias.
     * @example
     * // Update or create a Baterias
     * const baterias = await prisma.baterias.upsert({
     *   create: {
     *     // ... data to create a Baterias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Baterias we want to update
     *   }
     * })
    **/
    upsert<T extends BateriasUpsertArgs>(
      args: SelectSubset<T, BateriasUpsertArgs>
    ): CheckSelect<T, Prisma__BateriasClient<Baterias>, Prisma__BateriasClient<BateriasGetPayload<T>>>

    /**
     * Find zero or more Baterias that matches the filter.
     * @param {BateriasFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const baterias = await prisma.baterias.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: BateriasFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Baterias.
     * @param {BateriasAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const baterias = await prisma.baterias.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: BateriasAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Baterias that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {BateriasFindUniqueOrThrowArgs} args - Arguments to find a Baterias
     * @example
     * // Get one Baterias
     * const baterias = await prisma.baterias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BateriasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, BateriasFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__BateriasClient<Baterias>, Prisma__BateriasClient<BateriasGetPayload<T>>>

    /**
     * Find the first Baterias that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateriasFindFirstOrThrowArgs} args - Arguments to find a Baterias
     * @example
     * // Get one Baterias
     * const baterias = await prisma.baterias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BateriasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, BateriasFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__BateriasClient<Baterias>, Prisma__BateriasClient<BateriasGetPayload<T>>>

    /**
     * Count the number of Baterias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateriasCountArgs} args - Arguments to filter Baterias to count.
     * @example
     * // Count the number of Baterias
     * const count = await prisma.baterias.count({
     *   where: {
     *     // ... the filter for the Baterias we want to count
     *   }
     * })
    **/
    count<T extends BateriasCountArgs>(
      args?: Subset<T, BateriasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BateriasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Baterias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateriasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BateriasAggregateArgs>(args: Subset<T, BateriasAggregateArgs>): PrismaPromise<GetBateriasAggregateType<T>>

    /**
     * Group by Baterias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BateriasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BateriasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BateriasGroupByArgs['orderBy'] }
        : { orderBy?: BateriasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BateriasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBateriasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Baterias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BateriasClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Baterias base type for findUnique actions
   */
  export type BateriasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Baterias
     * 
    **/
    select?: BateriasSelect | null
    /**
     * Filter, which Baterias to fetch.
     * 
    **/
    where: BateriasWhereUniqueInput
  }

  /**
   * Baterias: findUnique
   */
  export interface BateriasFindUniqueArgs extends BateriasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Baterias base type for findFirst actions
   */
  export type BateriasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Baterias
     * 
    **/
    select?: BateriasSelect | null
    /**
     * Filter, which Baterias to fetch.
     * 
    **/
    where?: BateriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baterias to fetch.
     * 
    **/
    orderBy?: Enumerable<BateriasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Baterias.
     * 
    **/
    cursor?: BateriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baterias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baterias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Baterias.
     * 
    **/
    distinct?: Enumerable<BateriasScalarFieldEnum>
  }

  /**
   * Baterias: findFirst
   */
  export interface BateriasFindFirstArgs extends BateriasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Baterias findMany
   */
  export type BateriasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Baterias
     * 
    **/
    select?: BateriasSelect | null
    /**
     * Filter, which Baterias to fetch.
     * 
    **/
    where?: BateriasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Baterias to fetch.
     * 
    **/
    orderBy?: Enumerable<BateriasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Baterias.
     * 
    **/
    cursor?: BateriasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Baterias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Baterias.
     * 
    **/
    skip?: number
    distinct?: Enumerable<BateriasScalarFieldEnum>
  }


  /**
   * Baterias create
   */
  export type BateriasCreateArgs = {
    /**
     * Select specific fields to fetch from the Baterias
     * 
    **/
    select?: BateriasSelect | null
    /**
     * The data needed to create a Baterias.
     * 
    **/
    data: XOR<BateriasCreateInput, BateriasUncheckedCreateInput>
  }


  /**
   * Baterias createMany
   */
  export type BateriasCreateManyArgs = {
    /**
     * The data used to create many Baterias.
     * 
    **/
    data: Enumerable<BateriasCreateManyInput>
  }


  /**
   * Baterias update
   */
  export type BateriasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Baterias
     * 
    **/
    select?: BateriasSelect | null
    /**
     * The data needed to update a Baterias.
     * 
    **/
    data: XOR<BateriasUpdateInput, BateriasUncheckedUpdateInput>
    /**
     * Choose, which Baterias to update.
     * 
    **/
    where: BateriasWhereUniqueInput
  }


  /**
   * Baterias updateMany
   */
  export type BateriasUpdateManyArgs = {
    /**
     * The data used to update Baterias.
     * 
    **/
    data: XOR<BateriasUpdateManyMutationInput, BateriasUncheckedUpdateManyInput>
    /**
     * Filter which Baterias to update
     * 
    **/
    where?: BateriasWhereInput
  }


  /**
   * Baterias upsert
   */
  export type BateriasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Baterias
     * 
    **/
    select?: BateriasSelect | null
    /**
     * The filter to search for the Baterias to update in case it exists.
     * 
    **/
    where: BateriasWhereUniqueInput
    /**
     * In case the Baterias found by the `where` argument doesn't exist, create a new Baterias with this data.
     * 
    **/
    create: XOR<BateriasCreateInput, BateriasUncheckedCreateInput>
    /**
     * In case the Baterias was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<BateriasUpdateInput, BateriasUncheckedUpdateInput>
  }


  /**
   * Baterias delete
   */
  export type BateriasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Baterias
     * 
    **/
    select?: BateriasSelect | null
    /**
     * Filter which Baterias to delete.
     * 
    **/
    where: BateriasWhereUniqueInput
  }


  /**
   * Baterias deleteMany
   */
  export type BateriasDeleteManyArgs = {
    /**
     * Filter which Baterias to delete
     * 
    **/
    where?: BateriasWhereInput
  }


  /**
   * Baterias findRaw
   */
  export type BateriasFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Baterias aggregateRaw
   */
  export type BateriasAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Baterias: findUniqueOrThrow
   */
  export type BateriasFindUniqueOrThrowArgs = BateriasFindUniqueArgsBase
      

  /**
   * Baterias: findFirstOrThrow
   */
  export type BateriasFindFirstOrThrowArgs = BateriasFindFirstArgsBase
      

  /**
   * Baterias without action
   */
  export type BateriasArgs = {
    /**
     * Select specific fields to fetch from the Baterias
     * 
    **/
    select?: BateriasSelect | null
  }



  /**
   * Model Vacancias
   */


  export type AggregateVacancias = {
    _count: VacanciasCountAggregateOutputType | null
    _avg: VacanciasAvgAggregateOutputType | null
    _sum: VacanciasSumAggregateOutputType | null
    _min: VacanciasMinAggregateOutputType | null
    _max: VacanciasMaxAggregateOutputType | null
  }

  export type VacanciasAvgAggregateOutputType = {
    orden: number | null
  }

  export type VacanciasSumAggregateOutputType = {
    orden: number | null
  }

  export type VacanciasMinAggregateOutputType = {
    id: string | null
    titulo: string | null
    imagen: string | null
    vigencia: string | null
    area: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type VacanciasMaxAggregateOutputType = {
    id: string | null
    titulo: string | null
    imagen: string | null
    vigencia: string | null
    area: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type VacanciasCountAggregateOutputType = {
    id: number
    titulo: number
    imagen: number
    preguntas: number
    requisitos: number
    vigencia: number
    area: number
    estado: number
    orden: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type VacanciasAvgAggregateInputType = {
    orden?: true
  }

  export type VacanciasSumAggregateInputType = {
    orden?: true
  }

  export type VacanciasMinAggregateInputType = {
    id?: true
    titulo?: true
    imagen?: true
    vigencia?: true
    area?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type VacanciasMaxAggregateInputType = {
    id?: true
    titulo?: true
    imagen?: true
    vigencia?: true
    area?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type VacanciasCountAggregateInputType = {
    id?: true
    titulo?: true
    imagen?: true
    preguntas?: true
    requisitos?: true
    vigencia?: true
    area?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type VacanciasAggregateArgs = {
    /**
     * Filter which Vacancias to aggregate.
     * 
    **/
    where?: VacanciasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacancias to fetch.
     * 
    **/
    orderBy?: Enumerable<VacanciasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VacanciasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacancias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacancias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vacancias
    **/
    _count?: true | VacanciasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VacanciasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VacanciasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VacanciasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VacanciasMaxAggregateInputType
  }

  export type GetVacanciasAggregateType<T extends VacanciasAggregateArgs> = {
        [P in keyof T & keyof AggregateVacancias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVacancias[P]>
      : GetScalarType<T[P], AggregateVacancias[P]>
  }




  export type VacanciasGroupByArgs = {
    where?: VacanciasWhereInput
    orderBy?: Enumerable<VacanciasOrderByWithAggregationInput>
    by: Array<VacanciasScalarFieldEnum>
    having?: VacanciasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VacanciasCountAggregateInputType | true
    _avg?: VacanciasAvgAggregateInputType
    _sum?: VacanciasSumAggregateInputType
    _min?: VacanciasMinAggregateInputType
    _max?: VacanciasMaxAggregateInputType
  }


  export type VacanciasGroupByOutputType = {
    id: string
    titulo: string
    imagen: string
    preguntas: string[]
    requisitos: string[]
    vigencia: string
    area: string
    estado: boolean
    orden: number
    created_at: Date
    updated_at: Date | null
    _count: VacanciasCountAggregateOutputType | null
    _avg: VacanciasAvgAggregateOutputType | null
    _sum: VacanciasSumAggregateOutputType | null
    _min: VacanciasMinAggregateOutputType | null
    _max: VacanciasMaxAggregateOutputType | null
  }

  type GetVacanciasGroupByPayload<T extends VacanciasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VacanciasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VacanciasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VacanciasGroupByOutputType[P]>
            : GetScalarType<T[P], VacanciasGroupByOutputType[P]>
        }
      >
    >


  export type VacanciasSelect = {
    id?: boolean
    titulo?: boolean
    imagen?: boolean
    preguntas?: boolean
    requisitos?: boolean
    vigencia?: boolean
    area?: boolean
    estado?: boolean
    orden?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type VacanciasGetPayload<
    S extends boolean | null | undefined | VacanciasArgs,
    U = keyof S
      > = S extends true
        ? Vacancias
    : S extends undefined
    ? never
    : S extends VacanciasArgs | VacanciasFindManyArgs
    ?'include' extends U
    ? Vacancias 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Vacancias ? Vacancias[P] : never
  } 
    : Vacancias
  : Vacancias


  type VacanciasCountArgs = Merge<
    Omit<VacanciasFindManyArgs, 'select' | 'include'> & {
      select?: VacanciasCountAggregateInputType | true
    }
  >

  export interface VacanciasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Vacancias that matches the filter.
     * @param {VacanciasFindUniqueArgs} args - Arguments to find a Vacancias
     * @example
     * // Get one Vacancias
     * const vacancias = await prisma.vacancias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VacanciasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VacanciasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Vacancias'> extends True ? CheckSelect<T, Prisma__VacanciasClient<Vacancias>, Prisma__VacanciasClient<VacanciasGetPayload<T>>> : CheckSelect<T, Prisma__VacanciasClient<Vacancias | null, null>, Prisma__VacanciasClient<VacanciasGetPayload<T> | null, null>>

    /**
     * Find the first Vacancias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacanciasFindFirstArgs} args - Arguments to find a Vacancias
     * @example
     * // Get one Vacancias
     * const vacancias = await prisma.vacancias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VacanciasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VacanciasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Vacancias'> extends True ? CheckSelect<T, Prisma__VacanciasClient<Vacancias>, Prisma__VacanciasClient<VacanciasGetPayload<T>>> : CheckSelect<T, Prisma__VacanciasClient<Vacancias | null, null>, Prisma__VacanciasClient<VacanciasGetPayload<T> | null, null>>

    /**
     * Find zero or more Vacancias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacanciasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vacancias
     * const vacancias = await prisma.vacancias.findMany()
     * 
     * // Get first 10 Vacancias
     * const vacancias = await prisma.vacancias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const vacanciasWithIdOnly = await prisma.vacancias.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VacanciasFindManyArgs>(
      args?: SelectSubset<T, VacanciasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Vacancias>>, PrismaPromise<Array<VacanciasGetPayload<T>>>>

    /**
     * Create a Vacancias.
     * @param {VacanciasCreateArgs} args - Arguments to create a Vacancias.
     * @example
     * // Create one Vacancias
     * const Vacancias = await prisma.vacancias.create({
     *   data: {
     *     // ... data to create a Vacancias
     *   }
     * })
     * 
    **/
    create<T extends VacanciasCreateArgs>(
      args: SelectSubset<T, VacanciasCreateArgs>
    ): CheckSelect<T, Prisma__VacanciasClient<Vacancias>, Prisma__VacanciasClient<VacanciasGetPayload<T>>>

    /**
     * Create many Vacancias.
     *     @param {VacanciasCreateManyArgs} args - Arguments to create many Vacancias.
     *     @example
     *     // Create many Vacancias
     *     const vacancias = await prisma.vacancias.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VacanciasCreateManyArgs>(
      args?: SelectSubset<T, VacanciasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Vacancias.
     * @param {VacanciasDeleteArgs} args - Arguments to delete one Vacancias.
     * @example
     * // Delete one Vacancias
     * const Vacancias = await prisma.vacancias.delete({
     *   where: {
     *     // ... filter to delete one Vacancias
     *   }
     * })
     * 
    **/
    delete<T extends VacanciasDeleteArgs>(
      args: SelectSubset<T, VacanciasDeleteArgs>
    ): CheckSelect<T, Prisma__VacanciasClient<Vacancias>, Prisma__VacanciasClient<VacanciasGetPayload<T>>>

    /**
     * Update one Vacancias.
     * @param {VacanciasUpdateArgs} args - Arguments to update one Vacancias.
     * @example
     * // Update one Vacancias
     * const vacancias = await prisma.vacancias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VacanciasUpdateArgs>(
      args: SelectSubset<T, VacanciasUpdateArgs>
    ): CheckSelect<T, Prisma__VacanciasClient<Vacancias>, Prisma__VacanciasClient<VacanciasGetPayload<T>>>

    /**
     * Delete zero or more Vacancias.
     * @param {VacanciasDeleteManyArgs} args - Arguments to filter Vacancias to delete.
     * @example
     * // Delete a few Vacancias
     * const { count } = await prisma.vacancias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VacanciasDeleteManyArgs>(
      args?: SelectSubset<T, VacanciasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vacancias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacanciasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vacancias
     * const vacancias = await prisma.vacancias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VacanciasUpdateManyArgs>(
      args: SelectSubset<T, VacanciasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Vacancias.
     * @param {VacanciasUpsertArgs} args - Arguments to update or create a Vacancias.
     * @example
     * // Update or create a Vacancias
     * const vacancias = await prisma.vacancias.upsert({
     *   create: {
     *     // ... data to create a Vacancias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Vacancias we want to update
     *   }
     * })
    **/
    upsert<T extends VacanciasUpsertArgs>(
      args: SelectSubset<T, VacanciasUpsertArgs>
    ): CheckSelect<T, Prisma__VacanciasClient<Vacancias>, Prisma__VacanciasClient<VacanciasGetPayload<T>>>

    /**
     * Find zero or more Vacancias that matches the filter.
     * @param {VacanciasFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const vacancias = await prisma.vacancias.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: VacanciasFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Vacancias.
     * @param {VacanciasAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const vacancias = await prisma.vacancias.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: VacanciasAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Vacancias that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VacanciasFindUniqueOrThrowArgs} args - Arguments to find a Vacancias
     * @example
     * // Get one Vacancias
     * const vacancias = await prisma.vacancias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VacanciasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VacanciasFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VacanciasClient<Vacancias>, Prisma__VacanciasClient<VacanciasGetPayload<T>>>

    /**
     * Find the first Vacancias that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacanciasFindFirstOrThrowArgs} args - Arguments to find a Vacancias
     * @example
     * // Get one Vacancias
     * const vacancias = await prisma.vacancias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VacanciasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VacanciasFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VacanciasClient<Vacancias>, Prisma__VacanciasClient<VacanciasGetPayload<T>>>

    /**
     * Count the number of Vacancias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacanciasCountArgs} args - Arguments to filter Vacancias to count.
     * @example
     * // Count the number of Vacancias
     * const count = await prisma.vacancias.count({
     *   where: {
     *     // ... the filter for the Vacancias we want to count
     *   }
     * })
    **/
    count<T extends VacanciasCountArgs>(
      args?: Subset<T, VacanciasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VacanciasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Vacancias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacanciasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VacanciasAggregateArgs>(args: Subset<T, VacanciasAggregateArgs>): PrismaPromise<GetVacanciasAggregateType<T>>

    /**
     * Group by Vacancias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VacanciasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VacanciasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VacanciasGroupByArgs['orderBy'] }
        : { orderBy?: VacanciasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VacanciasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVacanciasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Vacancias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VacanciasClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Vacancias base type for findUnique actions
   */
  export type VacanciasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Vacancias
     * 
    **/
    select?: VacanciasSelect | null
    /**
     * Filter, which Vacancias to fetch.
     * 
    **/
    where: VacanciasWhereUniqueInput
  }

  /**
   * Vacancias: findUnique
   */
  export interface VacanciasFindUniqueArgs extends VacanciasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vacancias base type for findFirst actions
   */
  export type VacanciasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Vacancias
     * 
    **/
    select?: VacanciasSelect | null
    /**
     * Filter, which Vacancias to fetch.
     * 
    **/
    where?: VacanciasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacancias to fetch.
     * 
    **/
    orderBy?: Enumerable<VacanciasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vacancias.
     * 
    **/
    cursor?: VacanciasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacancias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacancias.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vacancias.
     * 
    **/
    distinct?: Enumerable<VacanciasScalarFieldEnum>
  }

  /**
   * Vacancias: findFirst
   */
  export interface VacanciasFindFirstArgs extends VacanciasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Vacancias findMany
   */
  export type VacanciasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Vacancias
     * 
    **/
    select?: VacanciasSelect | null
    /**
     * Filter, which Vacancias to fetch.
     * 
    **/
    where?: VacanciasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vacancias to fetch.
     * 
    **/
    orderBy?: Enumerable<VacanciasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vacancias.
     * 
    **/
    cursor?: VacanciasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vacancias from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vacancias.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VacanciasScalarFieldEnum>
  }


  /**
   * Vacancias create
   */
  export type VacanciasCreateArgs = {
    /**
     * Select specific fields to fetch from the Vacancias
     * 
    **/
    select?: VacanciasSelect | null
    /**
     * The data needed to create a Vacancias.
     * 
    **/
    data: XOR<VacanciasCreateInput, VacanciasUncheckedCreateInput>
  }


  /**
   * Vacancias createMany
   */
  export type VacanciasCreateManyArgs = {
    /**
     * The data used to create many Vacancias.
     * 
    **/
    data: Enumerable<VacanciasCreateManyInput>
  }


  /**
   * Vacancias update
   */
  export type VacanciasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Vacancias
     * 
    **/
    select?: VacanciasSelect | null
    /**
     * The data needed to update a Vacancias.
     * 
    **/
    data: XOR<VacanciasUpdateInput, VacanciasUncheckedUpdateInput>
    /**
     * Choose, which Vacancias to update.
     * 
    **/
    where: VacanciasWhereUniqueInput
  }


  /**
   * Vacancias updateMany
   */
  export type VacanciasUpdateManyArgs = {
    /**
     * The data used to update Vacancias.
     * 
    **/
    data: XOR<VacanciasUpdateManyMutationInput, VacanciasUncheckedUpdateManyInput>
    /**
     * Filter which Vacancias to update
     * 
    **/
    where?: VacanciasWhereInput
  }


  /**
   * Vacancias upsert
   */
  export type VacanciasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Vacancias
     * 
    **/
    select?: VacanciasSelect | null
    /**
     * The filter to search for the Vacancias to update in case it exists.
     * 
    **/
    where: VacanciasWhereUniqueInput
    /**
     * In case the Vacancias found by the `where` argument doesn't exist, create a new Vacancias with this data.
     * 
    **/
    create: XOR<VacanciasCreateInput, VacanciasUncheckedCreateInput>
    /**
     * In case the Vacancias was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VacanciasUpdateInput, VacanciasUncheckedUpdateInput>
  }


  /**
   * Vacancias delete
   */
  export type VacanciasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Vacancias
     * 
    **/
    select?: VacanciasSelect | null
    /**
     * Filter which Vacancias to delete.
     * 
    **/
    where: VacanciasWhereUniqueInput
  }


  /**
   * Vacancias deleteMany
   */
  export type VacanciasDeleteManyArgs = {
    /**
     * Filter which Vacancias to delete
     * 
    **/
    where?: VacanciasWhereInput
  }


  /**
   * Vacancias findRaw
   */
  export type VacanciasFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Vacancias aggregateRaw
   */
  export type VacanciasAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Vacancias: findUniqueOrThrow
   */
  export type VacanciasFindUniqueOrThrowArgs = VacanciasFindUniqueArgsBase
      

  /**
   * Vacancias: findFirstOrThrow
   */
  export type VacanciasFindFirstOrThrowArgs = VacanciasFindFirstArgsBase
      

  /**
   * Vacancias without action
   */
  export type VacanciasArgs = {
    /**
     * Select specific fields to fetch from the Vacancias
     * 
    **/
    select?: VacanciasSelect | null
  }



  /**
   * Model Marcas
   */


  export type AggregateMarcas = {
    _count: MarcasCountAggregateOutputType | null
    _avg: MarcasAvgAggregateOutputType | null
    _sum: MarcasSumAggregateOutputType | null
    _min: MarcasMinAggregateOutputType | null
    _max: MarcasMaxAggregateOutputType | null
  }

  export type MarcasAvgAggregateOutputType = {
    orden: number | null
  }

  export type MarcasSumAggregateOutputType = {
    orden: number | null
  }

  export type MarcasMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    link: string | null
    imagen: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MarcasMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    link: string | null
    imagen: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type MarcasCountAggregateOutputType = {
    id: number
    nombre: number
    link: number
    imagen: number
    estado: number
    orden: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type MarcasAvgAggregateInputType = {
    orden?: true
  }

  export type MarcasSumAggregateInputType = {
    orden?: true
  }

  export type MarcasMinAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type MarcasMaxAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type MarcasCountAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type MarcasAggregateArgs = {
    /**
     * Filter which Marcas to aggregate.
     * 
    **/
    where?: MarcasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     * 
    **/
    orderBy?: Enumerable<MarcasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: MarcasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Marcas
    **/
    _count?: true | MarcasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarcasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarcasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarcasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarcasMaxAggregateInputType
  }

  export type GetMarcasAggregateType<T extends MarcasAggregateArgs> = {
        [P in keyof T & keyof AggregateMarcas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarcas[P]>
      : GetScalarType<T[P], AggregateMarcas[P]>
  }




  export type MarcasGroupByArgs = {
    where?: MarcasWhereInput
    orderBy?: Enumerable<MarcasOrderByWithAggregationInput>
    by: Array<MarcasScalarFieldEnum>
    having?: MarcasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarcasCountAggregateInputType | true
    _avg?: MarcasAvgAggregateInputType
    _sum?: MarcasSumAggregateInputType
    _min?: MarcasMinAggregateInputType
    _max?: MarcasMaxAggregateInputType
  }


  export type MarcasGroupByOutputType = {
    id: string
    nombre: string
    link: string
    imagen: string
    estado: boolean
    orden: number
    created_at: Date
    updated_at: Date | null
    _count: MarcasCountAggregateOutputType | null
    _avg: MarcasAvgAggregateOutputType | null
    _sum: MarcasSumAggregateOutputType | null
    _min: MarcasMinAggregateOutputType | null
    _max: MarcasMaxAggregateOutputType | null
  }

  type GetMarcasGroupByPayload<T extends MarcasGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MarcasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarcasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarcasGroupByOutputType[P]>
            : GetScalarType<T[P], MarcasGroupByOutputType[P]>
        }
      >
    >


  export type MarcasSelect = {
    id?: boolean
    nombre?: boolean
    link?: boolean
    imagen?: boolean
    estado?: boolean
    orden?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type MarcasGetPayload<
    S extends boolean | null | undefined | MarcasArgs,
    U = keyof S
      > = S extends true
        ? Marcas
    : S extends undefined
    ? never
    : S extends MarcasArgs | MarcasFindManyArgs
    ?'include' extends U
    ? Marcas 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Marcas ? Marcas[P] : never
  } 
    : Marcas
  : Marcas


  type MarcasCountArgs = Merge<
    Omit<MarcasFindManyArgs, 'select' | 'include'> & {
      select?: MarcasCountAggregateInputType | true
    }
  >

  export interface MarcasDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Marcas that matches the filter.
     * @param {MarcasFindUniqueArgs} args - Arguments to find a Marcas
     * @example
     * // Get one Marcas
     * const marcas = await prisma.marcas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MarcasFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, MarcasFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Marcas'> extends True ? CheckSelect<T, Prisma__MarcasClient<Marcas>, Prisma__MarcasClient<MarcasGetPayload<T>>> : CheckSelect<T, Prisma__MarcasClient<Marcas | null, null>, Prisma__MarcasClient<MarcasGetPayload<T> | null, null>>

    /**
     * Find the first Marcas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcasFindFirstArgs} args - Arguments to find a Marcas
     * @example
     * // Get one Marcas
     * const marcas = await prisma.marcas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MarcasFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, MarcasFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Marcas'> extends True ? CheckSelect<T, Prisma__MarcasClient<Marcas>, Prisma__MarcasClient<MarcasGetPayload<T>>> : CheckSelect<T, Prisma__MarcasClient<Marcas | null, null>, Prisma__MarcasClient<MarcasGetPayload<T> | null, null>>

    /**
     * Find zero or more Marcas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcasFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Marcas
     * const marcas = await prisma.marcas.findMany()
     * 
     * // Get first 10 Marcas
     * const marcas = await prisma.marcas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marcasWithIdOnly = await prisma.marcas.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MarcasFindManyArgs>(
      args?: SelectSubset<T, MarcasFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Marcas>>, PrismaPromise<Array<MarcasGetPayload<T>>>>

    /**
     * Create a Marcas.
     * @param {MarcasCreateArgs} args - Arguments to create a Marcas.
     * @example
     * // Create one Marcas
     * const Marcas = await prisma.marcas.create({
     *   data: {
     *     // ... data to create a Marcas
     *   }
     * })
     * 
    **/
    create<T extends MarcasCreateArgs>(
      args: SelectSubset<T, MarcasCreateArgs>
    ): CheckSelect<T, Prisma__MarcasClient<Marcas>, Prisma__MarcasClient<MarcasGetPayload<T>>>

    /**
     * Create many Marcas.
     *     @param {MarcasCreateManyArgs} args - Arguments to create many Marcas.
     *     @example
     *     // Create many Marcas
     *     const marcas = await prisma.marcas.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MarcasCreateManyArgs>(
      args?: SelectSubset<T, MarcasCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Marcas.
     * @param {MarcasDeleteArgs} args - Arguments to delete one Marcas.
     * @example
     * // Delete one Marcas
     * const Marcas = await prisma.marcas.delete({
     *   where: {
     *     // ... filter to delete one Marcas
     *   }
     * })
     * 
    **/
    delete<T extends MarcasDeleteArgs>(
      args: SelectSubset<T, MarcasDeleteArgs>
    ): CheckSelect<T, Prisma__MarcasClient<Marcas>, Prisma__MarcasClient<MarcasGetPayload<T>>>

    /**
     * Update one Marcas.
     * @param {MarcasUpdateArgs} args - Arguments to update one Marcas.
     * @example
     * // Update one Marcas
     * const marcas = await prisma.marcas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MarcasUpdateArgs>(
      args: SelectSubset<T, MarcasUpdateArgs>
    ): CheckSelect<T, Prisma__MarcasClient<Marcas>, Prisma__MarcasClient<MarcasGetPayload<T>>>

    /**
     * Delete zero or more Marcas.
     * @param {MarcasDeleteManyArgs} args - Arguments to filter Marcas to delete.
     * @example
     * // Delete a few Marcas
     * const { count } = await prisma.marcas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MarcasDeleteManyArgs>(
      args?: SelectSubset<T, MarcasDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Marcas
     * const marcas = await prisma.marcas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MarcasUpdateManyArgs>(
      args: SelectSubset<T, MarcasUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Marcas.
     * @param {MarcasUpsertArgs} args - Arguments to update or create a Marcas.
     * @example
     * // Update or create a Marcas
     * const marcas = await prisma.marcas.upsert({
     *   create: {
     *     // ... data to create a Marcas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Marcas we want to update
     *   }
     * })
    **/
    upsert<T extends MarcasUpsertArgs>(
      args: SelectSubset<T, MarcasUpsertArgs>
    ): CheckSelect<T, Prisma__MarcasClient<Marcas>, Prisma__MarcasClient<MarcasGetPayload<T>>>

    /**
     * Find zero or more Marcas that matches the filter.
     * @param {MarcasFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const marcas = await prisma.marcas.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: MarcasFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Marcas.
     * @param {MarcasAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const marcas = await prisma.marcas.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: MarcasAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Marcas that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {MarcasFindUniqueOrThrowArgs} args - Arguments to find a Marcas
     * @example
     * // Get one Marcas
     * const marcas = await prisma.marcas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MarcasFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, MarcasFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__MarcasClient<Marcas>, Prisma__MarcasClient<MarcasGetPayload<T>>>

    /**
     * Find the first Marcas that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcasFindFirstOrThrowArgs} args - Arguments to find a Marcas
     * @example
     * // Get one Marcas
     * const marcas = await prisma.marcas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MarcasFindFirstOrThrowArgs>(
      args?: SelectSubset<T, MarcasFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__MarcasClient<Marcas>, Prisma__MarcasClient<MarcasGetPayload<T>>>

    /**
     * Count the number of Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcasCountArgs} args - Arguments to filter Marcas to count.
     * @example
     * // Count the number of Marcas
     * const count = await prisma.marcas.count({
     *   where: {
     *     // ... the filter for the Marcas we want to count
     *   }
     * })
    **/
    count<T extends MarcasCountArgs>(
      args?: Subset<T, MarcasCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarcasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarcasAggregateArgs>(args: Subset<T, MarcasAggregateArgs>): PrismaPromise<GetMarcasAggregateType<T>>

    /**
     * Group by Marcas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarcasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarcasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarcasGroupByArgs['orderBy'] }
        : { orderBy?: MarcasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarcasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarcasGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Marcas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MarcasClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Marcas base type for findUnique actions
   */
  export type MarcasFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Marcas
     * 
    **/
    select?: MarcasSelect | null
    /**
     * Filter, which Marcas to fetch.
     * 
    **/
    where: MarcasWhereUniqueInput
  }

  /**
   * Marcas: findUnique
   */
  export interface MarcasFindUniqueArgs extends MarcasFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Marcas base type for findFirst actions
   */
  export type MarcasFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Marcas
     * 
    **/
    select?: MarcasSelect | null
    /**
     * Filter, which Marcas to fetch.
     * 
    **/
    where?: MarcasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     * 
    **/
    orderBy?: Enumerable<MarcasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Marcas.
     * 
    **/
    cursor?: MarcasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Marcas.
     * 
    **/
    distinct?: Enumerable<MarcasScalarFieldEnum>
  }

  /**
   * Marcas: findFirst
   */
  export interface MarcasFindFirstArgs extends MarcasFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Marcas findMany
   */
  export type MarcasFindManyArgs = {
    /**
     * Select specific fields to fetch from the Marcas
     * 
    **/
    select?: MarcasSelect | null
    /**
     * Filter, which Marcas to fetch.
     * 
    **/
    where?: MarcasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Marcas to fetch.
     * 
    **/
    orderBy?: Enumerable<MarcasOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Marcas.
     * 
    **/
    cursor?: MarcasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Marcas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Marcas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MarcasScalarFieldEnum>
  }


  /**
   * Marcas create
   */
  export type MarcasCreateArgs = {
    /**
     * Select specific fields to fetch from the Marcas
     * 
    **/
    select?: MarcasSelect | null
    /**
     * The data needed to create a Marcas.
     * 
    **/
    data: XOR<MarcasCreateInput, MarcasUncheckedCreateInput>
  }


  /**
   * Marcas createMany
   */
  export type MarcasCreateManyArgs = {
    /**
     * The data used to create many Marcas.
     * 
    **/
    data: Enumerable<MarcasCreateManyInput>
  }


  /**
   * Marcas update
   */
  export type MarcasUpdateArgs = {
    /**
     * Select specific fields to fetch from the Marcas
     * 
    **/
    select?: MarcasSelect | null
    /**
     * The data needed to update a Marcas.
     * 
    **/
    data: XOR<MarcasUpdateInput, MarcasUncheckedUpdateInput>
    /**
     * Choose, which Marcas to update.
     * 
    **/
    where: MarcasWhereUniqueInput
  }


  /**
   * Marcas updateMany
   */
  export type MarcasUpdateManyArgs = {
    /**
     * The data used to update Marcas.
     * 
    **/
    data: XOR<MarcasUpdateManyMutationInput, MarcasUncheckedUpdateManyInput>
    /**
     * Filter which Marcas to update
     * 
    **/
    where?: MarcasWhereInput
  }


  /**
   * Marcas upsert
   */
  export type MarcasUpsertArgs = {
    /**
     * Select specific fields to fetch from the Marcas
     * 
    **/
    select?: MarcasSelect | null
    /**
     * The filter to search for the Marcas to update in case it exists.
     * 
    **/
    where: MarcasWhereUniqueInput
    /**
     * In case the Marcas found by the `where` argument doesn't exist, create a new Marcas with this data.
     * 
    **/
    create: XOR<MarcasCreateInput, MarcasUncheckedCreateInput>
    /**
     * In case the Marcas was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<MarcasUpdateInput, MarcasUncheckedUpdateInput>
  }


  /**
   * Marcas delete
   */
  export type MarcasDeleteArgs = {
    /**
     * Select specific fields to fetch from the Marcas
     * 
    **/
    select?: MarcasSelect | null
    /**
     * Filter which Marcas to delete.
     * 
    **/
    where: MarcasWhereUniqueInput
  }


  /**
   * Marcas deleteMany
   */
  export type MarcasDeleteManyArgs = {
    /**
     * Filter which Marcas to delete
     * 
    **/
    where?: MarcasWhereInput
  }


  /**
   * Marcas findRaw
   */
  export type MarcasFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Marcas aggregateRaw
   */
  export type MarcasAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Marcas: findUniqueOrThrow
   */
  export type MarcasFindUniqueOrThrowArgs = MarcasFindUniqueArgsBase
      

  /**
   * Marcas: findFirstOrThrow
   */
  export type MarcasFindFirstOrThrowArgs = MarcasFindFirstArgsBase
      

  /**
   * Marcas without action
   */
  export type MarcasArgs = {
    /**
     * Select specific fields to fetch from the Marcas
     * 
    **/
    select?: MarcasSelect | null
  }



  /**
   * Model Clientes
   */


  export type AggregateClientes = {
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  export type ClientesAvgAggregateOutputType = {
    orden: number | null
  }

  export type ClientesSumAggregateOutputType = {
    orden: number | null
  }

  export type ClientesMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    link: string | null
    imagen: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClientesMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    link: string | null
    imagen: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ClientesCountAggregateOutputType = {
    id: number
    nombre: number
    link: number
    imagen: number
    estado: number
    orden: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ClientesAvgAggregateInputType = {
    orden?: true
  }

  export type ClientesSumAggregateInputType = {
    orden?: true
  }

  export type ClientesMinAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type ClientesMaxAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type ClientesCountAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ClientesAggregateArgs = {
    /**
     * Filter which Clientes to aggregate.
     * 
    **/
    where?: ClientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ClientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Clientes
    **/
    _count?: true | ClientesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClientesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClientesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClientesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClientesMaxAggregateInputType
  }

  export type GetClientesAggregateType<T extends ClientesAggregateArgs> = {
        [P in keyof T & keyof AggregateClientes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClientes[P]>
      : GetScalarType<T[P], AggregateClientes[P]>
  }




  export type ClientesGroupByArgs = {
    where?: ClientesWhereInput
    orderBy?: Enumerable<ClientesOrderByWithAggregationInput>
    by: Array<ClientesScalarFieldEnum>
    having?: ClientesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClientesCountAggregateInputType | true
    _avg?: ClientesAvgAggregateInputType
    _sum?: ClientesSumAggregateInputType
    _min?: ClientesMinAggregateInputType
    _max?: ClientesMaxAggregateInputType
  }


  export type ClientesGroupByOutputType = {
    id: string
    nombre: string
    link: string
    imagen: string
    estado: boolean
    orden: number
    created_at: Date
    updated_at: Date | null
    _count: ClientesCountAggregateOutputType | null
    _avg: ClientesAvgAggregateOutputType | null
    _sum: ClientesSumAggregateOutputType | null
    _min: ClientesMinAggregateOutputType | null
    _max: ClientesMaxAggregateOutputType | null
  }

  type GetClientesGroupByPayload<T extends ClientesGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ClientesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClientesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClientesGroupByOutputType[P]>
            : GetScalarType<T[P], ClientesGroupByOutputType[P]>
        }
      >
    >


  export type ClientesSelect = {
    id?: boolean
    nombre?: boolean
    link?: boolean
    imagen?: boolean
    estado?: boolean
    orden?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type ClientesGetPayload<
    S extends boolean | null | undefined | ClientesArgs,
    U = keyof S
      > = S extends true
        ? Clientes
    : S extends undefined
    ? never
    : S extends ClientesArgs | ClientesFindManyArgs
    ?'include' extends U
    ? Clientes 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Clientes ? Clientes[P] : never
  } 
    : Clientes
  : Clientes


  type ClientesCountArgs = Merge<
    Omit<ClientesFindManyArgs, 'select' | 'include'> & {
      select?: ClientesCountAggregateInputType | true
    }
  >

  export interface ClientesDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Clientes that matches the filter.
     * @param {ClientesFindUniqueArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClientesFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ClientesFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Clientes'> extends True ? CheckSelect<T, Prisma__ClientesClient<Clientes>, Prisma__ClientesClient<ClientesGetPayload<T>>> : CheckSelect<T, Prisma__ClientesClient<Clientes | null, null>, Prisma__ClientesClient<ClientesGetPayload<T> | null, null>>

    /**
     * Find the first Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesFindFirstArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClientesFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ClientesFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Clientes'> extends True ? CheckSelect<T, Prisma__ClientesClient<Clientes>, Prisma__ClientesClient<ClientesGetPayload<T>>> : CheckSelect<T, Prisma__ClientesClient<Clientes | null, null>, Prisma__ClientesClient<ClientesGetPayload<T> | null, null>>

    /**
     * Find zero or more Clientes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Clientes
     * const clientes = await prisma.clientes.findMany()
     * 
     * // Get first 10 Clientes
     * const clientes = await prisma.clientes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const clientesWithIdOnly = await prisma.clientes.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ClientesFindManyArgs>(
      args?: SelectSubset<T, ClientesFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Clientes>>, PrismaPromise<Array<ClientesGetPayload<T>>>>

    /**
     * Create a Clientes.
     * @param {ClientesCreateArgs} args - Arguments to create a Clientes.
     * @example
     * // Create one Clientes
     * const Clientes = await prisma.clientes.create({
     *   data: {
     *     // ... data to create a Clientes
     *   }
     * })
     * 
    **/
    create<T extends ClientesCreateArgs>(
      args: SelectSubset<T, ClientesCreateArgs>
    ): CheckSelect<T, Prisma__ClientesClient<Clientes>, Prisma__ClientesClient<ClientesGetPayload<T>>>

    /**
     * Create many Clientes.
     *     @param {ClientesCreateManyArgs} args - Arguments to create many Clientes.
     *     @example
     *     // Create many Clientes
     *     const clientes = await prisma.clientes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ClientesCreateManyArgs>(
      args?: SelectSubset<T, ClientesCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Clientes.
     * @param {ClientesDeleteArgs} args - Arguments to delete one Clientes.
     * @example
     * // Delete one Clientes
     * const Clientes = await prisma.clientes.delete({
     *   where: {
     *     // ... filter to delete one Clientes
     *   }
     * })
     * 
    **/
    delete<T extends ClientesDeleteArgs>(
      args: SelectSubset<T, ClientesDeleteArgs>
    ): CheckSelect<T, Prisma__ClientesClient<Clientes>, Prisma__ClientesClient<ClientesGetPayload<T>>>

    /**
     * Update one Clientes.
     * @param {ClientesUpdateArgs} args - Arguments to update one Clientes.
     * @example
     * // Update one Clientes
     * const clientes = await prisma.clientes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClientesUpdateArgs>(
      args: SelectSubset<T, ClientesUpdateArgs>
    ): CheckSelect<T, Prisma__ClientesClient<Clientes>, Prisma__ClientesClient<ClientesGetPayload<T>>>

    /**
     * Delete zero or more Clientes.
     * @param {ClientesDeleteManyArgs} args - Arguments to filter Clientes to delete.
     * @example
     * // Delete a few Clientes
     * const { count } = await prisma.clientes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClientesDeleteManyArgs>(
      args?: SelectSubset<T, ClientesDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Clientes
     * const clientes = await prisma.clientes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClientesUpdateManyArgs>(
      args: SelectSubset<T, ClientesUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Clientes.
     * @param {ClientesUpsertArgs} args - Arguments to update or create a Clientes.
     * @example
     * // Update or create a Clientes
     * const clientes = await prisma.clientes.upsert({
     *   create: {
     *     // ... data to create a Clientes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Clientes we want to update
     *   }
     * })
    **/
    upsert<T extends ClientesUpsertArgs>(
      args: SelectSubset<T, ClientesUpsertArgs>
    ): CheckSelect<T, Prisma__ClientesClient<Clientes>, Prisma__ClientesClient<ClientesGetPayload<T>>>

    /**
     * Find zero or more Clientes that matches the filter.
     * @param {ClientesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const clientes = await prisma.clientes.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ClientesFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Clientes.
     * @param {ClientesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const clientes = await prisma.clientes.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ClientesAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Clientes that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ClientesFindUniqueOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClientesFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ClientesFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ClientesClient<Clientes>, Prisma__ClientesClient<ClientesGetPayload<T>>>

    /**
     * Find the first Clientes that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesFindFirstOrThrowArgs} args - Arguments to find a Clientes
     * @example
     * // Get one Clientes
     * const clientes = await prisma.clientes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClientesFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ClientesFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ClientesClient<Clientes>, Prisma__ClientesClient<ClientesGetPayload<T>>>

    /**
     * Count the number of Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesCountArgs} args - Arguments to filter Clientes to count.
     * @example
     * // Count the number of Clientes
     * const count = await prisma.clientes.count({
     *   where: {
     *     // ... the filter for the Clientes we want to count
     *   }
     * })
    **/
    count<T extends ClientesCountArgs>(
      args?: Subset<T, ClientesCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClientesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClientesAggregateArgs>(args: Subset<T, ClientesAggregateArgs>): PrismaPromise<GetClientesAggregateType<T>>

    /**
     * Group by Clientes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClientesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClientesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClientesGroupByArgs['orderBy'] }
        : { orderBy?: ClientesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClientesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClientesGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Clientes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ClientesClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Clientes base type for findUnique actions
   */
  export type ClientesFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Clientes
     * 
    **/
    select?: ClientesSelect | null
    /**
     * Filter, which Clientes to fetch.
     * 
    **/
    where: ClientesWhereUniqueInput
  }

  /**
   * Clientes: findUnique
   */
  export interface ClientesFindUniqueArgs extends ClientesFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Clientes base type for findFirst actions
   */
  export type ClientesFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Clientes
     * 
    **/
    select?: ClientesSelect | null
    /**
     * Filter, which Clientes to fetch.
     * 
    **/
    where?: ClientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Clientes.
     * 
    **/
    cursor?: ClientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Clientes.
     * 
    **/
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }

  /**
   * Clientes: findFirst
   */
  export interface ClientesFindFirstArgs extends ClientesFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Clientes findMany
   */
  export type ClientesFindManyArgs = {
    /**
     * Select specific fields to fetch from the Clientes
     * 
    **/
    select?: ClientesSelect | null
    /**
     * Filter, which Clientes to fetch.
     * 
    **/
    where?: ClientesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Clientes to fetch.
     * 
    **/
    orderBy?: Enumerable<ClientesOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Clientes.
     * 
    **/
    cursor?: ClientesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Clientes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Clientes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ClientesScalarFieldEnum>
  }


  /**
   * Clientes create
   */
  export type ClientesCreateArgs = {
    /**
     * Select specific fields to fetch from the Clientes
     * 
    **/
    select?: ClientesSelect | null
    /**
     * The data needed to create a Clientes.
     * 
    **/
    data: XOR<ClientesCreateInput, ClientesUncheckedCreateInput>
  }


  /**
   * Clientes createMany
   */
  export type ClientesCreateManyArgs = {
    /**
     * The data used to create many Clientes.
     * 
    **/
    data: Enumerable<ClientesCreateManyInput>
  }


  /**
   * Clientes update
   */
  export type ClientesUpdateArgs = {
    /**
     * Select specific fields to fetch from the Clientes
     * 
    **/
    select?: ClientesSelect | null
    /**
     * The data needed to update a Clientes.
     * 
    **/
    data: XOR<ClientesUpdateInput, ClientesUncheckedUpdateInput>
    /**
     * Choose, which Clientes to update.
     * 
    **/
    where: ClientesWhereUniqueInput
  }


  /**
   * Clientes updateMany
   */
  export type ClientesUpdateManyArgs = {
    /**
     * The data used to update Clientes.
     * 
    **/
    data: XOR<ClientesUpdateManyMutationInput, ClientesUncheckedUpdateManyInput>
    /**
     * Filter which Clientes to update
     * 
    **/
    where?: ClientesWhereInput
  }


  /**
   * Clientes upsert
   */
  export type ClientesUpsertArgs = {
    /**
     * Select specific fields to fetch from the Clientes
     * 
    **/
    select?: ClientesSelect | null
    /**
     * The filter to search for the Clientes to update in case it exists.
     * 
    **/
    where: ClientesWhereUniqueInput
    /**
     * In case the Clientes found by the `where` argument doesn't exist, create a new Clientes with this data.
     * 
    **/
    create: XOR<ClientesCreateInput, ClientesUncheckedCreateInput>
    /**
     * In case the Clientes was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ClientesUpdateInput, ClientesUncheckedUpdateInput>
  }


  /**
   * Clientes delete
   */
  export type ClientesDeleteArgs = {
    /**
     * Select specific fields to fetch from the Clientes
     * 
    **/
    select?: ClientesSelect | null
    /**
     * Filter which Clientes to delete.
     * 
    **/
    where: ClientesWhereUniqueInput
  }


  /**
   * Clientes deleteMany
   */
  export type ClientesDeleteManyArgs = {
    /**
     * Filter which Clientes to delete
     * 
    **/
    where?: ClientesWhereInput
  }


  /**
   * Clientes findRaw
   */
  export type ClientesFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Clientes aggregateRaw
   */
  export type ClientesAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Clientes: findUniqueOrThrow
   */
  export type ClientesFindUniqueOrThrowArgs = ClientesFindUniqueArgsBase
      

  /**
   * Clientes: findFirstOrThrow
   */
  export type ClientesFindFirstOrThrowArgs = ClientesFindFirstArgsBase
      

  /**
   * Clientes without action
   */
  export type ClientesArgs = {
    /**
     * Select specific fields to fetch from the Clientes
     * 
    **/
    select?: ClientesSelect | null
  }



  /**
   * Model Promocion
   */


  export type AggregatePromocion = {
    _count: PromocionCountAggregateOutputType | null
    _avg: PromocionAvgAggregateOutputType | null
    _sum: PromocionSumAggregateOutputType | null
    _min: PromocionMinAggregateOutputType | null
    _max: PromocionMaxAggregateOutputType | null
  }

  export type PromocionAvgAggregateOutputType = {
    orden: number | null
  }

  export type PromocionSumAggregateOutputType = {
    orden: number | null
  }

  export type PromocionMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    link: string | null
    imagen: string | null
    estado: boolean | null
    orden: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    empresaId: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PromocionMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    link: string | null
    imagen: string | null
    estado: boolean | null
    orden: number | null
    fechaInicio: Date | null
    fechaFin: Date | null
    empresaId: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PromocionCountAggregateOutputType = {
    id: number
    nombre: number
    link: number
    imagen: number
    estado: number
    orden: number
    fechaInicio: number
    fechaFin: number
    empresaId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PromocionAvgAggregateInputType = {
    orden?: true
  }

  export type PromocionSumAggregateInputType = {
    orden?: true
  }

  export type PromocionMinAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    fechaInicio?: true
    fechaFin?: true
    empresaId?: true
    created_at?: true
    updated_at?: true
  }

  export type PromocionMaxAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    fechaInicio?: true
    fechaFin?: true
    empresaId?: true
    created_at?: true
    updated_at?: true
  }

  export type PromocionCountAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    fechaInicio?: true
    fechaFin?: true
    empresaId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PromocionAggregateArgs = {
    /**
     * Filter which Promocion to aggregate.
     * 
    **/
    where?: PromocionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promocions to fetch.
     * 
    **/
    orderBy?: Enumerable<PromocionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PromocionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promocions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promocions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Promocions
    **/
    _count?: true | PromocionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromocionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromocionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromocionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromocionMaxAggregateInputType
  }

  export type GetPromocionAggregateType<T extends PromocionAggregateArgs> = {
        [P in keyof T & keyof AggregatePromocion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromocion[P]>
      : GetScalarType<T[P], AggregatePromocion[P]>
  }




  export type PromocionGroupByArgs = {
    where?: PromocionWhereInput
    orderBy?: Enumerable<PromocionOrderByWithAggregationInput>
    by: Array<PromocionScalarFieldEnum>
    having?: PromocionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromocionCountAggregateInputType | true
    _avg?: PromocionAvgAggregateInputType
    _sum?: PromocionSumAggregateInputType
    _min?: PromocionMinAggregateInputType
    _max?: PromocionMaxAggregateInputType
  }


  export type PromocionGroupByOutputType = {
    id: string
    nombre: string
    link: string
    imagen: string
    estado: boolean
    orden: number
    fechaInicio: Date | null
    fechaFin: Date | null
    empresaId: string
    created_at: Date
    updated_at: Date
    _count: PromocionCountAggregateOutputType | null
    _avg: PromocionAvgAggregateOutputType | null
    _sum: PromocionSumAggregateOutputType | null
    _min: PromocionMinAggregateOutputType | null
    _max: PromocionMaxAggregateOutputType | null
  }

  type GetPromocionGroupByPayload<T extends PromocionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PromocionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromocionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromocionGroupByOutputType[P]>
            : GetScalarType<T[P], PromocionGroupByOutputType[P]>
        }
      >
    >


  export type PromocionSelect = {
    id?: boolean
    nombre?: boolean
    link?: boolean
    imagen?: boolean
    estado?: boolean
    orden?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    promocionVouchers?: boolean | VoucherFindManyArgs
    empresa?: boolean | EmpresaArgs
    empresaId?: boolean
    promociones?: boolean | PromocionDetalleFindManyArgs
    created_at?: boolean
    updated_at?: boolean
    _count?: boolean | PromocionCountOutputTypeArgs
  }

  export type PromocionInclude = {
    promocionVouchers?: boolean | VoucherFindManyArgs
    empresa?: boolean | EmpresaArgs
    promociones?: boolean | PromocionDetalleFindManyArgs
    _count?: boolean | PromocionCountOutputTypeArgs
  }

  export type PromocionGetPayload<
    S extends boolean | null | undefined | PromocionArgs,
    U = keyof S
      > = S extends true
        ? Promocion
    : S extends undefined
    ? never
    : S extends PromocionArgs | PromocionFindManyArgs
    ?'include' extends U
    ? Promocion  & {
    [P in TrueKeys<S['include']>]:
        P extends 'promocionVouchers' ? Array < VoucherGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'empresa' ? EmpresaGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'promociones' ? Array < PromocionDetalleGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? PromocionCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'promocionVouchers' ? Array < VoucherGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'empresa' ? EmpresaGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'promociones' ? Array < PromocionDetalleGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? PromocionCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Promocion ? Promocion[P] : never
  } 
    : Promocion
  : Promocion


  type PromocionCountArgs = Merge<
    Omit<PromocionFindManyArgs, 'select' | 'include'> & {
      select?: PromocionCountAggregateInputType | true
    }
  >

  export interface PromocionDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Promocion that matches the filter.
     * @param {PromocionFindUniqueArgs} args - Arguments to find a Promocion
     * @example
     * // Get one Promocion
     * const promocion = await prisma.promocion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PromocionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PromocionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Promocion'> extends True ? CheckSelect<T, Prisma__PromocionClient<Promocion>, Prisma__PromocionClient<PromocionGetPayload<T>>> : CheckSelect<T, Prisma__PromocionClient<Promocion | null, null>, Prisma__PromocionClient<PromocionGetPayload<T> | null, null>>

    /**
     * Find the first Promocion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionFindFirstArgs} args - Arguments to find a Promocion
     * @example
     * // Get one Promocion
     * const promocion = await prisma.promocion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PromocionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PromocionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Promocion'> extends True ? CheckSelect<T, Prisma__PromocionClient<Promocion>, Prisma__PromocionClient<PromocionGetPayload<T>>> : CheckSelect<T, Prisma__PromocionClient<Promocion | null, null>, Prisma__PromocionClient<PromocionGetPayload<T> | null, null>>

    /**
     * Find zero or more Promocions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Promocions
     * const promocions = await prisma.promocion.findMany()
     * 
     * // Get first 10 Promocions
     * const promocions = await prisma.promocion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promocionWithIdOnly = await prisma.promocion.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PromocionFindManyArgs>(
      args?: SelectSubset<T, PromocionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Promocion>>, PrismaPromise<Array<PromocionGetPayload<T>>>>

    /**
     * Create a Promocion.
     * @param {PromocionCreateArgs} args - Arguments to create a Promocion.
     * @example
     * // Create one Promocion
     * const Promocion = await prisma.promocion.create({
     *   data: {
     *     // ... data to create a Promocion
     *   }
     * })
     * 
    **/
    create<T extends PromocionCreateArgs>(
      args: SelectSubset<T, PromocionCreateArgs>
    ): CheckSelect<T, Prisma__PromocionClient<Promocion>, Prisma__PromocionClient<PromocionGetPayload<T>>>

    /**
     * Create many Promocions.
     *     @param {PromocionCreateManyArgs} args - Arguments to create many Promocions.
     *     @example
     *     // Create many Promocions
     *     const promocion = await prisma.promocion.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PromocionCreateManyArgs>(
      args?: SelectSubset<T, PromocionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Promocion.
     * @param {PromocionDeleteArgs} args - Arguments to delete one Promocion.
     * @example
     * // Delete one Promocion
     * const Promocion = await prisma.promocion.delete({
     *   where: {
     *     // ... filter to delete one Promocion
     *   }
     * })
     * 
    **/
    delete<T extends PromocionDeleteArgs>(
      args: SelectSubset<T, PromocionDeleteArgs>
    ): CheckSelect<T, Prisma__PromocionClient<Promocion>, Prisma__PromocionClient<PromocionGetPayload<T>>>

    /**
     * Update one Promocion.
     * @param {PromocionUpdateArgs} args - Arguments to update one Promocion.
     * @example
     * // Update one Promocion
     * const promocion = await prisma.promocion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PromocionUpdateArgs>(
      args: SelectSubset<T, PromocionUpdateArgs>
    ): CheckSelect<T, Prisma__PromocionClient<Promocion>, Prisma__PromocionClient<PromocionGetPayload<T>>>

    /**
     * Delete zero or more Promocions.
     * @param {PromocionDeleteManyArgs} args - Arguments to filter Promocions to delete.
     * @example
     * // Delete a few Promocions
     * const { count } = await prisma.promocion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PromocionDeleteManyArgs>(
      args?: SelectSubset<T, PromocionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Promocions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Promocions
     * const promocion = await prisma.promocion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PromocionUpdateManyArgs>(
      args: SelectSubset<T, PromocionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Promocion.
     * @param {PromocionUpsertArgs} args - Arguments to update or create a Promocion.
     * @example
     * // Update or create a Promocion
     * const promocion = await prisma.promocion.upsert({
     *   create: {
     *     // ... data to create a Promocion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Promocion we want to update
     *   }
     * })
    **/
    upsert<T extends PromocionUpsertArgs>(
      args: SelectSubset<T, PromocionUpsertArgs>
    ): CheckSelect<T, Prisma__PromocionClient<Promocion>, Prisma__PromocionClient<PromocionGetPayload<T>>>

    /**
     * Find zero or more Promocions that matches the filter.
     * @param {PromocionFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const promocion = await prisma.promocion.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: PromocionFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Promocion.
     * @param {PromocionAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const promocion = await prisma.promocion.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: PromocionAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Promocion that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PromocionFindUniqueOrThrowArgs} args - Arguments to find a Promocion
     * @example
     * // Get one Promocion
     * const promocion = await prisma.promocion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PromocionFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PromocionFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PromocionClient<Promocion>, Prisma__PromocionClient<PromocionGetPayload<T>>>

    /**
     * Find the first Promocion that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionFindFirstOrThrowArgs} args - Arguments to find a Promocion
     * @example
     * // Get one Promocion
     * const promocion = await prisma.promocion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PromocionFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PromocionFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PromocionClient<Promocion>, Prisma__PromocionClient<PromocionGetPayload<T>>>

    /**
     * Count the number of Promocions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionCountArgs} args - Arguments to filter Promocions to count.
     * @example
     * // Count the number of Promocions
     * const count = await prisma.promocion.count({
     *   where: {
     *     // ... the filter for the Promocions we want to count
     *   }
     * })
    **/
    count<T extends PromocionCountArgs>(
      args?: Subset<T, PromocionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromocionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Promocion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromocionAggregateArgs>(args: Subset<T, PromocionAggregateArgs>): PrismaPromise<GetPromocionAggregateType<T>>

    /**
     * Group by Promocion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromocionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromocionGroupByArgs['orderBy'] }
        : { orderBy?: PromocionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromocionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromocionGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Promocion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PromocionClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    promocionVouchers<T extends VoucherFindManyArgs = {}>(args?: Subset<T, VoucherFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Voucher>| Null>, PrismaPromise<Array<VoucherGetPayload<T>>| Null>>;

    empresa<T extends EmpresaArgs = {}>(args?: Subset<T, EmpresaArgs>): CheckSelect<T, Prisma__EmpresaClient<Empresa | Null>, Prisma__EmpresaClient<EmpresaGetPayload<T> | Null>>;

    promociones<T extends PromocionDetalleFindManyArgs = {}>(args?: Subset<T, PromocionDetalleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PromocionDetalle>| Null>, PrismaPromise<Array<PromocionDetalleGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Promocion base type for findUnique actions
   */
  export type PromocionFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Promocion
     * 
    **/
    select?: PromocionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionInclude | null
    /**
     * Filter, which Promocion to fetch.
     * 
    **/
    where: PromocionWhereUniqueInput
  }

  /**
   * Promocion: findUnique
   */
  export interface PromocionFindUniqueArgs extends PromocionFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Promocion base type for findFirst actions
   */
  export type PromocionFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Promocion
     * 
    **/
    select?: PromocionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionInclude | null
    /**
     * Filter, which Promocion to fetch.
     * 
    **/
    where?: PromocionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promocions to fetch.
     * 
    **/
    orderBy?: Enumerable<PromocionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Promocions.
     * 
    **/
    cursor?: PromocionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promocions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promocions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Promocions.
     * 
    **/
    distinct?: Enumerable<PromocionScalarFieldEnum>
  }

  /**
   * Promocion: findFirst
   */
  export interface PromocionFindFirstArgs extends PromocionFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Promocion findMany
   */
  export type PromocionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Promocion
     * 
    **/
    select?: PromocionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionInclude | null
    /**
     * Filter, which Promocions to fetch.
     * 
    **/
    where?: PromocionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Promocions to fetch.
     * 
    **/
    orderBy?: Enumerable<PromocionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Promocions.
     * 
    **/
    cursor?: PromocionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Promocions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Promocions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PromocionScalarFieldEnum>
  }


  /**
   * Promocion create
   */
  export type PromocionCreateArgs = {
    /**
     * Select specific fields to fetch from the Promocion
     * 
    **/
    select?: PromocionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionInclude | null
    /**
     * The data needed to create a Promocion.
     * 
    **/
    data: XOR<PromocionCreateInput, PromocionUncheckedCreateInput>
  }


  /**
   * Promocion createMany
   */
  export type PromocionCreateManyArgs = {
    /**
     * The data used to create many Promocions.
     * 
    **/
    data: Enumerable<PromocionCreateManyInput>
  }


  /**
   * Promocion update
   */
  export type PromocionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Promocion
     * 
    **/
    select?: PromocionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionInclude | null
    /**
     * The data needed to update a Promocion.
     * 
    **/
    data: XOR<PromocionUpdateInput, PromocionUncheckedUpdateInput>
    /**
     * Choose, which Promocion to update.
     * 
    **/
    where: PromocionWhereUniqueInput
  }


  /**
   * Promocion updateMany
   */
  export type PromocionUpdateManyArgs = {
    /**
     * The data used to update Promocions.
     * 
    **/
    data: XOR<PromocionUpdateManyMutationInput, PromocionUncheckedUpdateManyInput>
    /**
     * Filter which Promocions to update
     * 
    **/
    where?: PromocionWhereInput
  }


  /**
   * Promocion upsert
   */
  export type PromocionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Promocion
     * 
    **/
    select?: PromocionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionInclude | null
    /**
     * The filter to search for the Promocion to update in case it exists.
     * 
    **/
    where: PromocionWhereUniqueInput
    /**
     * In case the Promocion found by the `where` argument doesn't exist, create a new Promocion with this data.
     * 
    **/
    create: XOR<PromocionCreateInput, PromocionUncheckedCreateInput>
    /**
     * In case the Promocion was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PromocionUpdateInput, PromocionUncheckedUpdateInput>
  }


  /**
   * Promocion delete
   */
  export type PromocionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Promocion
     * 
    **/
    select?: PromocionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionInclude | null
    /**
     * Filter which Promocion to delete.
     * 
    **/
    where: PromocionWhereUniqueInput
  }


  /**
   * Promocion deleteMany
   */
  export type PromocionDeleteManyArgs = {
    /**
     * Filter which Promocions to delete
     * 
    **/
    where?: PromocionWhereInput
  }


  /**
   * Promocion findRaw
   */
  export type PromocionFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Promocion aggregateRaw
   */
  export type PromocionAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Promocion: findUniqueOrThrow
   */
  export type PromocionFindUniqueOrThrowArgs = PromocionFindUniqueArgsBase
      

  /**
   * Promocion: findFirstOrThrow
   */
  export type PromocionFindFirstOrThrowArgs = PromocionFindFirstArgsBase
      

  /**
   * Promocion without action
   */
  export type PromocionArgs = {
    /**
     * Select specific fields to fetch from the Promocion
     * 
    **/
    select?: PromocionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionInclude | null
  }



  /**
   * Model PromocionDetalle
   */


  export type AggregatePromocionDetalle = {
    _count: PromocionDetalleCountAggregateOutputType | null
    _avg: PromocionDetalleAvgAggregateOutputType | null
    _sum: PromocionDetalleSumAggregateOutputType | null
    _min: PromocionDetalleMinAggregateOutputType | null
    _max: PromocionDetalleMaxAggregateOutputType | null
  }

  export type PromocionDetalleAvgAggregateOutputType = {
    porcentaje: number | null
    monto: number | null
  }

  export type PromocionDetalleSumAggregateOutputType = {
    porcentaje: number | null
    monto: number | null
  }

  export type PromocionDetalleMinAggregateOutputType = {
    id: string | null
    promocionId: string | null
    productoId: string | null
    porcentaje: number | null
    monto: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PromocionDetalleMaxAggregateOutputType = {
    id: string | null
    promocionId: string | null
    productoId: string | null
    porcentaje: number | null
    monto: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type PromocionDetalleCountAggregateOutputType = {
    id: number
    promocionId: number
    productoId: number
    porcentaje: number
    monto: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type PromocionDetalleAvgAggregateInputType = {
    porcentaje?: true
    monto?: true
  }

  export type PromocionDetalleSumAggregateInputType = {
    porcentaje?: true
    monto?: true
  }

  export type PromocionDetalleMinAggregateInputType = {
    id?: true
    promocionId?: true
    productoId?: true
    porcentaje?: true
    monto?: true
    created_at?: true
    updated_at?: true
  }

  export type PromocionDetalleMaxAggregateInputType = {
    id?: true
    promocionId?: true
    productoId?: true
    porcentaje?: true
    monto?: true
    created_at?: true
    updated_at?: true
  }

  export type PromocionDetalleCountAggregateInputType = {
    id?: true
    promocionId?: true
    productoId?: true
    porcentaje?: true
    monto?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type PromocionDetalleAggregateArgs = {
    /**
     * Filter which PromocionDetalle to aggregate.
     * 
    **/
    where?: PromocionDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromocionDetalles to fetch.
     * 
    **/
    orderBy?: Enumerable<PromocionDetalleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: PromocionDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromocionDetalles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromocionDetalles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PromocionDetalles
    **/
    _count?: true | PromocionDetalleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PromocionDetalleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PromocionDetalleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PromocionDetalleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PromocionDetalleMaxAggregateInputType
  }

  export type GetPromocionDetalleAggregateType<T extends PromocionDetalleAggregateArgs> = {
        [P in keyof T & keyof AggregatePromocionDetalle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePromocionDetalle[P]>
      : GetScalarType<T[P], AggregatePromocionDetalle[P]>
  }




  export type PromocionDetalleGroupByArgs = {
    where?: PromocionDetalleWhereInput
    orderBy?: Enumerable<PromocionDetalleOrderByWithAggregationInput>
    by: Array<PromocionDetalleScalarFieldEnum>
    having?: PromocionDetalleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PromocionDetalleCountAggregateInputType | true
    _avg?: PromocionDetalleAvgAggregateInputType
    _sum?: PromocionDetalleSumAggregateInputType
    _min?: PromocionDetalleMinAggregateInputType
    _max?: PromocionDetalleMaxAggregateInputType
  }


  export type PromocionDetalleGroupByOutputType = {
    id: string
    promocionId: string
    productoId: string
    porcentaje: number | null
    monto: number | null
    created_at: Date
    updated_at: Date
    _count: PromocionDetalleCountAggregateOutputType | null
    _avg: PromocionDetalleAvgAggregateOutputType | null
    _sum: PromocionDetalleSumAggregateOutputType | null
    _min: PromocionDetalleMinAggregateOutputType | null
    _max: PromocionDetalleMaxAggregateOutputType | null
  }

  type GetPromocionDetalleGroupByPayload<T extends PromocionDetalleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<PromocionDetalleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PromocionDetalleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PromocionDetalleGroupByOutputType[P]>
            : GetScalarType<T[P], PromocionDetalleGroupByOutputType[P]>
        }
      >
    >


  export type PromocionDetalleSelect = {
    id?: boolean
    promocion?: boolean | PromocionArgs
    promocionId?: boolean
    producto?: boolean | ProductoArgs
    productoId?: boolean
    porcentaje?: boolean
    monto?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type PromocionDetalleInclude = {
    promocion?: boolean | PromocionArgs
    producto?: boolean | ProductoArgs
  }

  export type PromocionDetalleGetPayload<
    S extends boolean | null | undefined | PromocionDetalleArgs,
    U = keyof S
      > = S extends true
        ? PromocionDetalle
    : S extends undefined
    ? never
    : S extends PromocionDetalleArgs | PromocionDetalleFindManyArgs
    ?'include' extends U
    ? PromocionDetalle  & {
    [P in TrueKeys<S['include']>]:
        P extends 'promocion' ? PromocionGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'producto' ? ProductoGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'promocion' ? PromocionGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'producto' ? ProductoGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof PromocionDetalle ? PromocionDetalle[P] : never
  } 
    : PromocionDetalle
  : PromocionDetalle


  type PromocionDetalleCountArgs = Merge<
    Omit<PromocionDetalleFindManyArgs, 'select' | 'include'> & {
      select?: PromocionDetalleCountAggregateInputType | true
    }
  >

  export interface PromocionDetalleDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one PromocionDetalle that matches the filter.
     * @param {PromocionDetalleFindUniqueArgs} args - Arguments to find a PromocionDetalle
     * @example
     * // Get one PromocionDetalle
     * const promocionDetalle = await prisma.promocionDetalle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PromocionDetalleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PromocionDetalleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'PromocionDetalle'> extends True ? CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T>>> : CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle | null, null>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T> | null, null>>

    /**
     * Find the first PromocionDetalle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionDetalleFindFirstArgs} args - Arguments to find a PromocionDetalle
     * @example
     * // Get one PromocionDetalle
     * const promocionDetalle = await prisma.promocionDetalle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PromocionDetalleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PromocionDetalleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'PromocionDetalle'> extends True ? CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T>>> : CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle | null, null>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T> | null, null>>

    /**
     * Find zero or more PromocionDetalles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionDetalleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PromocionDetalles
     * const promocionDetalles = await prisma.promocionDetalle.findMany()
     * 
     * // Get first 10 PromocionDetalles
     * const promocionDetalles = await prisma.promocionDetalle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const promocionDetalleWithIdOnly = await prisma.promocionDetalle.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PromocionDetalleFindManyArgs>(
      args?: SelectSubset<T, PromocionDetalleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<PromocionDetalle>>, PrismaPromise<Array<PromocionDetalleGetPayload<T>>>>

    /**
     * Create a PromocionDetalle.
     * @param {PromocionDetalleCreateArgs} args - Arguments to create a PromocionDetalle.
     * @example
     * // Create one PromocionDetalle
     * const PromocionDetalle = await prisma.promocionDetalle.create({
     *   data: {
     *     // ... data to create a PromocionDetalle
     *   }
     * })
     * 
    **/
    create<T extends PromocionDetalleCreateArgs>(
      args: SelectSubset<T, PromocionDetalleCreateArgs>
    ): CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T>>>

    /**
     * Create many PromocionDetalles.
     *     @param {PromocionDetalleCreateManyArgs} args - Arguments to create many PromocionDetalles.
     *     @example
     *     // Create many PromocionDetalles
     *     const promocionDetalle = await prisma.promocionDetalle.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PromocionDetalleCreateManyArgs>(
      args?: SelectSubset<T, PromocionDetalleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a PromocionDetalle.
     * @param {PromocionDetalleDeleteArgs} args - Arguments to delete one PromocionDetalle.
     * @example
     * // Delete one PromocionDetalle
     * const PromocionDetalle = await prisma.promocionDetalle.delete({
     *   where: {
     *     // ... filter to delete one PromocionDetalle
     *   }
     * })
     * 
    **/
    delete<T extends PromocionDetalleDeleteArgs>(
      args: SelectSubset<T, PromocionDetalleDeleteArgs>
    ): CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T>>>

    /**
     * Update one PromocionDetalle.
     * @param {PromocionDetalleUpdateArgs} args - Arguments to update one PromocionDetalle.
     * @example
     * // Update one PromocionDetalle
     * const promocionDetalle = await prisma.promocionDetalle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PromocionDetalleUpdateArgs>(
      args: SelectSubset<T, PromocionDetalleUpdateArgs>
    ): CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T>>>

    /**
     * Delete zero or more PromocionDetalles.
     * @param {PromocionDetalleDeleteManyArgs} args - Arguments to filter PromocionDetalles to delete.
     * @example
     * // Delete a few PromocionDetalles
     * const { count } = await prisma.promocionDetalle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PromocionDetalleDeleteManyArgs>(
      args?: SelectSubset<T, PromocionDetalleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more PromocionDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionDetalleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PromocionDetalles
     * const promocionDetalle = await prisma.promocionDetalle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PromocionDetalleUpdateManyArgs>(
      args: SelectSubset<T, PromocionDetalleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one PromocionDetalle.
     * @param {PromocionDetalleUpsertArgs} args - Arguments to update or create a PromocionDetalle.
     * @example
     * // Update or create a PromocionDetalle
     * const promocionDetalle = await prisma.promocionDetalle.upsert({
     *   create: {
     *     // ... data to create a PromocionDetalle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PromocionDetalle we want to update
     *   }
     * })
    **/
    upsert<T extends PromocionDetalleUpsertArgs>(
      args: SelectSubset<T, PromocionDetalleUpsertArgs>
    ): CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T>>>

    /**
     * Find zero or more PromocionDetalles that matches the filter.
     * @param {PromocionDetalleFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const promocionDetalle = await prisma.promocionDetalle.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: PromocionDetalleFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a PromocionDetalle.
     * @param {PromocionDetalleAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const promocionDetalle = await prisma.promocionDetalle.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: PromocionDetalleAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one PromocionDetalle that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {PromocionDetalleFindUniqueOrThrowArgs} args - Arguments to find a PromocionDetalle
     * @example
     * // Get one PromocionDetalle
     * const promocionDetalle = await prisma.promocionDetalle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PromocionDetalleFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, PromocionDetalleFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T>>>

    /**
     * Find the first PromocionDetalle that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionDetalleFindFirstOrThrowArgs} args - Arguments to find a PromocionDetalle
     * @example
     * // Get one PromocionDetalle
     * const promocionDetalle = await prisma.promocionDetalle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PromocionDetalleFindFirstOrThrowArgs>(
      args?: SelectSubset<T, PromocionDetalleFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__PromocionDetalleClient<PromocionDetalle>, Prisma__PromocionDetalleClient<PromocionDetalleGetPayload<T>>>

    /**
     * Count the number of PromocionDetalles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionDetalleCountArgs} args - Arguments to filter PromocionDetalles to count.
     * @example
     * // Count the number of PromocionDetalles
     * const count = await prisma.promocionDetalle.count({
     *   where: {
     *     // ... the filter for the PromocionDetalles we want to count
     *   }
     * })
    **/
    count<T extends PromocionDetalleCountArgs>(
      args?: Subset<T, PromocionDetalleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PromocionDetalleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PromocionDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionDetalleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PromocionDetalleAggregateArgs>(args: Subset<T, PromocionDetalleAggregateArgs>): PrismaPromise<GetPromocionDetalleAggregateType<T>>

    /**
     * Group by PromocionDetalle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PromocionDetalleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PromocionDetalleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PromocionDetalleGroupByArgs['orderBy'] }
        : { orderBy?: PromocionDetalleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PromocionDetalleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPromocionDetalleGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for PromocionDetalle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PromocionDetalleClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    promocion<T extends PromocionArgs = {}>(args?: Subset<T, PromocionArgs>): CheckSelect<T, Prisma__PromocionClient<Promocion | Null>, Prisma__PromocionClient<PromocionGetPayload<T> | Null>>;

    producto<T extends ProductoArgs = {}>(args?: Subset<T, ProductoArgs>): CheckSelect<T, Prisma__ProductoClient<Producto | Null>, Prisma__ProductoClient<ProductoGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * PromocionDetalle base type for findUnique actions
   */
  export type PromocionDetalleFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the PromocionDetalle
     * 
    **/
    select?: PromocionDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionDetalleInclude | null
    /**
     * Filter, which PromocionDetalle to fetch.
     * 
    **/
    where: PromocionDetalleWhereUniqueInput
  }

  /**
   * PromocionDetalle: findUnique
   */
  export interface PromocionDetalleFindUniqueArgs extends PromocionDetalleFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PromocionDetalle base type for findFirst actions
   */
  export type PromocionDetalleFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the PromocionDetalle
     * 
    **/
    select?: PromocionDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionDetalleInclude | null
    /**
     * Filter, which PromocionDetalle to fetch.
     * 
    **/
    where?: PromocionDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromocionDetalles to fetch.
     * 
    **/
    orderBy?: Enumerable<PromocionDetalleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PromocionDetalles.
     * 
    **/
    cursor?: PromocionDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromocionDetalles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromocionDetalles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PromocionDetalles.
     * 
    **/
    distinct?: Enumerable<PromocionDetalleScalarFieldEnum>
  }

  /**
   * PromocionDetalle: findFirst
   */
  export interface PromocionDetalleFindFirstArgs extends PromocionDetalleFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * PromocionDetalle findMany
   */
  export type PromocionDetalleFindManyArgs = {
    /**
     * Select specific fields to fetch from the PromocionDetalle
     * 
    **/
    select?: PromocionDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionDetalleInclude | null
    /**
     * Filter, which PromocionDetalles to fetch.
     * 
    **/
    where?: PromocionDetalleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PromocionDetalles to fetch.
     * 
    **/
    orderBy?: Enumerable<PromocionDetalleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PromocionDetalles.
     * 
    **/
    cursor?: PromocionDetalleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PromocionDetalles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PromocionDetalles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<PromocionDetalleScalarFieldEnum>
  }


  /**
   * PromocionDetalle create
   */
  export type PromocionDetalleCreateArgs = {
    /**
     * Select specific fields to fetch from the PromocionDetalle
     * 
    **/
    select?: PromocionDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionDetalleInclude | null
    /**
     * The data needed to create a PromocionDetalle.
     * 
    **/
    data: XOR<PromocionDetalleCreateInput, PromocionDetalleUncheckedCreateInput>
  }


  /**
   * PromocionDetalle createMany
   */
  export type PromocionDetalleCreateManyArgs = {
    /**
     * The data used to create many PromocionDetalles.
     * 
    **/
    data: Enumerable<PromocionDetalleCreateManyInput>
  }


  /**
   * PromocionDetalle update
   */
  export type PromocionDetalleUpdateArgs = {
    /**
     * Select specific fields to fetch from the PromocionDetalle
     * 
    **/
    select?: PromocionDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionDetalleInclude | null
    /**
     * The data needed to update a PromocionDetalle.
     * 
    **/
    data: XOR<PromocionDetalleUpdateInput, PromocionDetalleUncheckedUpdateInput>
    /**
     * Choose, which PromocionDetalle to update.
     * 
    **/
    where: PromocionDetalleWhereUniqueInput
  }


  /**
   * PromocionDetalle updateMany
   */
  export type PromocionDetalleUpdateManyArgs = {
    /**
     * The data used to update PromocionDetalles.
     * 
    **/
    data: XOR<PromocionDetalleUpdateManyMutationInput, PromocionDetalleUncheckedUpdateManyInput>
    /**
     * Filter which PromocionDetalles to update
     * 
    **/
    where?: PromocionDetalleWhereInput
  }


  /**
   * PromocionDetalle upsert
   */
  export type PromocionDetalleUpsertArgs = {
    /**
     * Select specific fields to fetch from the PromocionDetalle
     * 
    **/
    select?: PromocionDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionDetalleInclude | null
    /**
     * The filter to search for the PromocionDetalle to update in case it exists.
     * 
    **/
    where: PromocionDetalleWhereUniqueInput
    /**
     * In case the PromocionDetalle found by the `where` argument doesn't exist, create a new PromocionDetalle with this data.
     * 
    **/
    create: XOR<PromocionDetalleCreateInput, PromocionDetalleUncheckedCreateInput>
    /**
     * In case the PromocionDetalle was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<PromocionDetalleUpdateInput, PromocionDetalleUncheckedUpdateInput>
  }


  /**
   * PromocionDetalle delete
   */
  export type PromocionDetalleDeleteArgs = {
    /**
     * Select specific fields to fetch from the PromocionDetalle
     * 
    **/
    select?: PromocionDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionDetalleInclude | null
    /**
     * Filter which PromocionDetalle to delete.
     * 
    **/
    where: PromocionDetalleWhereUniqueInput
  }


  /**
   * PromocionDetalle deleteMany
   */
  export type PromocionDetalleDeleteManyArgs = {
    /**
     * Filter which PromocionDetalles to delete
     * 
    **/
    where?: PromocionDetalleWhereInput
  }


  /**
   * PromocionDetalle findRaw
   */
  export type PromocionDetalleFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * PromocionDetalle aggregateRaw
   */
  export type PromocionDetalleAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * PromocionDetalle: findUniqueOrThrow
   */
  export type PromocionDetalleFindUniqueOrThrowArgs = PromocionDetalleFindUniqueArgsBase
      

  /**
   * PromocionDetalle: findFirstOrThrow
   */
  export type PromocionDetalleFindFirstOrThrowArgs = PromocionDetalleFindFirstArgsBase
      

  /**
   * PromocionDetalle without action
   */
  export type PromocionDetalleArgs = {
    /**
     * Select specific fields to fetch from the PromocionDetalle
     * 
    **/
    select?: PromocionDetalleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: PromocionDetalleInclude | null
  }



  /**
   * Model Empresa
   */


  export type AggregateEmpresa = {
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  export type EmpresaAvgAggregateOutputType = {
    orden: number | null
  }

  export type EmpresaSumAggregateOutputType = {
    orden: number | null
  }

  export type EmpresaMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    link: string | null
    imagen: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EmpresaMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    link: string | null
    imagen: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type EmpresaCountAggregateOutputType = {
    id: number
    nombre: number
    link: number
    imagen: number
    estado: number
    orden: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type EmpresaAvgAggregateInputType = {
    orden?: true
  }

  export type EmpresaSumAggregateInputType = {
    orden?: true
  }

  export type EmpresaMinAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type EmpresaMaxAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type EmpresaCountAggregateInputType = {
    id?: true
    nombre?: true
    link?: true
    imagen?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type EmpresaAggregateArgs = {
    /**
     * Filter which Empresa to aggregate.
     * 
    **/
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     * 
    **/
    orderBy?: Enumerable<EmpresaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Empresas
    **/
    _count?: true | EmpresaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmpresaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmpresaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmpresaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmpresaMaxAggregateInputType
  }

  export type GetEmpresaAggregateType<T extends EmpresaAggregateArgs> = {
        [P in keyof T & keyof AggregateEmpresa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmpresa[P]>
      : GetScalarType<T[P], AggregateEmpresa[P]>
  }




  export type EmpresaGroupByArgs = {
    where?: EmpresaWhereInput
    orderBy?: Enumerable<EmpresaOrderByWithAggregationInput>
    by: Array<EmpresaScalarFieldEnum>
    having?: EmpresaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmpresaCountAggregateInputType | true
    _avg?: EmpresaAvgAggregateInputType
    _sum?: EmpresaSumAggregateInputType
    _min?: EmpresaMinAggregateInputType
    _max?: EmpresaMaxAggregateInputType
  }


  export type EmpresaGroupByOutputType = {
    id: string
    nombre: string
    link: string
    imagen: string
    estado: boolean
    orden: number
    created_at: Date
    updated_at: Date
    _count: EmpresaCountAggregateOutputType | null
    _avg: EmpresaAvgAggregateOutputType | null
    _sum: EmpresaSumAggregateOutputType | null
    _min: EmpresaMinAggregateOutputType | null
    _max: EmpresaMaxAggregateOutputType | null
  }

  type GetEmpresaGroupByPayload<T extends EmpresaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EmpresaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmpresaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
            : GetScalarType<T[P], EmpresaGroupByOutputType[P]>
        }
      >
    >


  export type EmpresaSelect = {
    id?: boolean
    nombre?: boolean
    link?: boolean
    imagen?: boolean
    estado?: boolean
    orden?: boolean
    empresa?: boolean | PromocionArgs
    empresaUsuario?: boolean | UsuarioFindManyArgs
    created_at?: boolean
    updated_at?: boolean
    _count?: boolean | EmpresaCountOutputTypeArgs
  }

  export type EmpresaInclude = {
    empresa?: boolean | PromocionArgs
    empresaUsuario?: boolean | UsuarioFindManyArgs
    _count?: boolean | EmpresaCountOutputTypeArgs
  }

  export type EmpresaGetPayload<
    S extends boolean | null | undefined | EmpresaArgs,
    U = keyof S
      > = S extends true
        ? Empresa
    : S extends undefined
    ? never
    : S extends EmpresaArgs | EmpresaFindManyArgs
    ?'include' extends U
    ? Empresa  & {
    [P in TrueKeys<S['include']>]:
        P extends 'empresa' ? PromocionGetPayload<Exclude<S['include'], undefined | null>[P]> | null :
        P extends 'empresaUsuario' ? Array < UsuarioGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? EmpresaCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'empresa' ? PromocionGetPayload<Exclude<S['select'], undefined | null>[P]> | null :
        P extends 'empresaUsuario' ? Array < UsuarioGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? EmpresaCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Empresa ? Empresa[P] : never
  } 
    : Empresa
  : Empresa


  type EmpresaCountArgs = Merge<
    Omit<EmpresaFindManyArgs, 'select' | 'include'> & {
      select?: EmpresaCountAggregateInputType | true
    }
  >

  export interface EmpresaDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Empresa that matches the filter.
     * @param {EmpresaFindUniqueArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmpresaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmpresaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Empresa'> extends True ? CheckSelect<T, Prisma__EmpresaClient<Empresa>, Prisma__EmpresaClient<EmpresaGetPayload<T>>> : CheckSelect<T, Prisma__EmpresaClient<Empresa | null, null>, Prisma__EmpresaClient<EmpresaGetPayload<T> | null, null>>

    /**
     * Find the first Empresa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmpresaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmpresaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Empresa'> extends True ? CheckSelect<T, Prisma__EmpresaClient<Empresa>, Prisma__EmpresaClient<EmpresaGetPayload<T>>> : CheckSelect<T, Prisma__EmpresaClient<Empresa | null, null>, Prisma__EmpresaClient<EmpresaGetPayload<T> | null, null>>

    /**
     * Find zero or more Empresas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Empresas
     * const empresas = await prisma.empresa.findMany()
     * 
     * // Get first 10 Empresas
     * const empresas = await prisma.empresa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const empresaWithIdOnly = await prisma.empresa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmpresaFindManyArgs>(
      args?: SelectSubset<T, EmpresaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Empresa>>, PrismaPromise<Array<EmpresaGetPayload<T>>>>

    /**
     * Create a Empresa.
     * @param {EmpresaCreateArgs} args - Arguments to create a Empresa.
     * @example
     * // Create one Empresa
     * const Empresa = await prisma.empresa.create({
     *   data: {
     *     // ... data to create a Empresa
     *   }
     * })
     * 
    **/
    create<T extends EmpresaCreateArgs>(
      args: SelectSubset<T, EmpresaCreateArgs>
    ): CheckSelect<T, Prisma__EmpresaClient<Empresa>, Prisma__EmpresaClient<EmpresaGetPayload<T>>>

    /**
     * Create many Empresas.
     *     @param {EmpresaCreateManyArgs} args - Arguments to create many Empresas.
     *     @example
     *     // Create many Empresas
     *     const empresa = await prisma.empresa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EmpresaCreateManyArgs>(
      args?: SelectSubset<T, EmpresaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Empresa.
     * @param {EmpresaDeleteArgs} args - Arguments to delete one Empresa.
     * @example
     * // Delete one Empresa
     * const Empresa = await prisma.empresa.delete({
     *   where: {
     *     // ... filter to delete one Empresa
     *   }
     * })
     * 
    **/
    delete<T extends EmpresaDeleteArgs>(
      args: SelectSubset<T, EmpresaDeleteArgs>
    ): CheckSelect<T, Prisma__EmpresaClient<Empresa>, Prisma__EmpresaClient<EmpresaGetPayload<T>>>

    /**
     * Update one Empresa.
     * @param {EmpresaUpdateArgs} args - Arguments to update one Empresa.
     * @example
     * // Update one Empresa
     * const empresa = await prisma.empresa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmpresaUpdateArgs>(
      args: SelectSubset<T, EmpresaUpdateArgs>
    ): CheckSelect<T, Prisma__EmpresaClient<Empresa>, Prisma__EmpresaClient<EmpresaGetPayload<T>>>

    /**
     * Delete zero or more Empresas.
     * @param {EmpresaDeleteManyArgs} args - Arguments to filter Empresas to delete.
     * @example
     * // Delete a few Empresas
     * const { count } = await prisma.empresa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmpresaDeleteManyArgs>(
      args?: SelectSubset<T, EmpresaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Empresas
     * const empresa = await prisma.empresa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmpresaUpdateManyArgs>(
      args: SelectSubset<T, EmpresaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Empresa.
     * @param {EmpresaUpsertArgs} args - Arguments to update or create a Empresa.
     * @example
     * // Update or create a Empresa
     * const empresa = await prisma.empresa.upsert({
     *   create: {
     *     // ... data to create a Empresa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Empresa we want to update
     *   }
     * })
    **/
    upsert<T extends EmpresaUpsertArgs>(
      args: SelectSubset<T, EmpresaUpsertArgs>
    ): CheckSelect<T, Prisma__EmpresaClient<Empresa>, Prisma__EmpresaClient<EmpresaGetPayload<T>>>

    /**
     * Find zero or more Empresas that matches the filter.
     * @param {EmpresaFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const empresa = await prisma.empresa.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: EmpresaFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Empresa.
     * @param {EmpresaAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const empresa = await prisma.empresa.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: EmpresaAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Empresa that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {EmpresaFindUniqueOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EmpresaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EmpresaFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__EmpresaClient<Empresa>, Prisma__EmpresaClient<EmpresaGetPayload<T>>>

    /**
     * Find the first Empresa that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaFindFirstOrThrowArgs} args - Arguments to find a Empresa
     * @example
     * // Get one Empresa
     * const empresa = await prisma.empresa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EmpresaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EmpresaFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__EmpresaClient<Empresa>, Prisma__EmpresaClient<EmpresaGetPayload<T>>>

    /**
     * Count the number of Empresas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaCountArgs} args - Arguments to filter Empresas to count.
     * @example
     * // Count the number of Empresas
     * const count = await prisma.empresa.count({
     *   where: {
     *     // ... the filter for the Empresas we want to count
     *   }
     * })
    **/
    count<T extends EmpresaCountArgs>(
      args?: Subset<T, EmpresaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmpresaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmpresaAggregateArgs>(args: Subset<T, EmpresaAggregateArgs>): PrismaPromise<GetEmpresaAggregateType<T>>

    /**
     * Group by Empresa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmpresaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmpresaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmpresaGroupByArgs['orderBy'] }
        : { orderBy?: EmpresaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmpresaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmpresaGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Empresa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmpresaClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    empresa<T extends PromocionArgs = {}>(args?: Subset<T, PromocionArgs>): CheckSelect<T, Prisma__PromocionClient<Promocion | Null>, Prisma__PromocionClient<PromocionGetPayload<T> | Null>>;

    empresaUsuario<T extends UsuarioFindManyArgs = {}>(args?: Subset<T, UsuarioFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Usuario>| Null>, PrismaPromise<Array<UsuarioGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Empresa base type for findUnique actions
   */
  export type EmpresaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Empresa
     * 
    **/
    select?: EmpresaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresaInclude | null
    /**
     * Filter, which Empresa to fetch.
     * 
    **/
    where: EmpresaWhereUniqueInput
  }

  /**
   * Empresa: findUnique
   */
  export interface EmpresaFindUniqueArgs extends EmpresaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Empresa base type for findFirst actions
   */
  export type EmpresaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Empresa
     * 
    **/
    select?: EmpresaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresaInclude | null
    /**
     * Filter, which Empresa to fetch.
     * 
    **/
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     * 
    **/
    orderBy?: Enumerable<EmpresaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Empresas.
     * 
    **/
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Empresas.
     * 
    **/
    distinct?: Enumerable<EmpresaScalarFieldEnum>
  }

  /**
   * Empresa: findFirst
   */
  export interface EmpresaFindFirstArgs extends EmpresaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Empresa findMany
   */
  export type EmpresaFindManyArgs = {
    /**
     * Select specific fields to fetch from the Empresa
     * 
    **/
    select?: EmpresaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresaInclude | null
    /**
     * Filter, which Empresas to fetch.
     * 
    **/
    where?: EmpresaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Empresas to fetch.
     * 
    **/
    orderBy?: Enumerable<EmpresaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Empresas.
     * 
    **/
    cursor?: EmpresaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Empresas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Empresas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EmpresaScalarFieldEnum>
  }


  /**
   * Empresa create
   */
  export type EmpresaCreateArgs = {
    /**
     * Select specific fields to fetch from the Empresa
     * 
    **/
    select?: EmpresaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresaInclude | null
    /**
     * The data needed to create a Empresa.
     * 
    **/
    data: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
  }


  /**
   * Empresa createMany
   */
  export type EmpresaCreateManyArgs = {
    /**
     * The data used to create many Empresas.
     * 
    **/
    data: Enumerable<EmpresaCreateManyInput>
  }


  /**
   * Empresa update
   */
  export type EmpresaUpdateArgs = {
    /**
     * Select specific fields to fetch from the Empresa
     * 
    **/
    select?: EmpresaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresaInclude | null
    /**
     * The data needed to update a Empresa.
     * 
    **/
    data: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
    /**
     * Choose, which Empresa to update.
     * 
    **/
    where: EmpresaWhereUniqueInput
  }


  /**
   * Empresa updateMany
   */
  export type EmpresaUpdateManyArgs = {
    /**
     * The data used to update Empresas.
     * 
    **/
    data: XOR<EmpresaUpdateManyMutationInput, EmpresaUncheckedUpdateManyInput>
    /**
     * Filter which Empresas to update
     * 
    **/
    where?: EmpresaWhereInput
  }


  /**
   * Empresa upsert
   */
  export type EmpresaUpsertArgs = {
    /**
     * Select specific fields to fetch from the Empresa
     * 
    **/
    select?: EmpresaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresaInclude | null
    /**
     * The filter to search for the Empresa to update in case it exists.
     * 
    **/
    where: EmpresaWhereUniqueInput
    /**
     * In case the Empresa found by the `where` argument doesn't exist, create a new Empresa with this data.
     * 
    **/
    create: XOR<EmpresaCreateInput, EmpresaUncheckedCreateInput>
    /**
     * In case the Empresa was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EmpresaUpdateInput, EmpresaUncheckedUpdateInput>
  }


  /**
   * Empresa delete
   */
  export type EmpresaDeleteArgs = {
    /**
     * Select specific fields to fetch from the Empresa
     * 
    **/
    select?: EmpresaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresaInclude | null
    /**
     * Filter which Empresa to delete.
     * 
    **/
    where: EmpresaWhereUniqueInput
  }


  /**
   * Empresa deleteMany
   */
  export type EmpresaDeleteManyArgs = {
    /**
     * Filter which Empresas to delete
     * 
    **/
    where?: EmpresaWhereInput
  }


  /**
   * Empresa findRaw
   */
  export type EmpresaFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Empresa aggregateRaw
   */
  export type EmpresaAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Empresa: findUniqueOrThrow
   */
  export type EmpresaFindUniqueOrThrowArgs = EmpresaFindUniqueArgsBase
      

  /**
   * Empresa: findFirstOrThrow
   */
  export type EmpresaFindFirstOrThrowArgs = EmpresaFindFirstArgsBase
      

  /**
   * Empresa without action
   */
  export type EmpresaArgs = {
    /**
     * Select specific fields to fetch from the Empresa
     * 
    **/
    select?: EmpresaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmpresaInclude | null
  }



  /**
   * Model Usuario
   */


  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioMinAggregateOutputType = {
    id: string | null
    cedula: string | null
    codigo: string | null
    nombre: string | null
    estado: boolean | null
    telefono: string | null
    email: string | null
    empresaId: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsuarioMaxAggregateOutputType = {
    id: string | null
    cedula: string | null
    codigo: string | null
    nombre: string | null
    estado: boolean | null
    telefono: string | null
    email: string | null
    empresaId: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsuarioCountAggregateOutputType = {
    id: number
    cedula: number
    codigo: number
    nombre: number
    estado: number
    telefono: number
    email: number
    empresaId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsuarioMinAggregateInputType = {
    id?: true
    cedula?: true
    codigo?: true
    nombre?: true
    estado?: true
    telefono?: true
    email?: true
    empresaId?: true
    created_at?: true
    updated_at?: true
  }

  export type UsuarioMaxAggregateInputType = {
    id?: true
    cedula?: true
    codigo?: true
    nombre?: true
    estado?: true
    telefono?: true
    email?: true
    empresaId?: true
    created_at?: true
    updated_at?: true
  }

  export type UsuarioCountAggregateInputType = {
    id?: true
    cedula?: true
    codigo?: true
    nombre?: true
    estado?: true
    telefono?: true
    email?: true
    empresaId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsuarioAggregateArgs = {
    /**
     * Filter which Usuario to aggregate.
     * 
    **/
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs = {
    where?: UsuarioWhereInput
    orderBy?: Enumerable<UsuarioOrderByWithAggregationInput>
    by: Array<UsuarioScalarFieldEnum>
    having?: UsuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }


  export type UsuarioGroupByOutputType = {
    id: string
    cedula: string | null
    codigo: string | null
    nombre: string
    estado: boolean
    telefono: string | null
    email: string | null
    empresaId: string
    created_at: Date | null
    updated_at: Date | null
    _count: UsuarioCountAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type UsuarioSelect = {
    id?: boolean
    cedula?: boolean
    codigo?: boolean
    nombre?: boolean
    estado?: boolean
    telefono?: boolean
    email?: boolean
    empresaUsuario?: boolean | EmpresaArgs
    empresaId?: boolean
    usuarios?: boolean | VoucherFindManyArgs
    created_at?: boolean
    updated_at?: boolean
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type UsuarioInclude = {
    empresaUsuario?: boolean | EmpresaArgs
    usuarios?: boolean | VoucherFindManyArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type UsuarioGetPayload<
    S extends boolean | null | undefined | UsuarioArgs,
    U = keyof S
      > = S extends true
        ? Usuario
    : S extends undefined
    ? never
    : S extends UsuarioArgs | UsuarioFindManyArgs
    ?'include' extends U
    ? Usuario  & {
    [P in TrueKeys<S['include']>]:
        P extends 'empresaUsuario' ? EmpresaGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'usuarios' ? Array < VoucherGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'empresaUsuario' ? EmpresaGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'usuarios' ? Array < VoucherGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Usuario ? Usuario[P] : never
  } 
    : Usuario
  : Usuario


  type UsuarioCountArgs = Merge<
    Omit<UsuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }
  >

  export interface UsuarioDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {UsuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UsuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UsuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Usuario'> extends True ? CheckSelect<T, Prisma__UsuarioClient<Usuario>, Prisma__UsuarioClient<UsuarioGetPayload<T>>> : CheckSelect<T, Prisma__UsuarioClient<Usuario | null, null>, Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UsuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UsuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Usuario'> extends True ? CheckSelect<T, Prisma__UsuarioClient<Usuario>, Prisma__UsuarioClient<UsuarioGetPayload<T>>> : CheckSelect<T, Prisma__UsuarioClient<Usuario | null, null>, Prisma__UsuarioClient<UsuarioGetPayload<T> | null, null>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuarioWithIdOnly = await prisma.usuario.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UsuarioFindManyArgs>(
      args?: SelectSubset<T, UsuarioFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Usuario>>, PrismaPromise<Array<UsuarioGetPayload<T>>>>

    /**
     * Create a Usuario.
     * @param {UsuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends UsuarioCreateArgs>(
      args: SelectSubset<T, UsuarioCreateArgs>
    ): CheckSelect<T, Prisma__UsuarioClient<Usuario>, Prisma__UsuarioClient<UsuarioGetPayload<T>>>

    /**
     * Create many Usuarios.
     *     @param {UsuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UsuarioCreateManyArgs>(
      args?: SelectSubset<T, UsuarioCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {UsuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends UsuarioDeleteArgs>(
      args: SelectSubset<T, UsuarioDeleteArgs>
    ): CheckSelect<T, Prisma__UsuarioClient<Usuario>, Prisma__UsuarioClient<UsuarioGetPayload<T>>>

    /**
     * Update one Usuario.
     * @param {UsuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UsuarioUpdateArgs>(
      args: SelectSubset<T, UsuarioUpdateArgs>
    ): CheckSelect<T, Prisma__UsuarioClient<Usuario>, Prisma__UsuarioClient<UsuarioGetPayload<T>>>

    /**
     * Delete zero or more Usuarios.
     * @param {UsuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UsuarioDeleteManyArgs>(
      args?: SelectSubset<T, UsuarioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UsuarioUpdateManyArgs>(
      args: SelectSubset<T, UsuarioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {UsuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends UsuarioUpsertArgs>(
      args: SelectSubset<T, UsuarioUpsertArgs>
    ): CheckSelect<T, Prisma__UsuarioClient<Usuario>, Prisma__UsuarioClient<UsuarioGetPayload<T>>>

    /**
     * Find zero or more Usuarios that matches the filter.
     * @param {UsuarioFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const usuario = await prisma.usuario.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: UsuarioFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Usuario.
     * @param {UsuarioAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const usuario = await prisma.usuario.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: UsuarioAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Usuario that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {UsuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UsuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__UsuarioClient<Usuario>, Prisma__UsuarioClient<UsuarioGetPayload<T>>>

    /**
     * Find the first Usuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UsuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UsuarioFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__UsuarioClient<Usuario>, Prisma__UsuarioClient<UsuarioGetPayload<T>>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends UsuarioCountArgs>(
      args?: Subset<T, UsuarioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UsuarioClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    empresaUsuario<T extends EmpresaArgs = {}>(args?: Subset<T, EmpresaArgs>): CheckSelect<T, Prisma__EmpresaClient<Empresa | Null>, Prisma__EmpresaClient<EmpresaGetPayload<T> | Null>>;

    usuarios<T extends VoucherFindManyArgs = {}>(args?: Subset<T, VoucherFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Voucher>| Null>, PrismaPromise<Array<VoucherGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Usuario base type for findUnique actions
   */
  export type UsuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     * 
    **/
    where: UsuarioWhereUniqueInput
  }

  /**
   * Usuario: findUnique
   */
  export interface UsuarioFindUniqueArgs extends UsuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario base type for findFirst actions
   */
  export type UsuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuario to fetch.
     * 
    **/
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Usuarios.
     * 
    **/
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Usuarios.
     * 
    **/
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }

  /**
   * Usuario: findFirst
   */
  export interface UsuarioFindFirstArgs extends UsuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Usuario findMany
   */
  export type UsuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter, which Usuarios to fetch.
     * 
    **/
    where?: UsuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<UsuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Usuarios.
     * 
    **/
    cursor?: UsuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Usuarios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * Usuario create
   */
  export type UsuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * The data needed to create a Usuario.
     * 
    **/
    data: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
  }


  /**
   * Usuario createMany
   */
  export type UsuarioCreateManyArgs = {
    /**
     * The data used to create many Usuarios.
     * 
    **/
    data: Enumerable<UsuarioCreateManyInput>
  }


  /**
   * Usuario update
   */
  export type UsuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * The data needed to update a Usuario.
     * 
    **/
    data: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
    /**
     * Choose, which Usuario to update.
     * 
    **/
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario updateMany
   */
  export type UsuarioUpdateManyArgs = {
    /**
     * The data used to update Usuarios.
     * 
    **/
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyInput>
    /**
     * Filter which Usuarios to update
     * 
    **/
    where?: UsuarioWhereInput
  }


  /**
   * Usuario upsert
   */
  export type UsuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * The filter to search for the Usuario to update in case it exists.
     * 
    **/
    where: UsuarioWhereUniqueInput
    /**
     * In case the Usuario found by the `where` argument doesn't exist, create a new Usuario with this data.
     * 
    **/
    create: XOR<UsuarioCreateInput, UsuarioUncheckedCreateInput>
    /**
     * In case the Usuario was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UsuarioUpdateInput, UsuarioUncheckedUpdateInput>
  }


  /**
   * Usuario delete
   */
  export type UsuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
    /**
     * Filter which Usuario to delete.
     * 
    **/
    where: UsuarioWhereUniqueInput
  }


  /**
   * Usuario deleteMany
   */
  export type UsuarioDeleteManyArgs = {
    /**
     * Filter which Usuarios to delete
     * 
    **/
    where?: UsuarioWhereInput
  }


  /**
   * Usuario findRaw
   */
  export type UsuarioFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Usuario aggregateRaw
   */
  export type UsuarioAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Usuario: findUniqueOrThrow
   */
  export type UsuarioFindUniqueOrThrowArgs = UsuarioFindUniqueArgsBase
      

  /**
   * Usuario: findFirstOrThrow
   */
  export type UsuarioFindFirstOrThrowArgs = UsuarioFindFirstArgsBase
      

  /**
   * Usuario without action
   */
  export type UsuarioArgs = {
    /**
     * Select specific fields to fetch from the Usuario
     * 
    **/
    select?: UsuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UsuarioInclude | null
  }



  /**
   * Model Voucher
   */


  export type AggregateVoucher = {
    _count: VoucherCountAggregateOutputType | null
    _avg: VoucherAvgAggregateOutputType | null
    _sum: VoucherSumAggregateOutputType | null
    _min: VoucherMinAggregateOutputType | null
    _max: VoucherMaxAggregateOutputType | null
  }

  export type VoucherAvgAggregateOutputType = {
    codigo: number | null
    cantidad: number | null
  }

  export type VoucherSumAggregateOutputType = {
    codigo: number | null
    cantidad: number | null
  }

  export type VoucherMinAggregateOutputType = {
    id: string | null
    codigo: number | null
    fecha: Date | null
    canjeado: boolean | null
    canjeadoFecha: Date | null
    promocionId: string | null
    productoId: string | null
    cantidad: number | null
    usuarioId: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type VoucherMaxAggregateOutputType = {
    id: string | null
    codigo: number | null
    fecha: Date | null
    canjeado: boolean | null
    canjeadoFecha: Date | null
    promocionId: string | null
    productoId: string | null
    cantidad: number | null
    usuarioId: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type VoucherCountAggregateOutputType = {
    id: number
    codigo: number
    fecha: number
    canjeado: number
    canjeadoFecha: number
    promocionId: number
    productoId: number
    cantidad: number
    usuarioId: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type VoucherAvgAggregateInputType = {
    codigo?: true
    cantidad?: true
  }

  export type VoucherSumAggregateInputType = {
    codigo?: true
    cantidad?: true
  }

  export type VoucherMinAggregateInputType = {
    id?: true
    codigo?: true
    fecha?: true
    canjeado?: true
    canjeadoFecha?: true
    promocionId?: true
    productoId?: true
    cantidad?: true
    usuarioId?: true
    created_at?: true
    updated_at?: true
  }

  export type VoucherMaxAggregateInputType = {
    id?: true
    codigo?: true
    fecha?: true
    canjeado?: true
    canjeadoFecha?: true
    promocionId?: true
    productoId?: true
    cantidad?: true
    usuarioId?: true
    created_at?: true
    updated_at?: true
  }

  export type VoucherCountAggregateInputType = {
    id?: true
    codigo?: true
    fecha?: true
    canjeado?: true
    canjeadoFecha?: true
    promocionId?: true
    productoId?: true
    cantidad?: true
    usuarioId?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type VoucherAggregateArgs = {
    /**
     * Filter which Voucher to aggregate.
     * 
    **/
    where?: VoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vouchers to fetch.
     * 
    **/
    orderBy?: Enumerable<VoucherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: VoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vouchers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vouchers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Vouchers
    **/
    _count?: true | VoucherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VoucherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VoucherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VoucherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VoucherMaxAggregateInputType
  }

  export type GetVoucherAggregateType<T extends VoucherAggregateArgs> = {
        [P in keyof T & keyof AggregateVoucher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVoucher[P]>
      : GetScalarType<T[P], AggregateVoucher[P]>
  }




  export type VoucherGroupByArgs = {
    where?: VoucherWhereInput
    orderBy?: Enumerable<VoucherOrderByWithAggregationInput>
    by: Array<VoucherScalarFieldEnum>
    having?: VoucherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VoucherCountAggregateInputType | true
    _avg?: VoucherAvgAggregateInputType
    _sum?: VoucherSumAggregateInputType
    _min?: VoucherMinAggregateInputType
    _max?: VoucherMaxAggregateInputType
  }


  export type VoucherGroupByOutputType = {
    id: string
    codigo: number
    fecha: Date
    canjeado: boolean
    canjeadoFecha: Date | null
    promocionId: string
    productoId: string
    cantidad: number
    usuarioId: string
    created_at: Date
    updated_at: Date
    _count: VoucherCountAggregateOutputType | null
    _avg: VoucherAvgAggregateOutputType | null
    _sum: VoucherSumAggregateOutputType | null
    _min: VoucherMinAggregateOutputType | null
    _max: VoucherMaxAggregateOutputType | null
  }

  type GetVoucherGroupByPayload<T extends VoucherGroupByArgs> = PrismaPromise<
    Array<
      PickArray<VoucherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VoucherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VoucherGroupByOutputType[P]>
            : GetScalarType<T[P], VoucherGroupByOutputType[P]>
        }
      >
    >


  export type VoucherSelect = {
    id?: boolean
    codigo?: boolean
    fecha?: boolean
    canjeado?: boolean
    canjeadoFecha?: boolean
    promocionVoucher?: boolean | PromocionArgs
    promocionId?: boolean
    promocionProducto?: boolean | ProductoArgs
    productoId?: boolean
    cantidad?: boolean
    usuario?: boolean | UsuarioArgs
    usuarioId?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type VoucherInclude = {
    promocionVoucher?: boolean | PromocionArgs
    promocionProducto?: boolean | ProductoArgs
    usuario?: boolean | UsuarioArgs
  }

  export type VoucherGetPayload<
    S extends boolean | null | undefined | VoucherArgs,
    U = keyof S
      > = S extends true
        ? Voucher
    : S extends undefined
    ? never
    : S extends VoucherArgs | VoucherFindManyArgs
    ?'include' extends U
    ? Voucher  & {
    [P in TrueKeys<S['include']>]:
        P extends 'promocionVoucher' ? PromocionGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'promocionProducto' ? ProductoGetPayload<Exclude<S['include'], undefined | null>[P]> :
        P extends 'usuario' ? UsuarioGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'promocionVoucher' ? PromocionGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'promocionProducto' ? ProductoGetPayload<Exclude<S['select'], undefined | null>[P]> :
        P extends 'usuario' ? UsuarioGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Voucher ? Voucher[P] : never
  } 
    : Voucher
  : Voucher


  type VoucherCountArgs = Merge<
    Omit<VoucherFindManyArgs, 'select' | 'include'> & {
      select?: VoucherCountAggregateInputType | true
    }
  >

  export interface VoucherDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Voucher that matches the filter.
     * @param {VoucherFindUniqueArgs} args - Arguments to find a Voucher
     * @example
     * // Get one Voucher
     * const voucher = await prisma.voucher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VoucherFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VoucherFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Voucher'> extends True ? CheckSelect<T, Prisma__VoucherClient<Voucher>, Prisma__VoucherClient<VoucherGetPayload<T>>> : CheckSelect<T, Prisma__VoucherClient<Voucher | null, null>, Prisma__VoucherClient<VoucherGetPayload<T> | null, null>>

    /**
     * Find the first Voucher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherFindFirstArgs} args - Arguments to find a Voucher
     * @example
     * // Get one Voucher
     * const voucher = await prisma.voucher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VoucherFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VoucherFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Voucher'> extends True ? CheckSelect<T, Prisma__VoucherClient<Voucher>, Prisma__VoucherClient<VoucherGetPayload<T>>> : CheckSelect<T, Prisma__VoucherClient<Voucher | null, null>, Prisma__VoucherClient<VoucherGetPayload<T> | null, null>>

    /**
     * Find zero or more Vouchers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Vouchers
     * const vouchers = await prisma.voucher.findMany()
     * 
     * // Get first 10 Vouchers
     * const vouchers = await prisma.voucher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const voucherWithIdOnly = await prisma.voucher.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VoucherFindManyArgs>(
      args?: SelectSubset<T, VoucherFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Voucher>>, PrismaPromise<Array<VoucherGetPayload<T>>>>

    /**
     * Create a Voucher.
     * @param {VoucherCreateArgs} args - Arguments to create a Voucher.
     * @example
     * // Create one Voucher
     * const Voucher = await prisma.voucher.create({
     *   data: {
     *     // ... data to create a Voucher
     *   }
     * })
     * 
    **/
    create<T extends VoucherCreateArgs>(
      args: SelectSubset<T, VoucherCreateArgs>
    ): CheckSelect<T, Prisma__VoucherClient<Voucher>, Prisma__VoucherClient<VoucherGetPayload<T>>>

    /**
     * Create many Vouchers.
     *     @param {VoucherCreateManyArgs} args - Arguments to create many Vouchers.
     *     @example
     *     // Create many Vouchers
     *     const voucher = await prisma.voucher.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VoucherCreateManyArgs>(
      args?: SelectSubset<T, VoucherCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Voucher.
     * @param {VoucherDeleteArgs} args - Arguments to delete one Voucher.
     * @example
     * // Delete one Voucher
     * const Voucher = await prisma.voucher.delete({
     *   where: {
     *     // ... filter to delete one Voucher
     *   }
     * })
     * 
    **/
    delete<T extends VoucherDeleteArgs>(
      args: SelectSubset<T, VoucherDeleteArgs>
    ): CheckSelect<T, Prisma__VoucherClient<Voucher>, Prisma__VoucherClient<VoucherGetPayload<T>>>

    /**
     * Update one Voucher.
     * @param {VoucherUpdateArgs} args - Arguments to update one Voucher.
     * @example
     * // Update one Voucher
     * const voucher = await prisma.voucher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VoucherUpdateArgs>(
      args: SelectSubset<T, VoucherUpdateArgs>
    ): CheckSelect<T, Prisma__VoucherClient<Voucher>, Prisma__VoucherClient<VoucherGetPayload<T>>>

    /**
     * Delete zero or more Vouchers.
     * @param {VoucherDeleteManyArgs} args - Arguments to filter Vouchers to delete.
     * @example
     * // Delete a few Vouchers
     * const { count } = await prisma.voucher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VoucherDeleteManyArgs>(
      args?: SelectSubset<T, VoucherDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Vouchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Vouchers
     * const voucher = await prisma.voucher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VoucherUpdateManyArgs>(
      args: SelectSubset<T, VoucherUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Voucher.
     * @param {VoucherUpsertArgs} args - Arguments to update or create a Voucher.
     * @example
     * // Update or create a Voucher
     * const voucher = await prisma.voucher.upsert({
     *   create: {
     *     // ... data to create a Voucher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Voucher we want to update
     *   }
     * })
    **/
    upsert<T extends VoucherUpsertArgs>(
      args: SelectSubset<T, VoucherUpsertArgs>
    ): CheckSelect<T, Prisma__VoucherClient<Voucher>, Prisma__VoucherClient<VoucherGetPayload<T>>>

    /**
     * Find zero or more Vouchers that matches the filter.
     * @param {VoucherFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const voucher = await prisma.voucher.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: VoucherFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Voucher.
     * @param {VoucherAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const voucher = await prisma.voucher.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: VoucherAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Voucher that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {VoucherFindUniqueOrThrowArgs} args - Arguments to find a Voucher
     * @example
     * // Get one Voucher
     * const voucher = await prisma.voucher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VoucherFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, VoucherFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__VoucherClient<Voucher>, Prisma__VoucherClient<VoucherGetPayload<T>>>

    /**
     * Find the first Voucher that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherFindFirstOrThrowArgs} args - Arguments to find a Voucher
     * @example
     * // Get one Voucher
     * const voucher = await prisma.voucher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VoucherFindFirstOrThrowArgs>(
      args?: SelectSubset<T, VoucherFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__VoucherClient<Voucher>, Prisma__VoucherClient<VoucherGetPayload<T>>>

    /**
     * Count the number of Vouchers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherCountArgs} args - Arguments to filter Vouchers to count.
     * @example
     * // Count the number of Vouchers
     * const count = await prisma.voucher.count({
     *   where: {
     *     // ... the filter for the Vouchers we want to count
     *   }
     * })
    **/
    count<T extends VoucherCountArgs>(
      args?: Subset<T, VoucherCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VoucherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Voucher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VoucherAggregateArgs>(args: Subset<T, VoucherAggregateArgs>): PrismaPromise<GetVoucherAggregateType<T>>

    /**
     * Group by Voucher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VoucherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VoucherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VoucherGroupByArgs['orderBy'] }
        : { orderBy?: VoucherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VoucherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVoucherGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Voucher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VoucherClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    promocionVoucher<T extends PromocionArgs = {}>(args?: Subset<T, PromocionArgs>): CheckSelect<T, Prisma__PromocionClient<Promocion | Null>, Prisma__PromocionClient<PromocionGetPayload<T> | Null>>;

    promocionProducto<T extends ProductoArgs = {}>(args?: Subset<T, ProductoArgs>): CheckSelect<T, Prisma__ProductoClient<Producto | Null>, Prisma__ProductoClient<ProductoGetPayload<T> | Null>>;

    usuario<T extends UsuarioArgs = {}>(args?: Subset<T, UsuarioArgs>): CheckSelect<T, Prisma__UsuarioClient<Usuario | Null>, Prisma__UsuarioClient<UsuarioGetPayload<T> | Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Voucher base type for findUnique actions
   */
  export type VoucherFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Voucher
     * 
    **/
    select?: VoucherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoucherInclude | null
    /**
     * Filter, which Voucher to fetch.
     * 
    **/
    where: VoucherWhereUniqueInput
  }

  /**
   * Voucher: findUnique
   */
  export interface VoucherFindUniqueArgs extends VoucherFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Voucher base type for findFirst actions
   */
  export type VoucherFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Voucher
     * 
    **/
    select?: VoucherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoucherInclude | null
    /**
     * Filter, which Voucher to fetch.
     * 
    **/
    where?: VoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vouchers to fetch.
     * 
    **/
    orderBy?: Enumerable<VoucherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Vouchers.
     * 
    **/
    cursor?: VoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vouchers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vouchers.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Vouchers.
     * 
    **/
    distinct?: Enumerable<VoucherScalarFieldEnum>
  }

  /**
   * Voucher: findFirst
   */
  export interface VoucherFindFirstArgs extends VoucherFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Voucher findMany
   */
  export type VoucherFindManyArgs = {
    /**
     * Select specific fields to fetch from the Voucher
     * 
    **/
    select?: VoucherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoucherInclude | null
    /**
     * Filter, which Vouchers to fetch.
     * 
    **/
    where?: VoucherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Vouchers to fetch.
     * 
    **/
    orderBy?: Enumerable<VoucherOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Vouchers.
     * 
    **/
    cursor?: VoucherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Vouchers from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Vouchers.
     * 
    **/
    skip?: number
    distinct?: Enumerable<VoucherScalarFieldEnum>
  }


  /**
   * Voucher create
   */
  export type VoucherCreateArgs = {
    /**
     * Select specific fields to fetch from the Voucher
     * 
    **/
    select?: VoucherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoucherInclude | null
    /**
     * The data needed to create a Voucher.
     * 
    **/
    data: XOR<VoucherCreateInput, VoucherUncheckedCreateInput>
  }


  /**
   * Voucher createMany
   */
  export type VoucherCreateManyArgs = {
    /**
     * The data used to create many Vouchers.
     * 
    **/
    data: Enumerable<VoucherCreateManyInput>
  }


  /**
   * Voucher update
   */
  export type VoucherUpdateArgs = {
    /**
     * Select specific fields to fetch from the Voucher
     * 
    **/
    select?: VoucherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoucherInclude | null
    /**
     * The data needed to update a Voucher.
     * 
    **/
    data: XOR<VoucherUpdateInput, VoucherUncheckedUpdateInput>
    /**
     * Choose, which Voucher to update.
     * 
    **/
    where: VoucherWhereUniqueInput
  }


  /**
   * Voucher updateMany
   */
  export type VoucherUpdateManyArgs = {
    /**
     * The data used to update Vouchers.
     * 
    **/
    data: XOR<VoucherUpdateManyMutationInput, VoucherUncheckedUpdateManyInput>
    /**
     * Filter which Vouchers to update
     * 
    **/
    where?: VoucherWhereInput
  }


  /**
   * Voucher upsert
   */
  export type VoucherUpsertArgs = {
    /**
     * Select specific fields to fetch from the Voucher
     * 
    **/
    select?: VoucherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoucherInclude | null
    /**
     * The filter to search for the Voucher to update in case it exists.
     * 
    **/
    where: VoucherWhereUniqueInput
    /**
     * In case the Voucher found by the `where` argument doesn't exist, create a new Voucher with this data.
     * 
    **/
    create: XOR<VoucherCreateInput, VoucherUncheckedCreateInput>
    /**
     * In case the Voucher was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<VoucherUpdateInput, VoucherUncheckedUpdateInput>
  }


  /**
   * Voucher delete
   */
  export type VoucherDeleteArgs = {
    /**
     * Select specific fields to fetch from the Voucher
     * 
    **/
    select?: VoucherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoucherInclude | null
    /**
     * Filter which Voucher to delete.
     * 
    **/
    where: VoucherWhereUniqueInput
  }


  /**
   * Voucher deleteMany
   */
  export type VoucherDeleteManyArgs = {
    /**
     * Filter which Vouchers to delete
     * 
    **/
    where?: VoucherWhereInput
  }


  /**
   * Voucher findRaw
   */
  export type VoucherFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Voucher aggregateRaw
   */
  export type VoucherAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Voucher: findUniqueOrThrow
   */
  export type VoucherFindUniqueOrThrowArgs = VoucherFindUniqueArgsBase
      

  /**
   * Voucher: findFirstOrThrow
   */
  export type VoucherFindFirstOrThrowArgs = VoucherFindFirstArgsBase
      

  /**
   * Voucher without action
   */
  export type VoucherArgs = {
    /**
     * Select specific fields to fetch from the Voucher
     * 
    **/
    select?: VoucherSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: VoucherInclude | null
  }



  /**
   * Model Sequence
   */


  export type AggregateSequence = {
    _count: SequenceCountAggregateOutputType | null
    _avg: SequenceAvgAggregateOutputType | null
    _sum: SequenceSumAggregateOutputType | null
    _min: SequenceMinAggregateOutputType | null
    _max: SequenceMaxAggregateOutputType | null
  }

  export type SequenceAvgAggregateOutputType = {
    seq: number | null
  }

  export type SequenceSumAggregateOutputType = {
    seq: number | null
  }

  export type SequenceMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    seq: number | null
  }

  export type SequenceMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    seq: number | null
  }

  export type SequenceCountAggregateOutputType = {
    id: number
    nombre: number
    seq: number
    _all: number
  }


  export type SequenceAvgAggregateInputType = {
    seq?: true
  }

  export type SequenceSumAggregateInputType = {
    seq?: true
  }

  export type SequenceMinAggregateInputType = {
    id?: true
    nombre?: true
    seq?: true
  }

  export type SequenceMaxAggregateInputType = {
    id?: true
    nombre?: true
    seq?: true
  }

  export type SequenceCountAggregateInputType = {
    id?: true
    nombre?: true
    seq?: true
    _all?: true
  }

  export type SequenceAggregateArgs = {
    /**
     * Filter which Sequence to aggregate.
     * 
    **/
    where?: SequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sequences to fetch.
     * 
    **/
    orderBy?: Enumerable<SequenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sequences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sequences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sequences
    **/
    _count?: true | SequenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SequenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SequenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SequenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SequenceMaxAggregateInputType
  }

  export type GetSequenceAggregateType<T extends SequenceAggregateArgs> = {
        [P in keyof T & keyof AggregateSequence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSequence[P]>
      : GetScalarType<T[P], AggregateSequence[P]>
  }




  export type SequenceGroupByArgs = {
    where?: SequenceWhereInput
    orderBy?: Enumerable<SequenceOrderByWithAggregationInput>
    by: Array<SequenceScalarFieldEnum>
    having?: SequenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SequenceCountAggregateInputType | true
    _avg?: SequenceAvgAggregateInputType
    _sum?: SequenceSumAggregateInputType
    _min?: SequenceMinAggregateInputType
    _max?: SequenceMaxAggregateInputType
  }


  export type SequenceGroupByOutputType = {
    id: string
    nombre: string
    seq: number
    _count: SequenceCountAggregateOutputType | null
    _avg: SequenceAvgAggregateOutputType | null
    _sum: SequenceSumAggregateOutputType | null
    _min: SequenceMinAggregateOutputType | null
    _max: SequenceMaxAggregateOutputType | null
  }

  type GetSequenceGroupByPayload<T extends SequenceGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SequenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SequenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SequenceGroupByOutputType[P]>
            : GetScalarType<T[P], SequenceGroupByOutputType[P]>
        }
      >
    >


  export type SequenceSelect = {
    id?: boolean
    nombre?: boolean
    seq?: boolean
  }

  export type SequenceGetPayload<
    S extends boolean | null | undefined | SequenceArgs,
    U = keyof S
      > = S extends true
        ? Sequence
    : S extends undefined
    ? never
    : S extends SequenceArgs | SequenceFindManyArgs
    ?'include' extends U
    ? Sequence 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Sequence ? Sequence[P] : never
  } 
    : Sequence
  : Sequence


  type SequenceCountArgs = Merge<
    Omit<SequenceFindManyArgs, 'select' | 'include'> & {
      select?: SequenceCountAggregateInputType | true
    }
  >

  export interface SequenceDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Sequence that matches the filter.
     * @param {SequenceFindUniqueArgs} args - Arguments to find a Sequence
     * @example
     * // Get one Sequence
     * const sequence = await prisma.sequence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SequenceFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SequenceFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Sequence'> extends True ? CheckSelect<T, Prisma__SequenceClient<Sequence>, Prisma__SequenceClient<SequenceGetPayload<T>>> : CheckSelect<T, Prisma__SequenceClient<Sequence | null, null>, Prisma__SequenceClient<SequenceGetPayload<T> | null, null>>

    /**
     * Find the first Sequence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceFindFirstArgs} args - Arguments to find a Sequence
     * @example
     * // Get one Sequence
     * const sequence = await prisma.sequence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SequenceFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SequenceFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Sequence'> extends True ? CheckSelect<T, Prisma__SequenceClient<Sequence>, Prisma__SequenceClient<SequenceGetPayload<T>>> : CheckSelect<T, Prisma__SequenceClient<Sequence | null, null>, Prisma__SequenceClient<SequenceGetPayload<T> | null, null>>

    /**
     * Find zero or more Sequences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sequences
     * const sequences = await prisma.sequence.findMany()
     * 
     * // Get first 10 Sequences
     * const sequences = await prisma.sequence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sequenceWithIdOnly = await prisma.sequence.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SequenceFindManyArgs>(
      args?: SelectSubset<T, SequenceFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Sequence>>, PrismaPromise<Array<SequenceGetPayload<T>>>>

    /**
     * Create a Sequence.
     * @param {SequenceCreateArgs} args - Arguments to create a Sequence.
     * @example
     * // Create one Sequence
     * const Sequence = await prisma.sequence.create({
     *   data: {
     *     // ... data to create a Sequence
     *   }
     * })
     * 
    **/
    create<T extends SequenceCreateArgs>(
      args: SelectSubset<T, SequenceCreateArgs>
    ): CheckSelect<T, Prisma__SequenceClient<Sequence>, Prisma__SequenceClient<SequenceGetPayload<T>>>

    /**
     * Create many Sequences.
     *     @param {SequenceCreateManyArgs} args - Arguments to create many Sequences.
     *     @example
     *     // Create many Sequences
     *     const sequence = await prisma.sequence.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SequenceCreateManyArgs>(
      args?: SelectSubset<T, SequenceCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sequence.
     * @param {SequenceDeleteArgs} args - Arguments to delete one Sequence.
     * @example
     * // Delete one Sequence
     * const Sequence = await prisma.sequence.delete({
     *   where: {
     *     // ... filter to delete one Sequence
     *   }
     * })
     * 
    **/
    delete<T extends SequenceDeleteArgs>(
      args: SelectSubset<T, SequenceDeleteArgs>
    ): CheckSelect<T, Prisma__SequenceClient<Sequence>, Prisma__SequenceClient<SequenceGetPayload<T>>>

    /**
     * Update one Sequence.
     * @param {SequenceUpdateArgs} args - Arguments to update one Sequence.
     * @example
     * // Update one Sequence
     * const sequence = await prisma.sequence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SequenceUpdateArgs>(
      args: SelectSubset<T, SequenceUpdateArgs>
    ): CheckSelect<T, Prisma__SequenceClient<Sequence>, Prisma__SequenceClient<SequenceGetPayload<T>>>

    /**
     * Delete zero or more Sequences.
     * @param {SequenceDeleteManyArgs} args - Arguments to filter Sequences to delete.
     * @example
     * // Delete a few Sequences
     * const { count } = await prisma.sequence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SequenceDeleteManyArgs>(
      args?: SelectSubset<T, SequenceDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sequences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sequences
     * const sequence = await prisma.sequence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SequenceUpdateManyArgs>(
      args: SelectSubset<T, SequenceUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sequence.
     * @param {SequenceUpsertArgs} args - Arguments to update or create a Sequence.
     * @example
     * // Update or create a Sequence
     * const sequence = await prisma.sequence.upsert({
     *   create: {
     *     // ... data to create a Sequence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sequence we want to update
     *   }
     * })
    **/
    upsert<T extends SequenceUpsertArgs>(
      args: SelectSubset<T, SequenceUpsertArgs>
    ): CheckSelect<T, Prisma__SequenceClient<Sequence>, Prisma__SequenceClient<SequenceGetPayload<T>>>

    /**
     * Find zero or more Sequences that matches the filter.
     * @param {SequenceFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const sequence = await prisma.sequence.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: SequenceFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Sequence.
     * @param {SequenceAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const sequence = await prisma.sequence.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: SequenceAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Sequence that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {SequenceFindUniqueOrThrowArgs} args - Arguments to find a Sequence
     * @example
     * // Get one Sequence
     * const sequence = await prisma.sequence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SequenceFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, SequenceFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__SequenceClient<Sequence>, Prisma__SequenceClient<SequenceGetPayload<T>>>

    /**
     * Find the first Sequence that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceFindFirstOrThrowArgs} args - Arguments to find a Sequence
     * @example
     * // Get one Sequence
     * const sequence = await prisma.sequence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SequenceFindFirstOrThrowArgs>(
      args?: SelectSubset<T, SequenceFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__SequenceClient<Sequence>, Prisma__SequenceClient<SequenceGetPayload<T>>>

    /**
     * Count the number of Sequences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceCountArgs} args - Arguments to filter Sequences to count.
     * @example
     * // Count the number of Sequences
     * const count = await prisma.sequence.count({
     *   where: {
     *     // ... the filter for the Sequences we want to count
     *   }
     * })
    **/
    count<T extends SequenceCountArgs>(
      args?: Subset<T, SequenceCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SequenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sequence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SequenceAggregateArgs>(args: Subset<T, SequenceAggregateArgs>): PrismaPromise<GetSequenceAggregateType<T>>

    /**
     * Group by Sequence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SequenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SequenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SequenceGroupByArgs['orderBy'] }
        : { orderBy?: SequenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SequenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSequenceGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Sequence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SequenceClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Sequence base type for findUnique actions
   */
  export type SequenceFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Sequence
     * 
    **/
    select?: SequenceSelect | null
    /**
     * Filter, which Sequence to fetch.
     * 
    **/
    where: SequenceWhereUniqueInput
  }

  /**
   * Sequence: findUnique
   */
  export interface SequenceFindUniqueArgs extends SequenceFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sequence base type for findFirst actions
   */
  export type SequenceFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Sequence
     * 
    **/
    select?: SequenceSelect | null
    /**
     * Filter, which Sequence to fetch.
     * 
    **/
    where?: SequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sequences to fetch.
     * 
    **/
    orderBy?: Enumerable<SequenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sequences.
     * 
    **/
    cursor?: SequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sequences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sequences.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sequences.
     * 
    **/
    distinct?: Enumerable<SequenceScalarFieldEnum>
  }

  /**
   * Sequence: findFirst
   */
  export interface SequenceFindFirstArgs extends SequenceFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Sequence findMany
   */
  export type SequenceFindManyArgs = {
    /**
     * Select specific fields to fetch from the Sequence
     * 
    **/
    select?: SequenceSelect | null
    /**
     * Filter, which Sequences to fetch.
     * 
    **/
    where?: SequenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sequences to fetch.
     * 
    **/
    orderBy?: Enumerable<SequenceOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sequences.
     * 
    **/
    cursor?: SequenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sequences from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sequences.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SequenceScalarFieldEnum>
  }


  /**
   * Sequence create
   */
  export type SequenceCreateArgs = {
    /**
     * Select specific fields to fetch from the Sequence
     * 
    **/
    select?: SequenceSelect | null
    /**
     * The data needed to create a Sequence.
     * 
    **/
    data: XOR<SequenceCreateInput, SequenceUncheckedCreateInput>
  }


  /**
   * Sequence createMany
   */
  export type SequenceCreateManyArgs = {
    /**
     * The data used to create many Sequences.
     * 
    **/
    data: Enumerable<SequenceCreateManyInput>
  }


  /**
   * Sequence update
   */
  export type SequenceUpdateArgs = {
    /**
     * Select specific fields to fetch from the Sequence
     * 
    **/
    select?: SequenceSelect | null
    /**
     * The data needed to update a Sequence.
     * 
    **/
    data: XOR<SequenceUpdateInput, SequenceUncheckedUpdateInput>
    /**
     * Choose, which Sequence to update.
     * 
    **/
    where: SequenceWhereUniqueInput
  }


  /**
   * Sequence updateMany
   */
  export type SequenceUpdateManyArgs = {
    /**
     * The data used to update Sequences.
     * 
    **/
    data: XOR<SequenceUpdateManyMutationInput, SequenceUncheckedUpdateManyInput>
    /**
     * Filter which Sequences to update
     * 
    **/
    where?: SequenceWhereInput
  }


  /**
   * Sequence upsert
   */
  export type SequenceUpsertArgs = {
    /**
     * Select specific fields to fetch from the Sequence
     * 
    **/
    select?: SequenceSelect | null
    /**
     * The filter to search for the Sequence to update in case it exists.
     * 
    **/
    where: SequenceWhereUniqueInput
    /**
     * In case the Sequence found by the `where` argument doesn't exist, create a new Sequence with this data.
     * 
    **/
    create: XOR<SequenceCreateInput, SequenceUncheckedCreateInput>
    /**
     * In case the Sequence was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SequenceUpdateInput, SequenceUncheckedUpdateInput>
  }


  /**
   * Sequence delete
   */
  export type SequenceDeleteArgs = {
    /**
     * Select specific fields to fetch from the Sequence
     * 
    **/
    select?: SequenceSelect | null
    /**
     * Filter which Sequence to delete.
     * 
    **/
    where: SequenceWhereUniqueInput
  }


  /**
   * Sequence deleteMany
   */
  export type SequenceDeleteManyArgs = {
    /**
     * Filter which Sequences to delete
     * 
    **/
    where?: SequenceWhereInput
  }


  /**
   * Sequence findRaw
   */
  export type SequenceFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Sequence aggregateRaw
   */
  export type SequenceAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Sequence: findUniqueOrThrow
   */
  export type SequenceFindUniqueOrThrowArgs = SequenceFindUniqueArgsBase
      

  /**
   * Sequence: findFirstOrThrow
   */
  export type SequenceFindFirstOrThrowArgs = SequenceFindFirstArgsBase
      

  /**
   * Sequence without action
   */
  export type SequenceArgs = {
    /**
     * Select specific fields to fetch from the Sequence
     * 
    **/
    select?: SequenceSelect | null
  }



  /**
   * Model Producto
   */


  export type AggregateProducto = {
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  export type ProductoAvgAggregateOutputType = {
    codigo: number | null
    precio: number | null
    orden: number | null
  }

  export type ProductoSumAggregateOutputType = {
    codigo: number | null
    precio: number | null
    orden: number | null
  }

  export type ProductoMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    codigo: number | null
    precio: number | null
    codigoBarra: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProductoMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    codigo: number | null
    precio: number | null
    codigoBarra: string | null
    estado: boolean | null
    orden: number | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type ProductoCountAggregateOutputType = {
    id: number
    nombre: number
    codigo: number
    precio: number
    codigoBarra: number
    estado: number
    orden: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type ProductoAvgAggregateInputType = {
    codigo?: true
    precio?: true
    orden?: true
  }

  export type ProductoSumAggregateInputType = {
    codigo?: true
    precio?: true
    orden?: true
  }

  export type ProductoMinAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    precio?: true
    codigoBarra?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type ProductoMaxAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    precio?: true
    codigoBarra?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
  }

  export type ProductoCountAggregateInputType = {
    id?: true
    nombre?: true
    codigo?: true
    precio?: true
    codigoBarra?: true
    estado?: true
    orden?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type ProductoAggregateArgs = {
    /**
     * Filter which Producto to aggregate.
     * 
    **/
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Productos
    **/
    _count?: true | ProductoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductoMaxAggregateInputType
  }

  export type GetProductoAggregateType<T extends ProductoAggregateArgs> = {
        [P in keyof T & keyof AggregateProducto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducto[P]>
      : GetScalarType<T[P], AggregateProducto[P]>
  }




  export type ProductoGroupByArgs = {
    where?: ProductoWhereInput
    orderBy?: Enumerable<ProductoOrderByWithAggregationInput>
    by: Array<ProductoScalarFieldEnum>
    having?: ProductoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductoCountAggregateInputType | true
    _avg?: ProductoAvgAggregateInputType
    _sum?: ProductoSumAggregateInputType
    _min?: ProductoMinAggregateInputType
    _max?: ProductoMaxAggregateInputType
  }


  export type ProductoGroupByOutputType = {
    id: string
    nombre: string
    codigo: number
    precio: number | null
    codigoBarra: string | null
    estado: boolean
    orden: number
    created_at: Date
    updated_at: Date | null
    _count: ProductoCountAggregateOutputType | null
    _avg: ProductoAvgAggregateOutputType | null
    _sum: ProductoSumAggregateOutputType | null
    _min: ProductoMinAggregateOutputType | null
    _max: ProductoMaxAggregateOutputType | null
  }

  type GetProductoGroupByPayload<T extends ProductoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ProductoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductoGroupByOutputType[P]>
            : GetScalarType<T[P], ProductoGroupByOutputType[P]>
        }
      >
    >


  export type ProductoSelect = {
    id?: boolean
    nombre?: boolean
    codigo?: boolean
    precio?: boolean
    codigoBarra?: boolean
    estado?: boolean
    orden?: boolean
    productos?: boolean | VoucherFindManyArgs
    productosPromoDet?: boolean | PromocionDetalleFindManyArgs
    created_at?: boolean
    updated_at?: boolean
    _count?: boolean | ProductoCountOutputTypeArgs
  }

  export type ProductoInclude = {
    productos?: boolean | VoucherFindManyArgs
    productosPromoDet?: boolean | PromocionDetalleFindManyArgs
    _count?: boolean | ProductoCountOutputTypeArgs
  }

  export type ProductoGetPayload<
    S extends boolean | null | undefined | ProductoArgs,
    U = keyof S
      > = S extends true
        ? Producto
    : S extends undefined
    ? never
    : S extends ProductoArgs | ProductoFindManyArgs
    ?'include' extends U
    ? Producto  & {
    [P in TrueKeys<S['include']>]:
        P extends 'productos' ? Array < VoucherGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends 'productosPromoDet' ? Array < PromocionDetalleGetPayload<Exclude<S['include'], undefined | null>[P]>>  :
        P extends '_count' ? ProductoCountOutputTypeGetPayload<Exclude<S['include'], undefined | null>[P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'productos' ? Array < VoucherGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends 'productosPromoDet' ? Array < PromocionDetalleGetPayload<Exclude<S['select'], undefined | null>[P]>>  :
        P extends '_count' ? ProductoCountOutputTypeGetPayload<Exclude<S['select'], undefined | null>[P]> :  P extends keyof Producto ? Producto[P] : never
  } 
    : Producto
  : Producto


  type ProductoCountArgs = Merge<
    Omit<ProductoFindManyArgs, 'select' | 'include'> & {
      select?: ProductoCountAggregateInputType | true
    }
  >

  export interface ProductoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Producto that matches the filter.
     * @param {ProductoFindUniqueArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProductoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Producto'> extends True ? CheckSelect<T, Prisma__ProductoClient<Producto>, Prisma__ProductoClient<ProductoGetPayload<T>>> : CheckSelect<T, Prisma__ProductoClient<Producto | null, null>, Prisma__ProductoClient<ProductoGetPayload<T> | null, null>>

    /**
     * Find the first Producto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindFirstArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProductoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Producto'> extends True ? CheckSelect<T, Prisma__ProductoClient<Producto>, Prisma__ProductoClient<ProductoGetPayload<T>>> : CheckSelect<T, Prisma__ProductoClient<Producto | null, null>, Prisma__ProductoClient<ProductoGetPayload<T> | null, null>>

    /**
     * Find zero or more Productos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Productos
     * const productos = await prisma.producto.findMany()
     * 
     * // Get first 10 Productos
     * const productos = await prisma.producto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productoWithIdOnly = await prisma.producto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductoFindManyArgs>(
      args?: SelectSubset<T, ProductoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Producto>>, PrismaPromise<Array<ProductoGetPayload<T>>>>

    /**
     * Create a Producto.
     * @param {ProductoCreateArgs} args - Arguments to create a Producto.
     * @example
     * // Create one Producto
     * const Producto = await prisma.producto.create({
     *   data: {
     *     // ... data to create a Producto
     *   }
     * })
     * 
    **/
    create<T extends ProductoCreateArgs>(
      args: SelectSubset<T, ProductoCreateArgs>
    ): CheckSelect<T, Prisma__ProductoClient<Producto>, Prisma__ProductoClient<ProductoGetPayload<T>>>

    /**
     * Create many Productos.
     *     @param {ProductoCreateManyArgs} args - Arguments to create many Productos.
     *     @example
     *     // Create many Productos
     *     const producto = await prisma.producto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProductoCreateManyArgs>(
      args?: SelectSubset<T, ProductoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Producto.
     * @param {ProductoDeleteArgs} args - Arguments to delete one Producto.
     * @example
     * // Delete one Producto
     * const Producto = await prisma.producto.delete({
     *   where: {
     *     // ... filter to delete one Producto
     *   }
     * })
     * 
    **/
    delete<T extends ProductoDeleteArgs>(
      args: SelectSubset<T, ProductoDeleteArgs>
    ): CheckSelect<T, Prisma__ProductoClient<Producto>, Prisma__ProductoClient<ProductoGetPayload<T>>>

    /**
     * Update one Producto.
     * @param {ProductoUpdateArgs} args - Arguments to update one Producto.
     * @example
     * // Update one Producto
     * const producto = await prisma.producto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductoUpdateArgs>(
      args: SelectSubset<T, ProductoUpdateArgs>
    ): CheckSelect<T, Prisma__ProductoClient<Producto>, Prisma__ProductoClient<ProductoGetPayload<T>>>

    /**
     * Delete zero or more Productos.
     * @param {ProductoDeleteManyArgs} args - Arguments to filter Productos to delete.
     * @example
     * // Delete a few Productos
     * const { count } = await prisma.producto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductoDeleteManyArgs>(
      args?: SelectSubset<T, ProductoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Productos
     * const producto = await prisma.producto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductoUpdateManyArgs>(
      args: SelectSubset<T, ProductoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Producto.
     * @param {ProductoUpsertArgs} args - Arguments to update or create a Producto.
     * @example
     * // Update or create a Producto
     * const producto = await prisma.producto.upsert({
     *   create: {
     *     // ... data to create a Producto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Producto we want to update
     *   }
     * })
    **/
    upsert<T extends ProductoUpsertArgs>(
      args: SelectSubset<T, ProductoUpsertArgs>
    ): CheckSelect<T, Prisma__ProductoClient<Producto>, Prisma__ProductoClient<ProductoGetPayload<T>>>

    /**
     * Find zero or more Productos that matches the filter.
     * @param {ProductoFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const producto = await prisma.producto.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: ProductoFindRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Producto.
     * @param {ProductoAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const producto = await prisma.producto.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: ProductoAggregateRawArgs
    ): PrismaPromise<JsonObject>

    /**
     * Find one Producto that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {ProductoFindUniqueOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ProductoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__ProductoClient<Producto>, Prisma__ProductoClient<ProductoGetPayload<T>>>

    /**
     * Find the first Producto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoFindFirstOrThrowArgs} args - Arguments to find a Producto
     * @example
     * // Get one Producto
     * const producto = await prisma.producto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ProductoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__ProductoClient<Producto>, Prisma__ProductoClient<ProductoGetPayload<T>>>

    /**
     * Count the number of Productos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoCountArgs} args - Arguments to filter Productos to count.
     * @example
     * // Count the number of Productos
     * const count = await prisma.producto.count({
     *   where: {
     *     // ... the filter for the Productos we want to count
     *   }
     * })
    **/
    count<T extends ProductoCountArgs>(
      args?: Subset<T, ProductoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductoAggregateArgs>(args: Subset<T, ProductoAggregateArgs>): PrismaPromise<GetProductoAggregateType<T>>

    /**
     * Group by Producto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductoGroupByArgs['orderBy'] }
        : { orderBy?: ProductoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductoGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Producto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProductoClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    productos<T extends VoucherFindManyArgs = {}>(args?: Subset<T, VoucherFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Voucher>| Null>, PrismaPromise<Array<VoucherGetPayload<T>>| Null>>;

    productosPromoDet<T extends PromocionDetalleFindManyArgs = {}>(args?: Subset<T, PromocionDetalleFindManyArgs>): CheckSelect<T, PrismaPromise<Array<PromocionDetalle>| Null>, PrismaPromise<Array<PromocionDetalleGetPayload<T>>| Null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Producto base type for findUnique actions
   */
  export type ProductoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Producto
     * 
    **/
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductoInclude | null
    /**
     * Filter, which Producto to fetch.
     * 
    **/
    where: ProductoWhereUniqueInput
  }

  /**
   * Producto: findUnique
   */
  export interface ProductoFindUniqueArgs extends ProductoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Producto base type for findFirst actions
   */
  export type ProductoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Producto
     * 
    **/
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductoInclude | null
    /**
     * Filter, which Producto to fetch.
     * 
    **/
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Productos.
     * 
    **/
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Productos.
     * 
    **/
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }

  /**
   * Producto: findFirst
   */
  export interface ProductoFindFirstArgs extends ProductoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Producto findMany
   */
  export type ProductoFindManyArgs = {
    /**
     * Select specific fields to fetch from the Producto
     * 
    **/
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductoInclude | null
    /**
     * Filter, which Productos to fetch.
     * 
    **/
    where?: ProductoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Productos to fetch.
     * 
    **/
    orderBy?: Enumerable<ProductoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Productos.
     * 
    **/
    cursor?: ProductoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Productos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Productos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ProductoScalarFieldEnum>
  }


  /**
   * Producto create
   */
  export type ProductoCreateArgs = {
    /**
     * Select specific fields to fetch from the Producto
     * 
    **/
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductoInclude | null
    /**
     * The data needed to create a Producto.
     * 
    **/
    data: XOR<ProductoCreateInput, ProductoUncheckedCreateInput>
  }


  /**
   * Producto createMany
   */
  export type ProductoCreateManyArgs = {
    /**
     * The data used to create many Productos.
     * 
    **/
    data: Enumerable<ProductoCreateManyInput>
  }


  /**
   * Producto update
   */
  export type ProductoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Producto
     * 
    **/
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductoInclude | null
    /**
     * The data needed to update a Producto.
     * 
    **/
    data: XOR<ProductoUpdateInput, ProductoUncheckedUpdateInput>
    /**
     * Choose, which Producto to update.
     * 
    **/
    where: ProductoWhereUniqueInput
  }


  /**
   * Producto updateMany
   */
  export type ProductoUpdateManyArgs = {
    /**
     * The data used to update Productos.
     * 
    **/
    data: XOR<ProductoUpdateManyMutationInput, ProductoUncheckedUpdateManyInput>
    /**
     * Filter which Productos to update
     * 
    **/
    where?: ProductoWhereInput
  }


  /**
   * Producto upsert
   */
  export type ProductoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Producto
     * 
    **/
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductoInclude | null
    /**
     * The filter to search for the Producto to update in case it exists.
     * 
    **/
    where: ProductoWhereUniqueInput
    /**
     * In case the Producto found by the `where` argument doesn't exist, create a new Producto with this data.
     * 
    **/
    create: XOR<ProductoCreateInput, ProductoUncheckedCreateInput>
    /**
     * In case the Producto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ProductoUpdateInput, ProductoUncheckedUpdateInput>
  }


  /**
   * Producto delete
   */
  export type ProductoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Producto
     * 
    **/
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductoInclude | null
    /**
     * Filter which Producto to delete.
     * 
    **/
    where: ProductoWhereUniqueInput
  }


  /**
   * Producto deleteMany
   */
  export type ProductoDeleteManyArgs = {
    /**
     * Filter which Productos to delete
     * 
    **/
    where?: ProductoWhereInput
  }


  /**
   * Producto findRaw
   */
  export type ProductoFindRawArgs = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     * 
    **/
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Producto aggregateRaw
   */
  export type ProductoAggregateRawArgs = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     * 
    **/
    pipeline?: Array<InputJsonValue>
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     * 
    **/
    options?: InputJsonValue
  }


  /**
   * Producto: findUniqueOrThrow
   */
  export type ProductoFindUniqueOrThrowArgs = ProductoFindUniqueArgsBase
      

  /**
   * Producto: findFirstOrThrow
   */
  export type ProductoFindFirstOrThrowArgs = ProductoFindFirstArgsBase
      

  /**
   * Producto without action
   */
  export type ProductoArgs = {
    /**
     * Select specific fields to fetch from the Producto
     * 
    **/
    select?: ProductoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ProductoInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const BannerScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    image: 'image',
    bg: 'bg',
    status: 'status',
    order: 'order',
    created_at: 'created_at'
  };

  export type BannerScalarFieldEnum = (typeof BannerScalarFieldEnum)[keyof typeof BannerScalarFieldEnum]


  export const BateriasScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    imagen: 'imagen',
    categoria: 'categoria',
    capacidad: 'capacidad',
    cca10: 'cca10',
    polaridad: 'polaridad',
    largo: 'largo',
    ancho: 'ancho',
    altura: 'altura',
    estado: 'estado',
    orden: 'orden',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type BateriasScalarFieldEnum = (typeof BateriasScalarFieldEnum)[keyof typeof BateriasScalarFieldEnum]


  export const ClientScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    order: 'order',
    created_at: 'created_at'
  };

  export type ClientScalarFieldEnum = (typeof ClientScalarFieldEnum)[keyof typeof ClientScalarFieldEnum]


  export const ClientesScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    link: 'link',
    imagen: 'imagen',
    estado: 'estado',
    orden: 'orden',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ClientesScalarFieldEnum = (typeof ClientesScalarFieldEnum)[keyof typeof ClientesScalarFieldEnum]


  export const EmpresaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    link: 'link',
    imagen: 'imagen',
    estado: 'estado',
    orden: 'orden',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type EmpresaScalarFieldEnum = (typeof EmpresaScalarFieldEnum)[keyof typeof EmpresaScalarFieldEnum]


  export const FilterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    line: 'line',
    type: 'type',
    dia_ext: 'dia_ext',
    height: 'height',
    dia_int: 'dia_int',
    thread: 'thread',
    val_anti_ret: 'val_anti_ret',
    val_ali: 'val_ali',
    model: 'model',
    status: 'status',
    order: 'order',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type FilterScalarFieldEnum = (typeof FilterScalarFieldEnum)[keyof typeof FilterScalarFieldEnum]


  export const FiltrosScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    linea: 'linea',
    imagen: 'imagen',
    altura: 'altura',
    dia_ext: 'dia_ext',
    dia_int: 'dia_int',
    estado: 'estado',
    orden: 'orden',
    rosca: 'rosca',
    tipo: 'tipo',
    val_anti_ret: 'val_anti_ret',
    val_ali: 'val_ali',
    modelo: 'modelo',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type FiltrosScalarFieldEnum = (typeof FiltrosScalarFieldEnum)[keyof typeof FiltrosScalarFieldEnum]


  export const LubAuxScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    image: 'image',
    presentacion: 'presentacion',
    status: 'status',
    order: 'order',
    indicado_para: 'indicado_para',
    rec_honda: 'rec_honda',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LubAuxScalarFieldEnum = (typeof LubAuxScalarFieldEnum)[keyof typeof LubAuxScalarFieldEnum]


  export const LubMotoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    presentacion: 'presentacion',
    indicado_para: 'indicado_para',
    status: 'status',
    order: 'order',
    image: 'image',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LubMotoScalarFieldEnum = (typeof LubMotoScalarFieldEnum)[keyof typeof LubMotoScalarFieldEnum]


  export const LubVehLivianoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    image: 'image',
    presentacion: 'presentacion',
    status: 'status',
    order: 'order',
    indicado_para: 'indicado_para',
    especificacion: 'especificacion',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LubVehLivianoScalarFieldEnum = (typeof LubVehLivianoScalarFieldEnum)[keyof typeof LubVehLivianoScalarFieldEnum]


  export const LubVehPesadoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    caracteristicas: 'caracteristicas',
    image: 'image',
    presentacion: 'presentacion',
    atiende_excede: 'atiende_excede',
    aprobado: 'aprobado',
    status: 'status',
    order: 'order',
    rec_exxon_mob: 'rec_exxon_mob',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LubVehPesadoScalarFieldEnum = (typeof LubVehPesadoScalarFieldEnum)[keyof typeof LubVehPesadoScalarFieldEnum]


  export const LubricantesScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    descripcion: 'descripcion',
    imagen: 'imagen',
    linea: 'linea',
    presentacion: 'presentacion',
    indicado_para: 'indicado_para',
    especificacion: 'especificacion',
    rec_honda: 'rec_honda',
    rec_exxon_mob: 'rec_exxon_mob',
    caracteristicas: 'caracteristicas',
    atiende_excede: 'atiende_excede',
    aprobado: 'aprobado',
    estado: 'estado',
    orden: 'orden',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type LubricantesScalarFieldEnum = (typeof LubricantesScalarFieldEnum)[keyof typeof LubricantesScalarFieldEnum]


  export const MarcasScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    link: 'link',
    imagen: 'imagen',
    estado: 'estado',
    orden: 'orden',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type MarcasScalarFieldEnum = (typeof MarcasScalarFieldEnum)[keyof typeof MarcasScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    title: 'title',
    image: 'image',
    category: 'category',
    capacity: 'capacity',
    cca10: 'cca10',
    polarity: 'polarity',
    large: 'large',
    width: 'width',
    height: 'height',
    status: 'status',
    order: 'order',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ProductoScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    codigo: 'codigo',
    precio: 'precio',
    codigoBarra: 'codigoBarra',
    estado: 'estado',
    orden: 'orden',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type ProductoScalarFieldEnum = (typeof ProductoScalarFieldEnum)[keyof typeof ProductoScalarFieldEnum]


  export const PromocionDetalleScalarFieldEnum: {
    id: 'id',
    promocionId: 'promocionId',
    productoId: 'productoId',
    porcentaje: 'porcentaje',
    monto: 'monto',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PromocionDetalleScalarFieldEnum = (typeof PromocionDetalleScalarFieldEnum)[keyof typeof PromocionDetalleScalarFieldEnum]


  export const PromocionScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    link: 'link',
    imagen: 'imagen',
    estado: 'estado',
    orden: 'orden',
    fechaInicio: 'fechaInicio',
    fechaFin: 'fechaFin',
    empresaId: 'empresaId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type PromocionScalarFieldEnum = (typeof PromocionScalarFieldEnum)[keyof typeof PromocionScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    body: 'body',
    author: 'author',
    status: 'status',
    order: 'order',
    created_at: 'created_at'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const SequenceScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    seq: 'seq'
  };

  export type SequenceScalarFieldEnum = (typeof SequenceScalarFieldEnum)[keyof typeof SequenceScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const SuccessScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    order: 'order',
    created_at: 'created_at'
  };

  export type SuccessScalarFieldEnum = (typeof SuccessScalarFieldEnum)[keyof typeof SuccessScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    created_at: 'created_at'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    id: 'id',
    cedula: 'cedula',
    codigo: 'codigo',
    nombre: 'nombre',
    estado: 'estado',
    telefono: 'telefono',
    email: 'email',
    empresaId: 'empresaId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const VacanciasScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    imagen: 'imagen',
    preguntas: 'preguntas',
    requisitos: 'requisitos',
    vigencia: 'vigencia',
    area: 'area',
    estado: 'estado',
    orden: 'orden',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type VacanciasScalarFieldEnum = (typeof VacanciasScalarFieldEnum)[keyof typeof VacanciasScalarFieldEnum]


  export const VoucherScalarFieldEnum: {
    id: 'id',
    codigo: 'codigo',
    fecha: 'fecha',
    canjeado: 'canjeado',
    canjeadoFecha: 'canjeadoFecha',
    promocionId: 'promocionId',
    productoId: 'productoId',
    cantidad: 'cantidad',
    usuarioId: 'usuarioId',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type VoucherScalarFieldEnum = (typeof VoucherScalarFieldEnum)[keyof typeof VoucherScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type BannerWhereInput = {
    AND?: Enumerable<BannerWhereInput>
    OR?: Enumerable<BannerWhereInput>
    NOT?: Enumerable<BannerWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    description?: StringNullableListFilter
    image?: StringFilter | string
    bg?: StringFilter | string
    status?: BoolFilter | boolean
    order?: IntFilter | number
    created_at?: StringFilter | string
  }

  export type BannerOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    bg?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type BannerWhereUniqueInput = {
    id?: string
  }

  export type BannerOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    bg?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    _count?: BannerCountOrderByAggregateInput
    _avg?: BannerAvgOrderByAggregateInput
    _max?: BannerMaxOrderByAggregateInput
    _min?: BannerMinOrderByAggregateInput
    _sum?: BannerSumOrderByAggregateInput
  }

  export type BannerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BannerScalarWhereWithAggregatesInput>
    OR?: Enumerable<BannerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BannerScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringNullableListFilter
    image?: StringWithAggregatesFilter | string
    bg?: StringWithAggregatesFilter | string
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    created_at?: StringWithAggregatesFilter | string
  }

  export type ClientWhereInput = {
    AND?: Enumerable<ClientWhereInput>
    OR?: Enumerable<ClientWhereInput>
    NOT?: Enumerable<ClientWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    description?: StringNullableListFilter
    status?: BoolFilter | boolean
    order?: IntFilter | number
    created_at?: StringFilter | string
  }

  export type ClientOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type ClientWhereUniqueInput = {
    id?: string
  }

  export type ClientOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    _count?: ClientCountOrderByAggregateInput
    _avg?: ClientAvgOrderByAggregateInput
    _max?: ClientMaxOrderByAggregateInput
    _min?: ClientMinOrderByAggregateInput
    _sum?: ClientSumOrderByAggregateInput
  }

  export type ClientScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringNullableListFilter
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    created_at?: StringWithAggregatesFilter | string
  }

  export type FilterWhereInput = {
    AND?: Enumerable<FilterWhereInput>
    OR?: Enumerable<FilterWhereInput>
    NOT?: Enumerable<FilterWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    image?: StringFilter | string
    line?: StringNullableFilter | string | null
    type?: StringNullableFilter | string | null
    dia_ext?: StringNullableFilter | string | null
    height?: StringNullableFilter | string | null
    dia_int?: StringNullableFilter | string | null
    thread?: StringNullableFilter | string | null
    val_anti_ret?: StringNullableFilter | string | null
    val_ali?: StringNullableFilter | string | null
    model?: StringNullableFilter | string | null
    status?: BoolFilter | boolean
    order?: IntFilter | number
    created_at?: StringFilter | string
    updated_at?: StringFilter | string
  }

  export type FilterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    line?: SortOrder
    type?: SortOrder
    dia_ext?: SortOrder
    height?: SortOrder
    dia_int?: SortOrder
    thread?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    model?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FilterWhereUniqueInput = {
    id?: string
  }

  export type FilterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    line?: SortOrder
    type?: SortOrder
    dia_ext?: SortOrder
    height?: SortOrder
    dia_int?: SortOrder
    thread?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    model?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: FilterCountOrderByAggregateInput
    _avg?: FilterAvgOrderByAggregateInput
    _max?: FilterMaxOrderByAggregateInput
    _min?: FilterMinOrderByAggregateInput
    _sum?: FilterSumOrderByAggregateInput
  }

  export type FilterScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FilterScalarWhereWithAggregatesInput>
    OR?: Enumerable<FilterScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FilterScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    line?: StringNullableWithAggregatesFilter | string | null
    type?: StringNullableWithAggregatesFilter | string | null
    dia_ext?: StringNullableWithAggregatesFilter | string | null
    height?: StringNullableWithAggregatesFilter | string | null
    dia_int?: StringNullableWithAggregatesFilter | string | null
    thread?: StringNullableWithAggregatesFilter | string | null
    val_anti_ret?: StringNullableWithAggregatesFilter | string | null
    val_ali?: StringNullableWithAggregatesFilter | string | null
    model?: StringNullableWithAggregatesFilter | string | null
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    created_at?: StringWithAggregatesFilter | string
    updated_at?: StringWithAggregatesFilter | string
  }

  export type ProductWhereInput = {
    AND?: Enumerable<ProductWhereInput>
    OR?: Enumerable<ProductWhereInput>
    NOT?: Enumerable<ProductWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    image?: StringFilter | string
    category?: StringNullableFilter | string | null
    capacity?: StringNullableFilter | string | null
    cca10?: StringNullableFilter | string | null
    polarity?: StringNullableFilter | string | null
    large?: StringNullableFilter | string | null
    width?: StringNullableFilter | string | null
    height?: StringNullableFilter | string | null
    status?: BoolFilter | boolean
    order?: IntFilter | number
    created_at?: StringFilter | string
    updated_at?: StringFilter | string
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    category?: SortOrder
    capacity?: SortOrder
    cca10?: SortOrder
    polarity?: SortOrder
    large?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductWhereUniqueInput = {
    id?: string
  }

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    category?: SortOrder
    capacity?: SortOrder
    cca10?: SortOrder
    polarity?: SortOrder
    large?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    category?: StringNullableWithAggregatesFilter | string | null
    capacity?: StringNullableWithAggregatesFilter | string | null
    cca10?: StringNullableWithAggregatesFilter | string | null
    polarity?: StringNullableWithAggregatesFilter | string | null
    large?: StringNullableWithAggregatesFilter | string | null
    width?: StringNullableWithAggregatesFilter | string | null
    height?: StringNullableWithAggregatesFilter | string | null
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    created_at?: StringWithAggregatesFilter | string
    updated_at?: StringWithAggregatesFilter | string
  }

  export type ReviewWhereInput = {
    AND?: Enumerable<ReviewWhereInput>
    OR?: Enumerable<ReviewWhereInput>
    NOT?: Enumerable<ReviewWhereInput>
    id?: StringFilter | string
    body?: StringNullableListFilter
    author?: StringFilter | string
    status?: BoolFilter | boolean
    order?: IntFilter | number
    created_at?: StringFilter | string
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    body?: SortOrder
    author?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewWhereUniqueInput = {
    id?: string
  }

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    body?: SortOrder
    author?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    OR?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ReviewScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    body?: StringNullableListFilter
    author?: StringWithAggregatesFilter | string
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    created_at?: StringWithAggregatesFilter | string
  }

  export type SuccessWhereInput = {
    AND?: Enumerable<SuccessWhereInput>
    OR?: Enumerable<SuccessWhereInput>
    NOT?: Enumerable<SuccessWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    description?: StringNullableListFilter
    status?: BoolFilter | boolean
    order?: IntFilter | number
    created_at?: StringFilter | string
  }

  export type SuccessOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type SuccessWhereUniqueInput = {
    id?: string
  }

  export type SuccessOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    _count?: SuccessCountOrderByAggregateInput
    _avg?: SuccessAvgOrderByAggregateInput
    _max?: SuccessMaxOrderByAggregateInput
    _min?: SuccessMinOrderByAggregateInput
    _sum?: SuccessSumOrderByAggregateInput
  }

  export type SuccessScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SuccessScalarWhereWithAggregatesInput>
    OR?: Enumerable<SuccessScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SuccessScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    description?: StringNullableListFilter
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    created_at?: StringWithAggregatesFilter | string
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    role?: StringFilter | string
    created_at?: StringFilter | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    role?: StringWithAggregatesFilter | string
    created_at?: StringWithAggregatesFilter | string
  }

  export type LubVehLivianoWhereInput = {
    AND?: Enumerable<LubVehLivianoWhereInput>
    OR?: Enumerable<LubVehLivianoWhereInput>
    NOT?: Enumerable<LubVehLivianoWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    descripcion?: StringNullableListFilter
    image?: StringNullableFilter | string | null
    presentacion?: StringFilter | string
    status?: BoolFilter | boolean
    order?: IntFilter | number
    indicado_para?: StringFilter | string
    especificacion?: StringFilter | string
    created_at?: StringFilter | string
    updated_at?: StringFilter | string
  }

  export type LubVehLivianoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubVehLivianoWhereUniqueInput = {
    id?: string
  }

  export type LubVehLivianoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LubVehLivianoCountOrderByAggregateInput
    _avg?: LubVehLivianoAvgOrderByAggregateInput
    _max?: LubVehLivianoMaxOrderByAggregateInput
    _min?: LubVehLivianoMinOrderByAggregateInput
    _sum?: LubVehLivianoSumOrderByAggregateInput
  }

  export type LubVehLivianoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LubVehLivianoScalarWhereWithAggregatesInput>
    OR?: Enumerable<LubVehLivianoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LubVehLivianoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    descripcion?: StringNullableListFilter
    image?: StringNullableWithAggregatesFilter | string | null
    presentacion?: StringWithAggregatesFilter | string
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    indicado_para?: StringWithAggregatesFilter | string
    especificacion?: StringWithAggregatesFilter | string
    created_at?: StringWithAggregatesFilter | string
    updated_at?: StringWithAggregatesFilter | string
  }

  export type LubMotoWhereInput = {
    AND?: Enumerable<LubMotoWhereInput>
    OR?: Enumerable<LubMotoWhereInput>
    NOT?: Enumerable<LubMotoWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    descripcion?: StringNullableListFilter
    presentacion?: StringFilter | string
    indicado_para?: StringFilter | string
    status?: BoolFilter | boolean
    order?: IntFilter | number
    image?: StringFilter | string
    created_at?: StringFilter | string
    updated_at?: StringFilter | string
  }

  export type LubMotoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    status?: SortOrder
    order?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubMotoWhereUniqueInput = {
    id?: string
  }

  export type LubMotoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    status?: SortOrder
    order?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LubMotoCountOrderByAggregateInput
    _avg?: LubMotoAvgOrderByAggregateInput
    _max?: LubMotoMaxOrderByAggregateInput
    _min?: LubMotoMinOrderByAggregateInput
    _sum?: LubMotoSumOrderByAggregateInput
  }

  export type LubMotoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LubMotoScalarWhereWithAggregatesInput>
    OR?: Enumerable<LubMotoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LubMotoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    descripcion?: StringNullableListFilter
    presentacion?: StringWithAggregatesFilter | string
    indicado_para?: StringWithAggregatesFilter | string
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    image?: StringWithAggregatesFilter | string
    created_at?: StringWithAggregatesFilter | string
    updated_at?: StringWithAggregatesFilter | string
  }

  export type LubAuxWhereInput = {
    AND?: Enumerable<LubAuxWhereInput>
    OR?: Enumerable<LubAuxWhereInput>
    NOT?: Enumerable<LubAuxWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    descripcion?: StringNullableListFilter
    image?: StringFilter | string
    presentacion?: StringFilter | string
    status?: BoolFilter | boolean
    order?: IntFilter | number
    indicado_para?: StringFilter | string
    rec_honda?: BoolFilter | boolean
    created_at?: StringFilter | string
    updated_at?: StringFilter | string
  }

  export type LubAuxOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    rec_honda?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubAuxWhereUniqueInput = {
    id?: string
  }

  export type LubAuxOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    rec_honda?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LubAuxCountOrderByAggregateInput
    _avg?: LubAuxAvgOrderByAggregateInput
    _max?: LubAuxMaxOrderByAggregateInput
    _min?: LubAuxMinOrderByAggregateInput
    _sum?: LubAuxSumOrderByAggregateInput
  }

  export type LubAuxScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LubAuxScalarWhereWithAggregatesInput>
    OR?: Enumerable<LubAuxScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LubAuxScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    descripcion?: StringNullableListFilter
    image?: StringWithAggregatesFilter | string
    presentacion?: StringWithAggregatesFilter | string
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    indicado_para?: StringWithAggregatesFilter | string
    rec_honda?: BoolWithAggregatesFilter | boolean
    created_at?: StringWithAggregatesFilter | string
    updated_at?: StringWithAggregatesFilter | string
  }

  export type LubVehPesadoWhereInput = {
    AND?: Enumerable<LubVehPesadoWhereInput>
    OR?: Enumerable<LubVehPesadoWhereInput>
    NOT?: Enumerable<LubVehPesadoWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    descripcion?: StringNullableListFilter
    caracteristicas?: StringNullableListFilter
    image?: StringFilter | string
    presentacion?: StringFilter | string
    atiende_excede?: StringFilter | string
    aprobado?: StringFilter | string
    status?: BoolFilter | boolean
    order?: IntFilter | number
    rec_exxon_mob?: StringFilter | string
    created_at?: StringFilter | string
    updated_at?: StringFilter | string
  }

  export type LubVehPesadoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    caracteristicas?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    status?: SortOrder
    order?: SortOrder
    rec_exxon_mob?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubVehPesadoWhereUniqueInput = {
    id?: string
  }

  export type LubVehPesadoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    caracteristicas?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    status?: SortOrder
    order?: SortOrder
    rec_exxon_mob?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LubVehPesadoCountOrderByAggregateInput
    _avg?: LubVehPesadoAvgOrderByAggregateInput
    _max?: LubVehPesadoMaxOrderByAggregateInput
    _min?: LubVehPesadoMinOrderByAggregateInput
    _sum?: LubVehPesadoSumOrderByAggregateInput
  }

  export type LubVehPesadoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LubVehPesadoScalarWhereWithAggregatesInput>
    OR?: Enumerable<LubVehPesadoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LubVehPesadoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    descripcion?: StringNullableListFilter
    caracteristicas?: StringNullableListFilter
    image?: StringWithAggregatesFilter | string
    presentacion?: StringWithAggregatesFilter | string
    atiende_excede?: StringWithAggregatesFilter | string
    aprobado?: StringWithAggregatesFilter | string
    status?: BoolWithAggregatesFilter | boolean
    order?: IntWithAggregatesFilter | number
    rec_exxon_mob?: StringWithAggregatesFilter | string
    created_at?: StringWithAggregatesFilter | string
    updated_at?: StringWithAggregatesFilter | string
  }

  export type FiltrosWhereInput = {
    AND?: Enumerable<FiltrosWhereInput>
    OR?: Enumerable<FiltrosWhereInput>
    NOT?: Enumerable<FiltrosWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    linea?: StringFilter | string
    imagen?: StringFilter | string
    altura?: StringNullableFilter | string | null
    dia_ext?: StringNullableFilter | string | null
    dia_int?: StringNullableFilter | string | null
    estado?: BoolFilter | boolean
    orden?: IntFilter | number
    rosca?: StringNullableFilter | string | null
    tipo?: StringFilter | string
    val_anti_ret?: StringNullableFilter | string | null
    val_ali?: StringNullableFilter | string | null
    modelo?: StringNullableFilter | string | null
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type FiltrosOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    linea?: SortOrder
    imagen?: SortOrder
    altura?: SortOrder
    dia_ext?: SortOrder
    dia_int?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    rosca?: SortOrder
    tipo?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    modelo?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FiltrosWhereUniqueInput = {
    id?: string
  }

  export type FiltrosOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    linea?: SortOrder
    imagen?: SortOrder
    altura?: SortOrder
    dia_ext?: SortOrder
    dia_int?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    rosca?: SortOrder
    tipo?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    modelo?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: FiltrosCountOrderByAggregateInput
    _avg?: FiltrosAvgOrderByAggregateInput
    _max?: FiltrosMaxOrderByAggregateInput
    _min?: FiltrosMinOrderByAggregateInput
    _sum?: FiltrosSumOrderByAggregateInput
  }

  export type FiltrosScalarWhereWithAggregatesInput = {
    AND?: Enumerable<FiltrosScalarWhereWithAggregatesInput>
    OR?: Enumerable<FiltrosScalarWhereWithAggregatesInput>
    NOT?: Enumerable<FiltrosScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    linea?: StringWithAggregatesFilter | string
    imagen?: StringWithAggregatesFilter | string
    altura?: StringNullableWithAggregatesFilter | string | null
    dia_ext?: StringNullableWithAggregatesFilter | string | null
    dia_int?: StringNullableWithAggregatesFilter | string | null
    estado?: BoolWithAggregatesFilter | boolean
    orden?: IntWithAggregatesFilter | number
    rosca?: StringNullableWithAggregatesFilter | string | null
    tipo?: StringWithAggregatesFilter | string
    val_anti_ret?: StringNullableWithAggregatesFilter | string | null
    val_ali?: StringNullableWithAggregatesFilter | string | null
    modelo?: StringNullableWithAggregatesFilter | string | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type LubricantesWhereInput = {
    AND?: Enumerable<LubricantesWhereInput>
    OR?: Enumerable<LubricantesWhereInput>
    NOT?: Enumerable<LubricantesWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    descripcion?: StringNullableListFilter
    imagen?: StringFilter | string
    linea?: StringFilter | string
    presentacion?: StringNullableFilter | string | null
    indicado_para?: StringNullableFilter | string | null
    especificacion?: StringNullableFilter | string | null
    rec_honda?: BoolFilter | boolean
    rec_exxon_mob?: StringNullableFilter | string | null
    caracteristicas?: StringNullableListFilter
    atiende_excede?: StringNullableFilter | string | null
    aprobado?: StringNullableFilter | string | null
    estado?: BoolFilter | boolean
    orden?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type LubricantesOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    imagen?: SortOrder
    linea?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    rec_honda?: SortOrder
    rec_exxon_mob?: SortOrder
    caracteristicas?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubricantesWhereUniqueInput = {
    id?: string
  }

  export type LubricantesOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    imagen?: SortOrder
    linea?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    rec_honda?: SortOrder
    rec_exxon_mob?: SortOrder
    caracteristicas?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: LubricantesCountOrderByAggregateInput
    _avg?: LubricantesAvgOrderByAggregateInput
    _max?: LubricantesMaxOrderByAggregateInput
    _min?: LubricantesMinOrderByAggregateInput
    _sum?: LubricantesSumOrderByAggregateInput
  }

  export type LubricantesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LubricantesScalarWhereWithAggregatesInput>
    OR?: Enumerable<LubricantesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LubricantesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    descripcion?: StringNullableListFilter
    imagen?: StringWithAggregatesFilter | string
    linea?: StringWithAggregatesFilter | string
    presentacion?: StringNullableWithAggregatesFilter | string | null
    indicado_para?: StringNullableWithAggregatesFilter | string | null
    especificacion?: StringNullableWithAggregatesFilter | string | null
    rec_honda?: BoolWithAggregatesFilter | boolean
    rec_exxon_mob?: StringNullableWithAggregatesFilter | string | null
    caracteristicas?: StringNullableListFilter
    atiende_excede?: StringNullableWithAggregatesFilter | string | null
    aprobado?: StringNullableWithAggregatesFilter | string | null
    estado?: BoolWithAggregatesFilter | boolean
    orden?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type BateriasWhereInput = {
    AND?: Enumerable<BateriasWhereInput>
    OR?: Enumerable<BateriasWhereInput>
    NOT?: Enumerable<BateriasWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    imagen?: StringFilter | string
    categoria?: StringNullableFilter | string | null
    capacidad?: StringNullableFilter | string | null
    cca10?: StringNullableFilter | string | null
    polaridad?: StringNullableFilter | string | null
    largo?: StringNullableFilter | string | null
    ancho?: StringNullableFilter | string | null
    altura?: StringNullableFilter | string | null
    estado?: BoolFilter | boolean
    orden?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type BateriasOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    categoria?: SortOrder
    capacidad?: SortOrder
    cca10?: SortOrder
    polaridad?: SortOrder
    largo?: SortOrder
    ancho?: SortOrder
    altura?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BateriasWhereUniqueInput = {
    id?: string
  }

  export type BateriasOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    categoria?: SortOrder
    capacidad?: SortOrder
    cca10?: SortOrder
    polaridad?: SortOrder
    largo?: SortOrder
    ancho?: SortOrder
    altura?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: BateriasCountOrderByAggregateInput
    _avg?: BateriasAvgOrderByAggregateInput
    _max?: BateriasMaxOrderByAggregateInput
    _min?: BateriasMinOrderByAggregateInput
    _sum?: BateriasSumOrderByAggregateInput
  }

  export type BateriasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BateriasScalarWhereWithAggregatesInput>
    OR?: Enumerable<BateriasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BateriasScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    imagen?: StringWithAggregatesFilter | string
    categoria?: StringNullableWithAggregatesFilter | string | null
    capacidad?: StringNullableWithAggregatesFilter | string | null
    cca10?: StringNullableWithAggregatesFilter | string | null
    polaridad?: StringNullableWithAggregatesFilter | string | null
    largo?: StringNullableWithAggregatesFilter | string | null
    ancho?: StringNullableWithAggregatesFilter | string | null
    altura?: StringNullableWithAggregatesFilter | string | null
    estado?: BoolWithAggregatesFilter | boolean
    orden?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type VacanciasWhereInput = {
    AND?: Enumerable<VacanciasWhereInput>
    OR?: Enumerable<VacanciasWhereInput>
    NOT?: Enumerable<VacanciasWhereInput>
    id?: StringFilter | string
    titulo?: StringFilter | string
    imagen?: StringFilter | string
    preguntas?: StringNullableListFilter
    requisitos?: StringNullableListFilter
    vigencia?: StringFilter | string
    area?: StringFilter | string
    estado?: BoolFilter | boolean
    orden?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type VacanciasOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagen?: SortOrder
    preguntas?: SortOrder
    requisitos?: SortOrder
    vigencia?: SortOrder
    area?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type VacanciasWhereUniqueInput = {
    id?: string
  }

  export type VacanciasOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagen?: SortOrder
    preguntas?: SortOrder
    requisitos?: SortOrder
    vigencia?: SortOrder
    area?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: VacanciasCountOrderByAggregateInput
    _avg?: VacanciasAvgOrderByAggregateInput
    _max?: VacanciasMaxOrderByAggregateInput
    _min?: VacanciasMinOrderByAggregateInput
    _sum?: VacanciasSumOrderByAggregateInput
  }

  export type VacanciasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VacanciasScalarWhereWithAggregatesInput>
    OR?: Enumerable<VacanciasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VacanciasScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    titulo?: StringWithAggregatesFilter | string
    imagen?: StringWithAggregatesFilter | string
    preguntas?: StringNullableListFilter
    requisitos?: StringNullableListFilter
    vigencia?: StringWithAggregatesFilter | string
    area?: StringWithAggregatesFilter | string
    estado?: BoolWithAggregatesFilter | boolean
    orden?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type MarcasWhereInput = {
    AND?: Enumerable<MarcasWhereInput>
    OR?: Enumerable<MarcasWhereInput>
    NOT?: Enumerable<MarcasWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    link?: StringFilter | string
    imagen?: StringFilter | string
    estado?: BoolFilter | boolean
    orden?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type MarcasOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MarcasWhereUniqueInput = {
    id?: string
  }

  export type MarcasOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: MarcasCountOrderByAggregateInput
    _avg?: MarcasAvgOrderByAggregateInput
    _max?: MarcasMaxOrderByAggregateInput
    _min?: MarcasMinOrderByAggregateInput
    _sum?: MarcasSumOrderByAggregateInput
  }

  export type MarcasScalarWhereWithAggregatesInput = {
    AND?: Enumerable<MarcasScalarWhereWithAggregatesInput>
    OR?: Enumerable<MarcasScalarWhereWithAggregatesInput>
    NOT?: Enumerable<MarcasScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    link?: StringWithAggregatesFilter | string
    imagen?: StringWithAggregatesFilter | string
    estado?: BoolWithAggregatesFilter | boolean
    orden?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type ClientesWhereInput = {
    AND?: Enumerable<ClientesWhereInput>
    OR?: Enumerable<ClientesWhereInput>
    NOT?: Enumerable<ClientesWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    link?: StringFilter | string
    imagen?: StringFilter | string
    estado?: BoolFilter | boolean
    orden?: IntFilter | number
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type ClientesOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientesWhereUniqueInput = {
    id?: string
  }

  export type ClientesOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ClientesCountOrderByAggregateInput
    _avg?: ClientesAvgOrderByAggregateInput
    _max?: ClientesMaxOrderByAggregateInput
    _min?: ClientesMinOrderByAggregateInput
    _sum?: ClientesSumOrderByAggregateInput
  }

  export type ClientesScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ClientesScalarWhereWithAggregatesInput>
    OR?: Enumerable<ClientesScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ClientesScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    link?: StringWithAggregatesFilter | string
    imagen?: StringWithAggregatesFilter | string
    estado?: BoolWithAggregatesFilter | boolean
    orden?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type PromocionWhereInput = {
    AND?: Enumerable<PromocionWhereInput>
    OR?: Enumerable<PromocionWhereInput>
    NOT?: Enumerable<PromocionWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    link?: StringFilter | string
    imagen?: StringFilter | string
    estado?: BoolFilter | boolean
    orden?: IntFilter | number
    fechaInicio?: DateTimeNullableFilter | Date | string | null
    fechaFin?: DateTimeNullableFilter | Date | string | null
    promocionVouchers?: VoucherListRelationFilter
    empresa?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    empresaId?: StringFilter | string
    promociones?: PromocionDetalleListRelationFilter
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type PromocionOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    promocionVouchers?: VoucherOrderByRelationAggregateInput
    empresa?: EmpresaOrderByWithRelationInput
    empresaId?: SortOrder
    promociones?: PromocionDetalleOrderByRelationAggregateInput
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromocionWhereUniqueInput = {
    id?: string
    empresaId?: string
  }

  export type PromocionOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    empresaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PromocionCountOrderByAggregateInput
    _avg?: PromocionAvgOrderByAggregateInput
    _max?: PromocionMaxOrderByAggregateInput
    _min?: PromocionMinOrderByAggregateInput
    _sum?: PromocionSumOrderByAggregateInput
  }

  export type PromocionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PromocionScalarWhereWithAggregatesInput>
    OR?: Enumerable<PromocionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PromocionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    link?: StringWithAggregatesFilter | string
    imagen?: StringWithAggregatesFilter | string
    estado?: BoolWithAggregatesFilter | boolean
    orden?: IntWithAggregatesFilter | number
    fechaInicio?: DateTimeNullableWithAggregatesFilter | Date | string | null
    fechaFin?: DateTimeNullableWithAggregatesFilter | Date | string | null
    empresaId?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PromocionDetalleWhereInput = {
    AND?: Enumerable<PromocionDetalleWhereInput>
    OR?: Enumerable<PromocionDetalleWhereInput>
    NOT?: Enumerable<PromocionDetalleWhereInput>
    id?: StringFilter | string
    promocion?: XOR<PromocionRelationFilter, PromocionWhereInput>
    promocionId?: StringFilter | string
    producto?: XOR<ProductoRelationFilter, ProductoWhereInput>
    productoId?: StringFilter | string
    porcentaje?: IntNullableFilter | number | null
    monto?: IntNullableFilter | number | null
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type PromocionDetalleOrderByWithRelationInput = {
    id?: SortOrder
    promocion?: PromocionOrderByWithRelationInput
    promocionId?: SortOrder
    producto?: ProductoOrderByWithRelationInput
    productoId?: SortOrder
    porcentaje?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromocionDetalleWhereUniqueInput = {
    id?: string
    productoId?: string
  }

  export type PromocionDetalleOrderByWithAggregationInput = {
    id?: SortOrder
    promocionId?: SortOrder
    productoId?: SortOrder
    porcentaje?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: PromocionDetalleCountOrderByAggregateInput
    _avg?: PromocionDetalleAvgOrderByAggregateInput
    _max?: PromocionDetalleMaxOrderByAggregateInput
    _min?: PromocionDetalleMinOrderByAggregateInput
    _sum?: PromocionDetalleSumOrderByAggregateInput
  }

  export type PromocionDetalleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PromocionDetalleScalarWhereWithAggregatesInput>
    OR?: Enumerable<PromocionDetalleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PromocionDetalleScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    promocionId?: StringWithAggregatesFilter | string
    productoId?: StringWithAggregatesFilter | string
    porcentaje?: IntNullableWithAggregatesFilter | number | null
    monto?: IntNullableWithAggregatesFilter | number | null
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EmpresaWhereInput = {
    AND?: Enumerable<EmpresaWhereInput>
    OR?: Enumerable<EmpresaWhereInput>
    NOT?: Enumerable<EmpresaWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    link?: StringFilter | string
    imagen?: StringFilter | string
    estado?: BoolFilter | boolean
    orden?: IntFilter | number
    empresa?: XOR<PromocionRelationFilter, PromocionWhereInput> | null
    empresaUsuario?: UsuarioListRelationFilter
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type EmpresaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    empresa?: PromocionOrderByWithRelationInput
    empresaUsuario?: UsuarioOrderByRelationAggregateInput
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EmpresaWhereUniqueInput = {
    id?: string
  }

  export type EmpresaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: EmpresaCountOrderByAggregateInput
    _avg?: EmpresaAvgOrderByAggregateInput
    _max?: EmpresaMaxOrderByAggregateInput
    _min?: EmpresaMinOrderByAggregateInput
    _sum?: EmpresaSumOrderByAggregateInput
  }

  export type EmpresaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EmpresaScalarWhereWithAggregatesInput>
    OR?: Enumerable<EmpresaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EmpresaScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    link?: StringWithAggregatesFilter | string
    imagen?: StringWithAggregatesFilter | string
    estado?: BoolWithAggregatesFilter | boolean
    orden?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UsuarioWhereInput = {
    AND?: Enumerable<UsuarioWhereInput>
    OR?: Enumerable<UsuarioWhereInput>
    NOT?: Enumerable<UsuarioWhereInput>
    id?: StringFilter | string
    cedula?: StringNullableFilter | string | null
    codigo?: StringNullableFilter | string | null
    nombre?: StringFilter | string
    estado?: BoolFilter | boolean
    telefono?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    empresaUsuario?: XOR<EmpresaRelationFilter, EmpresaWhereInput>
    empresaId?: StringFilter | string
    usuarios?: VoucherListRelationFilter
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type UsuarioOrderByWithRelationInput = {
    id?: SortOrder
    cedula?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    estado?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    empresaUsuario?: EmpresaOrderByWithRelationInput
    empresaId?: SortOrder
    usuarios?: VoucherOrderByRelationAggregateInput
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsuarioWhereUniqueInput = {
    id?: string
    empresaId?: string
  }

  export type UsuarioOrderByWithAggregationInput = {
    id?: SortOrder
    cedula?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    estado?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    empresaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: UsuarioCountOrderByAggregateInput
    _max?: UsuarioMaxOrderByAggregateInput
    _min?: UsuarioMinOrderByAggregateInput
  }

  export type UsuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UsuarioScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    cedula?: StringNullableWithAggregatesFilter | string | null
    codigo?: StringNullableWithAggregatesFilter | string | null
    nombre?: StringWithAggregatesFilter | string
    estado?: BoolWithAggregatesFilter | boolean
    telefono?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    empresaId?: StringWithAggregatesFilter | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type VoucherWhereInput = {
    AND?: Enumerable<VoucherWhereInput>
    OR?: Enumerable<VoucherWhereInput>
    NOT?: Enumerable<VoucherWhereInput>
    id?: StringFilter | string
    codigo?: IntFilter | number
    fecha?: DateTimeFilter | Date | string
    canjeado?: BoolFilter | boolean
    canjeadoFecha?: DateTimeNullableFilter | Date | string | null
    promocionVoucher?: XOR<PromocionRelationFilter, PromocionWhereInput>
    promocionId?: StringFilter | string
    promocionProducto?: XOR<ProductoRelationFilter, ProductoWhereInput>
    productoId?: StringFilter | string
    cantidad?: IntFilter | number
    usuario?: XOR<UsuarioRelationFilter, UsuarioWhereInput>
    usuarioId?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type VoucherOrderByWithRelationInput = {
    id?: SortOrder
    codigo?: SortOrder
    fecha?: SortOrder
    canjeado?: SortOrder
    canjeadoFecha?: SortOrder
    promocionVoucher?: PromocionOrderByWithRelationInput
    promocionId?: SortOrder
    promocionProducto?: ProductoOrderByWithRelationInput
    productoId?: SortOrder
    cantidad?: SortOrder
    usuario?: UsuarioOrderByWithRelationInput
    usuarioId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type VoucherWhereUniqueInput = {
    id?: string
    codigo?: number
    usuarioId?: string
  }

  export type VoucherOrderByWithAggregationInput = {
    id?: SortOrder
    codigo?: SortOrder
    fecha?: SortOrder
    canjeado?: SortOrder
    canjeadoFecha?: SortOrder
    promocionId?: SortOrder
    productoId?: SortOrder
    cantidad?: SortOrder
    usuarioId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: VoucherCountOrderByAggregateInput
    _avg?: VoucherAvgOrderByAggregateInput
    _max?: VoucherMaxOrderByAggregateInput
    _min?: VoucherMinOrderByAggregateInput
    _sum?: VoucherSumOrderByAggregateInput
  }

  export type VoucherScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VoucherScalarWhereWithAggregatesInput>
    OR?: Enumerable<VoucherScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VoucherScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    codigo?: IntWithAggregatesFilter | number
    fecha?: DateTimeWithAggregatesFilter | Date | string
    canjeado?: BoolWithAggregatesFilter | boolean
    canjeadoFecha?: DateTimeNullableWithAggregatesFilter | Date | string | null
    promocionId?: StringWithAggregatesFilter | string
    productoId?: StringWithAggregatesFilter | string
    cantidad?: IntWithAggregatesFilter | number
    usuarioId?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type SequenceWhereInput = {
    AND?: Enumerable<SequenceWhereInput>
    OR?: Enumerable<SequenceWhereInput>
    NOT?: Enumerable<SequenceWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    seq?: IntFilter | number
  }

  export type SequenceOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    seq?: SortOrder
  }

  export type SequenceWhereUniqueInput = {
    id?: string
    nombre?: string
  }

  export type SequenceOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    seq?: SortOrder
    _count?: SequenceCountOrderByAggregateInput
    _avg?: SequenceAvgOrderByAggregateInput
    _max?: SequenceMaxOrderByAggregateInput
    _min?: SequenceMinOrderByAggregateInput
    _sum?: SequenceSumOrderByAggregateInput
  }

  export type SequenceScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SequenceScalarWhereWithAggregatesInput>
    OR?: Enumerable<SequenceScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SequenceScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    seq?: IntWithAggregatesFilter | number
  }

  export type ProductoWhereInput = {
    AND?: Enumerable<ProductoWhereInput>
    OR?: Enumerable<ProductoWhereInput>
    NOT?: Enumerable<ProductoWhereInput>
    id?: StringFilter | string
    nombre?: StringFilter | string
    codigo?: IntFilter | number
    precio?: IntNullableFilter | number | null
    codigoBarra?: StringNullableFilter | string | null
    estado?: BoolFilter | boolean
    orden?: IntFilter | number
    productos?: VoucherListRelationFilter
    productosPromoDet?: PromocionDetalleListRelationFilter
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type ProductoOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    precio?: SortOrder
    codigoBarra?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    productos?: VoucherOrderByRelationAggregateInput
    productosPromoDet?: PromocionDetalleOrderByRelationAggregateInput
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductoWhereUniqueInput = {
    id?: string
    nombre?: string
    codigoBarra?: string
  }

  export type ProductoOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    precio?: SortOrder
    codigoBarra?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: ProductoCountOrderByAggregateInput
    _avg?: ProductoAvgOrderByAggregateInput
    _max?: ProductoMaxOrderByAggregateInput
    _min?: ProductoMinOrderByAggregateInput
    _sum?: ProductoSumOrderByAggregateInput
  }

  export type ProductoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProductoScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProductoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProductoScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    nombre?: StringWithAggregatesFilter | string
    codigo?: IntWithAggregatesFilter | number
    precio?: IntNullableWithAggregatesFilter | number | null
    codigoBarra?: StringNullableWithAggregatesFilter | string | null
    estado?: BoolWithAggregatesFilter | boolean
    orden?: IntWithAggregatesFilter | number
    created_at?: DateTimeWithAggregatesFilter | Date | string
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type BannerCreateInput = {
    id?: string
    title: string
    description?: BannerCreatedescriptionInput | Enumerable<string>
    image: string
    bg: string
    status: boolean
    order: number
    created_at: string
  }

  export type BannerUncheckedCreateInput = {
    id?: string
    title: string
    description?: BannerCreatedescriptionInput | Enumerable<string>
    image: string
    bg: string
    status: boolean
    order: number
    created_at: string
  }

  export type BannerUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: BannerUpdatedescriptionInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    bg?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type BannerUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: BannerUpdatedescriptionInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    bg?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type BannerCreateManyInput = {
    id?: string
    title: string
    description?: BannerCreatedescriptionInput | Enumerable<string>
    image: string
    bg: string
    status: boolean
    order: number
    created_at: string
  }

  export type BannerUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: BannerUpdatedescriptionInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    bg?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type BannerUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: BannerUpdatedescriptionInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    bg?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type ClientCreateInput = {
    id?: string
    title: string
    description?: ClientCreatedescriptionInput | Enumerable<string>
    status: boolean
    order: number
    created_at: string
  }

  export type ClientUncheckedCreateInput = {
    id?: string
    title: string
    description?: ClientCreatedescriptionInput | Enumerable<string>
    status: boolean
    order: number
    created_at: string
  }

  export type ClientUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: ClientUpdatedescriptionInput | Enumerable<string>
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type ClientUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: ClientUpdatedescriptionInput | Enumerable<string>
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type ClientCreateManyInput = {
    id?: string
    title: string
    description?: ClientCreatedescriptionInput | Enumerable<string>
    status: boolean
    order: number
    created_at: string
  }

  export type ClientUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: ClientUpdatedescriptionInput | Enumerable<string>
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type ClientUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: ClientUpdatedescriptionInput | Enumerable<string>
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type FilterCreateInput = {
    id?: string
    name: string
    image: string
    line?: string | null
    type?: string | null
    dia_ext?: string | null
    height?: string | null
    dia_int?: string | null
    thread?: string | null
    val_anti_ret?: string | null
    val_ali?: string | null
    model?: string | null
    status: boolean
    order: number
    created_at: string
    updated_at: string
  }

  export type FilterUncheckedCreateInput = {
    id?: string
    name: string
    image: string
    line?: string | null
    type?: string | null
    dia_ext?: string | null
    height?: string | null
    dia_int?: string | null
    thread?: string | null
    val_anti_ret?: string | null
    val_ali?: string | null
    model?: string | null
    status: boolean
    order: number
    created_at: string
    updated_at: string
  }

  export type FilterUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    line?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    dia_ext?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    dia_int?: NullableStringFieldUpdateOperationsInput | string | null
    thread?: NullableStringFieldUpdateOperationsInput | string | null
    val_anti_ret?: NullableStringFieldUpdateOperationsInput | string | null
    val_ali?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type FilterUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    line?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    dia_ext?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    dia_int?: NullableStringFieldUpdateOperationsInput | string | null
    thread?: NullableStringFieldUpdateOperationsInput | string | null
    val_anti_ret?: NullableStringFieldUpdateOperationsInput | string | null
    val_ali?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type FilterCreateManyInput = {
    id?: string
    name: string
    image: string
    line?: string | null
    type?: string | null
    dia_ext?: string | null
    height?: string | null
    dia_int?: string | null
    thread?: string | null
    val_anti_ret?: string | null
    val_ali?: string | null
    model?: string | null
    status: boolean
    order: number
    created_at: string
    updated_at: string
  }

  export type FilterUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    line?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    dia_ext?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    dia_int?: NullableStringFieldUpdateOperationsInput | string | null
    thread?: NullableStringFieldUpdateOperationsInput | string | null
    val_anti_ret?: NullableStringFieldUpdateOperationsInput | string | null
    val_ali?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type FilterUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    line?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    dia_ext?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    dia_int?: NullableStringFieldUpdateOperationsInput | string | null
    thread?: NullableStringFieldUpdateOperationsInput | string | null
    val_anti_ret?: NullableStringFieldUpdateOperationsInput | string | null
    val_ali?: NullableStringFieldUpdateOperationsInput | string | null
    model?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateInput = {
    id?: string
    title: string
    image: string
    category?: string | null
    capacity?: string | null
    cca10?: string | null
    polarity?: string | null
    large?: string | null
    width?: string | null
    height?: string | null
    status: boolean
    order: number
    created_at: string
    updated_at: string
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    title: string
    image: string
    category?: string | null
    capacity?: string | null
    cca10?: string | null
    polarity?: string | null
    large?: string | null
    width?: string | null
    height?: string | null
    status: boolean
    order: number
    created_at: string
    updated_at: string
  }

  export type ProductUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    cca10?: NullableStringFieldUpdateOperationsInput | string | null
    polarity?: NullableStringFieldUpdateOperationsInput | string | null
    large?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    cca10?: NullableStringFieldUpdateOperationsInput | string | null
    polarity?: NullableStringFieldUpdateOperationsInput | string | null
    large?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type ProductCreateManyInput = {
    id?: string
    title: string
    image: string
    category?: string | null
    capacity?: string | null
    cca10?: string | null
    polarity?: string | null
    large?: string | null
    width?: string | null
    height?: string | null
    status: boolean
    order: number
    created_at: string
    updated_at: string
  }

  export type ProductUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    cca10?: NullableStringFieldUpdateOperationsInput | string | null
    polarity?: NullableStringFieldUpdateOperationsInput | string | null
    large?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    category?: NullableStringFieldUpdateOperationsInput | string | null
    capacity?: NullableStringFieldUpdateOperationsInput | string | null
    cca10?: NullableStringFieldUpdateOperationsInput | string | null
    polarity?: NullableStringFieldUpdateOperationsInput | string | null
    large?: NullableStringFieldUpdateOperationsInput | string | null
    width?: NullableStringFieldUpdateOperationsInput | string | null
    height?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewCreateInput = {
    id?: string
    body?: ReviewCreatebodyInput | Enumerable<string>
    author: string
    status: boolean
    order: number
    created_at: string
  }

  export type ReviewUncheckedCreateInput = {
    id?: string
    body?: ReviewCreatebodyInput | Enumerable<string>
    author: string
    status: boolean
    order: number
    created_at: string
  }

  export type ReviewUpdateInput = {
    body?: ReviewUpdatebodyInput | Enumerable<string>
    author?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUncheckedUpdateInput = {
    body?: ReviewUpdatebodyInput | Enumerable<string>
    author?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewCreateManyInput = {
    id?: string
    body?: ReviewCreatebodyInput | Enumerable<string>
    author: string
    status: boolean
    order: number
    created_at: string
  }

  export type ReviewUpdateManyMutationInput = {
    body?: ReviewUpdatebodyInput | Enumerable<string>
    author?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUncheckedUpdateManyInput = {
    body?: ReviewUpdatebodyInput | Enumerable<string>
    author?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type SuccessCreateInput = {
    id?: string
    title: string
    description?: SuccessCreatedescriptionInput | Enumerable<string>
    status: boolean
    order: number
    created_at: string
  }

  export type SuccessUncheckedCreateInput = {
    id?: string
    title: string
    description?: SuccessCreatedescriptionInput | Enumerable<string>
    status: boolean
    order: number
    created_at: string
  }

  export type SuccessUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: SuccessUpdatedescriptionInput | Enumerable<string>
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type SuccessUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: SuccessUpdatedescriptionInput | Enumerable<string>
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type SuccessCreateManyInput = {
    id?: string
    title: string
    description?: SuccessCreatedescriptionInput | Enumerable<string>
    status: boolean
    order: number
    created_at: string
  }

  export type SuccessUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: SuccessUpdatedescriptionInput | Enumerable<string>
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type SuccessUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: SuccessUpdatedescriptionInput | Enumerable<string>
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role: string
    created_at: string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role: string
    created_at: string
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    role: string
    created_at: string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubVehLivianoCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubVehLivianoCreatedescripcionInput | Enumerable<string>
    image?: string | null
    presentacion: string
    status: boolean
    order: number
    indicado_para: string
    especificacion: string
    created_at: string
    updated_at: string
  }

  export type LubVehLivianoUncheckedCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubVehLivianoCreatedescripcionInput | Enumerable<string>
    image?: string | null
    presentacion: string
    status: boolean
    order: number
    indicado_para: string
    especificacion: string
    created_at: string
    updated_at: string
  }

  export type LubVehLivianoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubVehLivianoUpdatedescripcionInput | Enumerable<string>
    image?: NullableStringFieldUpdateOperationsInput | string | null
    presentacion?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    indicado_para?: StringFieldUpdateOperationsInput | string
    especificacion?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubVehLivianoUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubVehLivianoUpdatedescripcionInput | Enumerable<string>
    image?: NullableStringFieldUpdateOperationsInput | string | null
    presentacion?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    indicado_para?: StringFieldUpdateOperationsInput | string
    especificacion?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubVehLivianoCreateManyInput = {
    id?: string
    nombre: string
    descripcion?: LubVehLivianoCreatedescripcionInput | Enumerable<string>
    image?: string | null
    presentacion: string
    status: boolean
    order: number
    indicado_para: string
    especificacion: string
    created_at: string
    updated_at: string
  }

  export type LubVehLivianoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubVehLivianoUpdatedescripcionInput | Enumerable<string>
    image?: NullableStringFieldUpdateOperationsInput | string | null
    presentacion?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    indicado_para?: StringFieldUpdateOperationsInput | string
    especificacion?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubVehLivianoUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubVehLivianoUpdatedescripcionInput | Enumerable<string>
    image?: NullableStringFieldUpdateOperationsInput | string | null
    presentacion?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    indicado_para?: StringFieldUpdateOperationsInput | string
    especificacion?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubMotoCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubMotoCreatedescripcionInput | Enumerable<string>
    presentacion: string
    indicado_para: string
    status: boolean
    order: number
    image: string
    created_at: string
    updated_at: string
  }

  export type LubMotoUncheckedCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubMotoCreatedescripcionInput | Enumerable<string>
    presentacion: string
    indicado_para: string
    status: boolean
    order: number
    image: string
    created_at: string
    updated_at: string
  }

  export type LubMotoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubMotoUpdatedescripcionInput | Enumerable<string>
    presentacion?: StringFieldUpdateOperationsInput | string
    indicado_para?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubMotoUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubMotoUpdatedescripcionInput | Enumerable<string>
    presentacion?: StringFieldUpdateOperationsInput | string
    indicado_para?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubMotoCreateManyInput = {
    id?: string
    nombre: string
    descripcion?: LubMotoCreatedescripcionInput | Enumerable<string>
    presentacion: string
    indicado_para: string
    status: boolean
    order: number
    image: string
    created_at: string
    updated_at: string
  }

  export type LubMotoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubMotoUpdatedescripcionInput | Enumerable<string>
    presentacion?: StringFieldUpdateOperationsInput | string
    indicado_para?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubMotoUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubMotoUpdatedescripcionInput | Enumerable<string>
    presentacion?: StringFieldUpdateOperationsInput | string
    indicado_para?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    image?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubAuxCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubAuxCreatedescripcionInput | Enumerable<string>
    image: string
    presentacion: string
    status: boolean
    order: number
    indicado_para: string
    rec_honda: boolean
    created_at: string
    updated_at: string
  }

  export type LubAuxUncheckedCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubAuxCreatedescripcionInput | Enumerable<string>
    image: string
    presentacion: string
    status: boolean
    order: number
    indicado_para: string
    rec_honda: boolean
    created_at: string
    updated_at: string
  }

  export type LubAuxUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubAuxUpdatedescripcionInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    presentacion?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    indicado_para?: StringFieldUpdateOperationsInput | string
    rec_honda?: BoolFieldUpdateOperationsInput | boolean
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubAuxUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubAuxUpdatedescripcionInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    presentacion?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    indicado_para?: StringFieldUpdateOperationsInput | string
    rec_honda?: BoolFieldUpdateOperationsInput | boolean
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubAuxCreateManyInput = {
    id?: string
    nombre: string
    descripcion?: LubAuxCreatedescripcionInput | Enumerable<string>
    image: string
    presentacion: string
    status: boolean
    order: number
    indicado_para: string
    rec_honda: boolean
    created_at: string
    updated_at: string
  }

  export type LubAuxUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubAuxUpdatedescripcionInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    presentacion?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    indicado_para?: StringFieldUpdateOperationsInput | string
    rec_honda?: BoolFieldUpdateOperationsInput | boolean
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubAuxUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubAuxUpdatedescripcionInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    presentacion?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    indicado_para?: StringFieldUpdateOperationsInput | string
    rec_honda?: BoolFieldUpdateOperationsInput | boolean
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubVehPesadoCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubVehPesadoCreatedescripcionInput | Enumerable<string>
    caracteristicas?: LubVehPesadoCreatecaracteristicasInput | Enumerable<string>
    image: string
    presentacion: string
    atiende_excede: string
    aprobado: string
    status: boolean
    order: number
    rec_exxon_mob: string
    created_at: string
    updated_at: string
  }

  export type LubVehPesadoUncheckedCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubVehPesadoCreatedescripcionInput | Enumerable<string>
    caracteristicas?: LubVehPesadoCreatecaracteristicasInput | Enumerable<string>
    image: string
    presentacion: string
    atiende_excede: string
    aprobado: string
    status: boolean
    order: number
    rec_exxon_mob: string
    created_at: string
    updated_at: string
  }

  export type LubVehPesadoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubVehPesadoUpdatedescripcionInput | Enumerable<string>
    caracteristicas?: LubVehPesadoUpdatecaracteristicasInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    presentacion?: StringFieldUpdateOperationsInput | string
    atiende_excede?: StringFieldUpdateOperationsInput | string
    aprobado?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    rec_exxon_mob?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubVehPesadoUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubVehPesadoUpdatedescripcionInput | Enumerable<string>
    caracteristicas?: LubVehPesadoUpdatecaracteristicasInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    presentacion?: StringFieldUpdateOperationsInput | string
    atiende_excede?: StringFieldUpdateOperationsInput | string
    aprobado?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    rec_exxon_mob?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubVehPesadoCreateManyInput = {
    id?: string
    nombre: string
    descripcion?: LubVehPesadoCreatedescripcionInput | Enumerable<string>
    caracteristicas?: LubVehPesadoCreatecaracteristicasInput | Enumerable<string>
    image: string
    presentacion: string
    atiende_excede: string
    aprobado: string
    status: boolean
    order: number
    rec_exxon_mob: string
    created_at: string
    updated_at: string
  }

  export type LubVehPesadoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubVehPesadoUpdatedescripcionInput | Enumerable<string>
    caracteristicas?: LubVehPesadoUpdatecaracteristicasInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    presentacion?: StringFieldUpdateOperationsInput | string
    atiende_excede?: StringFieldUpdateOperationsInput | string
    aprobado?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    rec_exxon_mob?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type LubVehPesadoUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubVehPesadoUpdatedescripcionInput | Enumerable<string>
    caracteristicas?: LubVehPesadoUpdatecaracteristicasInput | Enumerable<string>
    image?: StringFieldUpdateOperationsInput | string
    presentacion?: StringFieldUpdateOperationsInput | string
    atiende_excede?: StringFieldUpdateOperationsInput | string
    aprobado?: StringFieldUpdateOperationsInput | string
    status?: BoolFieldUpdateOperationsInput | boolean
    order?: IntFieldUpdateOperationsInput | number
    rec_exxon_mob?: StringFieldUpdateOperationsInput | string
    created_at?: StringFieldUpdateOperationsInput | string
    updated_at?: StringFieldUpdateOperationsInput | string
  }

  export type FiltrosCreateInput = {
    id?: string
    nombre: string
    linea: string
    imagen: string
    altura?: string | null
    dia_ext?: string | null
    dia_int?: string | null
    estado?: boolean
    orden?: number
    rosca?: string | null
    tipo: string
    val_anti_ret?: string | null
    val_ali?: string | null
    modelo?: string | null
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type FiltrosUncheckedCreateInput = {
    id?: string
    nombre: string
    linea: string
    imagen: string
    altura?: string | null
    dia_ext?: string | null
    dia_int?: string | null
    estado?: boolean
    orden?: number
    rosca?: string | null
    tipo: string
    val_anti_ret?: string | null
    val_ali?: string | null
    modelo?: string | null
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type FiltrosUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    linea?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    altura?: NullableStringFieldUpdateOperationsInput | string | null
    dia_ext?: NullableStringFieldUpdateOperationsInput | string | null
    dia_int?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    rosca?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    val_anti_ret?: NullableStringFieldUpdateOperationsInput | string | null
    val_ali?: NullableStringFieldUpdateOperationsInput | string | null
    modelo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FiltrosUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    linea?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    altura?: NullableStringFieldUpdateOperationsInput | string | null
    dia_ext?: NullableStringFieldUpdateOperationsInput | string | null
    dia_int?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    rosca?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    val_anti_ret?: NullableStringFieldUpdateOperationsInput | string | null
    val_ali?: NullableStringFieldUpdateOperationsInput | string | null
    modelo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FiltrosCreateManyInput = {
    id?: string
    nombre: string
    linea: string
    imagen: string
    altura?: string | null
    dia_ext?: string | null
    dia_int?: string | null
    estado?: boolean
    orden?: number
    rosca?: string | null
    tipo: string
    val_anti_ret?: string | null
    val_ali?: string | null
    modelo?: string | null
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type FiltrosUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    linea?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    altura?: NullableStringFieldUpdateOperationsInput | string | null
    dia_ext?: NullableStringFieldUpdateOperationsInput | string | null
    dia_int?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    rosca?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    val_anti_ret?: NullableStringFieldUpdateOperationsInput | string | null
    val_ali?: NullableStringFieldUpdateOperationsInput | string | null
    modelo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FiltrosUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    linea?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    altura?: NullableStringFieldUpdateOperationsInput | string | null
    dia_ext?: NullableStringFieldUpdateOperationsInput | string | null
    dia_int?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    rosca?: NullableStringFieldUpdateOperationsInput | string | null
    tipo?: StringFieldUpdateOperationsInput | string
    val_anti_ret?: NullableStringFieldUpdateOperationsInput | string | null
    val_ali?: NullableStringFieldUpdateOperationsInput | string | null
    modelo?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LubricantesCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubricantesCreatedescripcionInput | Enumerable<string>
    imagen: string
    linea: string
    presentacion?: string | null
    indicado_para?: string | null
    especificacion?: string | null
    rec_honda: boolean
    rec_exxon_mob?: string | null
    caracteristicas?: LubricantesCreatecaracteristicasInput | Enumerable<string>
    atiende_excede?: string | null
    aprobado?: string | null
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type LubricantesUncheckedCreateInput = {
    id?: string
    nombre: string
    descripcion?: LubricantesCreatedescripcionInput | Enumerable<string>
    imagen: string
    linea: string
    presentacion?: string | null
    indicado_para?: string | null
    especificacion?: string | null
    rec_honda: boolean
    rec_exxon_mob?: string | null
    caracteristicas?: LubricantesCreatecaracteristicasInput | Enumerable<string>
    atiende_excede?: string | null
    aprobado?: string | null
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type LubricantesUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubricantesUpdatedescripcionInput | Enumerable<string>
    imagen?: StringFieldUpdateOperationsInput | string
    linea?: StringFieldUpdateOperationsInput | string
    presentacion?: NullableStringFieldUpdateOperationsInput | string | null
    indicado_para?: NullableStringFieldUpdateOperationsInput | string | null
    especificacion?: NullableStringFieldUpdateOperationsInput | string | null
    rec_honda?: BoolFieldUpdateOperationsInput | boolean
    rec_exxon_mob?: NullableStringFieldUpdateOperationsInput | string | null
    caracteristicas?: LubricantesUpdatecaracteristicasInput | Enumerable<string>
    atiende_excede?: NullableStringFieldUpdateOperationsInput | string | null
    aprobado?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LubricantesUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubricantesUpdatedescripcionInput | Enumerable<string>
    imagen?: StringFieldUpdateOperationsInput | string
    linea?: StringFieldUpdateOperationsInput | string
    presentacion?: NullableStringFieldUpdateOperationsInput | string | null
    indicado_para?: NullableStringFieldUpdateOperationsInput | string | null
    especificacion?: NullableStringFieldUpdateOperationsInput | string | null
    rec_honda?: BoolFieldUpdateOperationsInput | boolean
    rec_exxon_mob?: NullableStringFieldUpdateOperationsInput | string | null
    caracteristicas?: LubricantesUpdatecaracteristicasInput | Enumerable<string>
    atiende_excede?: NullableStringFieldUpdateOperationsInput | string | null
    aprobado?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LubricantesCreateManyInput = {
    id?: string
    nombre: string
    descripcion?: LubricantesCreatedescripcionInput | Enumerable<string>
    imagen: string
    linea: string
    presentacion?: string | null
    indicado_para?: string | null
    especificacion?: string | null
    rec_honda: boolean
    rec_exxon_mob?: string | null
    caracteristicas?: LubricantesCreatecaracteristicasInput | Enumerable<string>
    atiende_excede?: string | null
    aprobado?: string | null
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type LubricantesUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubricantesUpdatedescripcionInput | Enumerable<string>
    imagen?: StringFieldUpdateOperationsInput | string
    linea?: StringFieldUpdateOperationsInput | string
    presentacion?: NullableStringFieldUpdateOperationsInput | string | null
    indicado_para?: NullableStringFieldUpdateOperationsInput | string | null
    especificacion?: NullableStringFieldUpdateOperationsInput | string | null
    rec_honda?: BoolFieldUpdateOperationsInput | boolean
    rec_exxon_mob?: NullableStringFieldUpdateOperationsInput | string | null
    caracteristicas?: LubricantesUpdatecaracteristicasInput | Enumerable<string>
    atiende_excede?: NullableStringFieldUpdateOperationsInput | string | null
    aprobado?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type LubricantesUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    descripcion?: LubricantesUpdatedescripcionInput | Enumerable<string>
    imagen?: StringFieldUpdateOperationsInput | string
    linea?: StringFieldUpdateOperationsInput | string
    presentacion?: NullableStringFieldUpdateOperationsInput | string | null
    indicado_para?: NullableStringFieldUpdateOperationsInput | string | null
    especificacion?: NullableStringFieldUpdateOperationsInput | string | null
    rec_honda?: BoolFieldUpdateOperationsInput | boolean
    rec_exxon_mob?: NullableStringFieldUpdateOperationsInput | string | null
    caracteristicas?: LubricantesUpdatecaracteristicasInput | Enumerable<string>
    atiende_excede?: NullableStringFieldUpdateOperationsInput | string | null
    aprobado?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BateriasCreateInput = {
    id?: string
    nombre: string
    imagen: string
    categoria?: string | null
    capacidad?: string | null
    cca10?: string | null
    polaridad?: string | null
    largo?: string | null
    ancho?: string | null
    altura?: string | null
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type BateriasUncheckedCreateInput = {
    id?: string
    nombre: string
    imagen: string
    categoria?: string | null
    capacidad?: string | null
    cca10?: string | null
    polaridad?: string | null
    largo?: string | null
    ancho?: string | null
    altura?: string | null
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type BateriasUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    capacidad?: NullableStringFieldUpdateOperationsInput | string | null
    cca10?: NullableStringFieldUpdateOperationsInput | string | null
    polaridad?: NullableStringFieldUpdateOperationsInput | string | null
    largo?: NullableStringFieldUpdateOperationsInput | string | null
    ancho?: NullableStringFieldUpdateOperationsInput | string | null
    altura?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BateriasUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    capacidad?: NullableStringFieldUpdateOperationsInput | string | null
    cca10?: NullableStringFieldUpdateOperationsInput | string | null
    polaridad?: NullableStringFieldUpdateOperationsInput | string | null
    largo?: NullableStringFieldUpdateOperationsInput | string | null
    ancho?: NullableStringFieldUpdateOperationsInput | string | null
    altura?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BateriasCreateManyInput = {
    id?: string
    nombre: string
    imagen: string
    categoria?: string | null
    capacidad?: string | null
    cca10?: string | null
    polaridad?: string | null
    largo?: string | null
    ancho?: string | null
    altura?: string | null
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type BateriasUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    capacidad?: NullableStringFieldUpdateOperationsInput | string | null
    cca10?: NullableStringFieldUpdateOperationsInput | string | null
    polaridad?: NullableStringFieldUpdateOperationsInput | string | null
    largo?: NullableStringFieldUpdateOperationsInput | string | null
    ancho?: NullableStringFieldUpdateOperationsInput | string | null
    altura?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type BateriasUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    categoria?: NullableStringFieldUpdateOperationsInput | string | null
    capacidad?: NullableStringFieldUpdateOperationsInput | string | null
    cca10?: NullableStringFieldUpdateOperationsInput | string | null
    polaridad?: NullableStringFieldUpdateOperationsInput | string | null
    largo?: NullableStringFieldUpdateOperationsInput | string | null
    ancho?: NullableStringFieldUpdateOperationsInput | string | null
    altura?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VacanciasCreateInput = {
    id?: string
    titulo: string
    imagen: string
    preguntas?: VacanciasCreatepreguntasInput | Enumerable<string>
    requisitos?: VacanciasCreaterequisitosInput | Enumerable<string>
    vigencia: string
    area: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type VacanciasUncheckedCreateInput = {
    id?: string
    titulo: string
    imagen: string
    preguntas?: VacanciasCreatepreguntasInput | Enumerable<string>
    requisitos?: VacanciasCreaterequisitosInput | Enumerable<string>
    vigencia: string
    area: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type VacanciasUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    preguntas?: VacanciasUpdatepreguntasInput | Enumerable<string>
    requisitos?: VacanciasUpdaterequisitosInput | Enumerable<string>
    vigencia?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VacanciasUncheckedUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    preguntas?: VacanciasUpdatepreguntasInput | Enumerable<string>
    requisitos?: VacanciasUpdaterequisitosInput | Enumerable<string>
    vigencia?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VacanciasCreateManyInput = {
    id?: string
    titulo: string
    imagen: string
    preguntas?: VacanciasCreatepreguntasInput | Enumerable<string>
    requisitos?: VacanciasCreaterequisitosInput | Enumerable<string>
    vigencia: string
    area: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type VacanciasUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    preguntas?: VacanciasUpdatepreguntasInput | Enumerable<string>
    requisitos?: VacanciasUpdaterequisitosInput | Enumerable<string>
    vigencia?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VacanciasUncheckedUpdateManyInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    preguntas?: VacanciasUpdatepreguntasInput | Enumerable<string>
    requisitos?: VacanciasUpdaterequisitosInput | Enumerable<string>
    vigencia?: StringFieldUpdateOperationsInput | string
    area?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MarcasCreateInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type MarcasUncheckedCreateInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type MarcasUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MarcasUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MarcasCreateManyInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type MarcasUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MarcasUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientesCreateInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ClientesUncheckedCreateInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ClientesUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientesUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientesCreateManyInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ClientesUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ClientesUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PromocionCreateInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    promocionVouchers?: VoucherCreateNestedManyWithoutPromocionVoucherInput
    empresa: EmpresaCreateNestedOneWithoutEmpresaInput
    promociones?: PromocionDetalleCreateNestedManyWithoutPromocionInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionUncheckedCreateInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    promocionVouchers?: VoucherUncheckedCreateNestedManyWithoutPromocionVoucherInput
    empresaId: string
    promociones?: PromocionDetalleUncheckedCreateNestedManyWithoutPromocionInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionVouchers?: VoucherUpdateManyWithoutPromocionVoucherNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutEmpresaNestedInput
    promociones?: PromocionDetalleUpdateManyWithoutPromocionNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionVouchers?: VoucherUncheckedUpdateManyWithoutPromocionVoucherNestedInput
    empresaId?: StringFieldUpdateOperationsInput | string
    promociones?: PromocionDetalleUncheckedUpdateManyWithoutPromocionNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionCreateManyInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    empresaId: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    empresaId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleCreateInput = {
    id?: string
    promocion: PromocionCreateNestedOneWithoutPromocionesInput
    producto: ProductoCreateNestedOneWithoutProductosPromoDetInput
    porcentaje?: number | null
    monto?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionDetalleUncheckedCreateInput = {
    id?: string
    promocionId: string
    productoId: string
    porcentaje?: number | null
    monto?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionDetalleUpdateInput = {
    promocion?: PromocionUpdateOneRequiredWithoutPromocionesNestedInput
    producto?: ProductoUpdateOneRequiredWithoutProductosPromoDetNestedInput
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleUncheckedUpdateInput = {
    promocionId?: StringFieldUpdateOperationsInput | string
    productoId?: StringFieldUpdateOperationsInput | string
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleCreateManyInput = {
    id?: string
    promocionId: string
    productoId: string
    porcentaje?: number | null
    monto?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionDetalleUpdateManyMutationInput = {
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleUncheckedUpdateManyInput = {
    promocionId?: StringFieldUpdateOperationsInput | string
    productoId?: StringFieldUpdateOperationsInput | string
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaCreateInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    empresa?: PromocionCreateNestedOneWithoutEmpresaInput
    empresaUsuario?: UsuarioCreateNestedManyWithoutEmpresaUsuarioInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmpresaUncheckedCreateInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    empresa?: PromocionUncheckedCreateNestedOneWithoutEmpresaInput
    empresaUsuario?: UsuarioUncheckedCreateNestedManyWithoutEmpresaUsuarioInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmpresaUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    empresa?: PromocionUpdateOneWithoutEmpresaNestedInput
    empresaUsuario?: UsuarioUpdateManyWithoutEmpresaUsuarioNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    empresa?: PromocionUncheckedUpdateOneWithoutEmpresaNestedInput
    empresaUsuario?: UsuarioUncheckedUpdateManyWithoutEmpresaUsuarioNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaCreateManyInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmpresaUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateInput = {
    id?: string
    cedula?: string | null
    codigo?: string | null
    nombre: string
    estado?: boolean
    telefono?: string | null
    email?: string | null
    empresaUsuario: EmpresaCreateNestedOneWithoutEmpresaUsuarioInput
    usuarios?: VoucherCreateNestedManyWithoutUsuarioInput
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsuarioUncheckedCreateInput = {
    id?: string
    cedula?: string | null
    codigo?: string | null
    nombre: string
    estado?: boolean
    telefono?: string | null
    email?: string | null
    empresaId: string
    usuarios?: VoucherUncheckedCreateNestedManyWithoutUsuarioInput
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsuarioUpdateInput = {
    cedula?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    empresaUsuario?: EmpresaUpdateOneRequiredWithoutEmpresaUsuarioNestedInput
    usuarios?: VoucherUpdateManyWithoutUsuarioNestedInput
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUncheckedUpdateInput = {
    cedula?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: StringFieldUpdateOperationsInput | string
    usuarios?: VoucherUncheckedUpdateManyWithoutUsuarioNestedInput
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioCreateManyInput = {
    id?: string
    cedula?: string | null
    codigo?: string | null
    nombre: string
    estado?: boolean
    telefono?: string | null
    email?: string | null
    empresaId: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsuarioUpdateManyMutationInput = {
    cedula?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUncheckedUpdateManyInput = {
    cedula?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VoucherCreateInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionVoucher: PromocionCreateNestedOneWithoutPromocionVouchersInput
    promocionProducto: ProductoCreateNestedOneWithoutProductosInput
    cantidad?: number
    usuario: UsuarioCreateNestedOneWithoutUsuariosInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherUncheckedCreateInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionId: string
    productoId: string
    cantidad?: number
    usuarioId: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherUpdateInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionVoucher?: PromocionUpdateOneRequiredWithoutPromocionVouchersNestedInput
    promocionProducto?: ProductoUpdateOneRequiredWithoutProductosNestedInput
    cantidad?: IntFieldUpdateOperationsInput | number
    usuario?: UsuarioUpdateOneRequiredWithoutUsuariosNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherUncheckedUpdateInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionId?: StringFieldUpdateOperationsInput | string
    productoId?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    usuarioId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherCreateManyInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionId: string
    productoId: string
    cantidad?: number
    usuarioId: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherUpdateManyMutationInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cantidad?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherUncheckedUpdateManyInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionId?: StringFieldUpdateOperationsInput | string
    productoId?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    usuarioId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SequenceCreateInput = {
    id?: string
    nombre?: string
    seq?: number
  }

  export type SequenceUncheckedCreateInput = {
    id?: string
    nombre?: string
    seq?: number
  }

  export type SequenceUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type SequenceUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type SequenceCreateManyInput = {
    id?: string
    nombre?: string
    seq?: number
  }

  export type SequenceUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type SequenceUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    seq?: IntFieldUpdateOperationsInput | number
  }

  export type ProductoCreateInput = {
    id?: string
    nombre: string
    codigo: number
    precio?: number | null
    codigoBarra?: string | null
    estado?: boolean
    orden?: number
    productos?: VoucherCreateNestedManyWithoutPromocionProductoInput
    productosPromoDet?: PromocionDetalleCreateNestedManyWithoutProductoInput
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ProductoUncheckedCreateInput = {
    id?: string
    nombre: string
    codigo: number
    precio?: number | null
    codigoBarra?: string | null
    estado?: boolean
    orden?: number
    productos?: VoucherUncheckedCreateNestedManyWithoutPromocionProductoInput
    productosPromoDet?: PromocionDetalleUncheckedCreateNestedManyWithoutProductoInput
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ProductoUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: IntFieldUpdateOperationsInput | number
    precio?: NullableIntFieldUpdateOperationsInput | number | null
    codigoBarra?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    productos?: VoucherUpdateManyWithoutPromocionProductoNestedInput
    productosPromoDet?: PromocionDetalleUpdateManyWithoutProductoNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductoUncheckedUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: IntFieldUpdateOperationsInput | number
    precio?: NullableIntFieldUpdateOperationsInput | number | null
    codigoBarra?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    productos?: VoucherUncheckedUpdateManyWithoutPromocionProductoNestedInput
    productosPromoDet?: PromocionDetalleUncheckedUpdateManyWithoutProductoNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductoCreateManyInput = {
    id?: string
    nombre: string
    codigo: number
    precio?: number | null
    codigoBarra?: string | null
    estado?: boolean
    orden?: number
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ProductoUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: IntFieldUpdateOperationsInput | number
    precio?: NullableIntFieldUpdateOperationsInput | number | null
    codigoBarra?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductoUncheckedUpdateManyInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: IntFieldUpdateOperationsInput | number
    precio?: NullableIntFieldUpdateOperationsInput | number | null
    codigoBarra?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type BannerCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    image?: SortOrder
    bg?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type BannerAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type BannerMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    bg?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type BannerMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    bg?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type BannerSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type ClientCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type ClientAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type ClientMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type ClientMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type ClientSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type FilterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    line?: SortOrder
    type?: SortOrder
    dia_ext?: SortOrder
    height?: SortOrder
    dia_int?: SortOrder
    thread?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    model?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FilterAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type FilterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    line?: SortOrder
    type?: SortOrder
    dia_ext?: SortOrder
    height?: SortOrder
    dia_int?: SortOrder
    thread?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    model?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FilterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    line?: SortOrder
    type?: SortOrder
    dia_ext?: SortOrder
    height?: SortOrder
    dia_int?: SortOrder
    thread?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    model?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FilterSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    category?: SortOrder
    capacity?: SortOrder
    cca10?: SortOrder
    polarity?: SortOrder
    large?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    category?: SortOrder
    capacity?: SortOrder
    cca10?: SortOrder
    polarity?: SortOrder
    large?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    image?: SortOrder
    category?: SortOrder
    capacity?: SortOrder
    cca10?: SortOrder
    polarity?: SortOrder
    large?: SortOrder
    width?: SortOrder
    height?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    body?: SortOrder
    author?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    author?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    author?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type SuccessCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type SuccessAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type SuccessMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type SuccessMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    status?: SortOrder
    order?: SortOrder
    created_at?: SortOrder
  }

  export type SuccessSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    created_at?: SortOrder
  }

  export type LubVehLivianoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubVehLivianoAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type LubVehLivianoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubVehLivianoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubVehLivianoSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type LubMotoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    status?: SortOrder
    order?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubMotoAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type LubMotoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    status?: SortOrder
    order?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubMotoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    status?: SortOrder
    order?: SortOrder
    image?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubMotoSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type LubAuxCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    rec_honda?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubAuxAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type LubAuxMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    rec_honda?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubAuxMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    status?: SortOrder
    order?: SortOrder
    indicado_para?: SortOrder
    rec_honda?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubAuxSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type LubVehPesadoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    caracteristicas?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    status?: SortOrder
    order?: SortOrder
    rec_exxon_mob?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubVehPesadoAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type LubVehPesadoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    status?: SortOrder
    order?: SortOrder
    rec_exxon_mob?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubVehPesadoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    image?: SortOrder
    presentacion?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    status?: SortOrder
    order?: SortOrder
    rec_exxon_mob?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubVehPesadoSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
    isSet?: boolean
  }

  export type FiltrosCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    linea?: SortOrder
    imagen?: SortOrder
    altura?: SortOrder
    dia_ext?: SortOrder
    dia_int?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    rosca?: SortOrder
    tipo?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    modelo?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FiltrosAvgOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type FiltrosMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    linea?: SortOrder
    imagen?: SortOrder
    altura?: SortOrder
    dia_ext?: SortOrder
    dia_int?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    rosca?: SortOrder
    tipo?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    modelo?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FiltrosMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    linea?: SortOrder
    imagen?: SortOrder
    altura?: SortOrder
    dia_ext?: SortOrder
    dia_int?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    rosca?: SortOrder
    tipo?: SortOrder
    val_anti_ret?: SortOrder
    val_ali?: SortOrder
    modelo?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type FiltrosSumOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    isSet?: boolean
  }

  export type LubricantesCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    descripcion?: SortOrder
    imagen?: SortOrder
    linea?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    rec_honda?: SortOrder
    rec_exxon_mob?: SortOrder
    caracteristicas?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubricantesAvgOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type LubricantesMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    linea?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    rec_honda?: SortOrder
    rec_exxon_mob?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubricantesMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    linea?: SortOrder
    presentacion?: SortOrder
    indicado_para?: SortOrder
    especificacion?: SortOrder
    rec_honda?: SortOrder
    rec_exxon_mob?: SortOrder
    atiende_excede?: SortOrder
    aprobado?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type LubricantesSumOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type BateriasCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    categoria?: SortOrder
    capacidad?: SortOrder
    cca10?: SortOrder
    polaridad?: SortOrder
    largo?: SortOrder
    ancho?: SortOrder
    altura?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BateriasAvgOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type BateriasMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    categoria?: SortOrder
    capacidad?: SortOrder
    cca10?: SortOrder
    polaridad?: SortOrder
    largo?: SortOrder
    ancho?: SortOrder
    altura?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BateriasMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
    categoria?: SortOrder
    capacidad?: SortOrder
    cca10?: SortOrder
    polaridad?: SortOrder
    largo?: SortOrder
    ancho?: SortOrder
    altura?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type BateriasSumOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type VacanciasCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagen?: SortOrder
    preguntas?: SortOrder
    requisitos?: SortOrder
    vigencia?: SortOrder
    area?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type VacanciasAvgOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type VacanciasMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagen?: SortOrder
    vigencia?: SortOrder
    area?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type VacanciasMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    imagen?: SortOrder
    vigencia?: SortOrder
    area?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type VacanciasSumOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type MarcasCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MarcasAvgOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type MarcasMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MarcasMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type MarcasSumOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type ClientesCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientesAvgOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type ClientesMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientesMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ClientesSumOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type VoucherListRelationFilter = {
    every?: VoucherWhereInput
    some?: VoucherWhereInput
    none?: VoucherWhereInput
  }

  export type EmpresaRelationFilter = {
    is?: EmpresaWhereInput
    isNot?: EmpresaWhereInput
  }

  export type PromocionDetalleListRelationFilter = {
    every?: PromocionDetalleWhereInput
    some?: PromocionDetalleWhereInput
    none?: PromocionDetalleWhereInput
  }

  export type VoucherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PromocionDetalleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PromocionCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    empresaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromocionAvgOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type PromocionMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    empresaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromocionMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    empresaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromocionSumOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type PromocionRelationFilter = {
    is?: PromocionWhereInput | null
    isNot?: PromocionWhereInput | null
  }

  export type ProductoRelationFilter = {
    is?: ProductoWhereInput
    isNot?: ProductoWhereInput
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type PromocionDetalleCountOrderByAggregateInput = {
    id?: SortOrder
    promocionId?: SortOrder
    productoId?: SortOrder
    porcentaje?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromocionDetalleAvgOrderByAggregateInput = {
    porcentaje?: SortOrder
    monto?: SortOrder
  }

  export type PromocionDetalleMaxOrderByAggregateInput = {
    id?: SortOrder
    promocionId?: SortOrder
    productoId?: SortOrder
    porcentaje?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromocionDetalleMinOrderByAggregateInput = {
    id?: SortOrder
    promocionId?: SortOrder
    productoId?: SortOrder
    porcentaje?: SortOrder
    monto?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type PromocionDetalleSumOrderByAggregateInput = {
    porcentaje?: SortOrder
    monto?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    isSet?: boolean
  }

  export type UsuarioListRelationFilter = {
    every?: UsuarioWhereInput
    some?: UsuarioWhereInput
    none?: UsuarioWhereInput
  }

  export type UsuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmpresaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EmpresaAvgOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type EmpresaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EmpresaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    link?: SortOrder
    imagen?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type EmpresaSumOrderByAggregateInput = {
    orden?: SortOrder
  }

  export type UsuarioCountOrderByAggregateInput = {
    id?: SortOrder
    cedula?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    estado?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    empresaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsuarioMaxOrderByAggregateInput = {
    id?: SortOrder
    cedula?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    estado?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    empresaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsuarioMinOrderByAggregateInput = {
    id?: SortOrder
    cedula?: SortOrder
    codigo?: SortOrder
    nombre?: SortOrder
    estado?: SortOrder
    telefono?: SortOrder
    email?: SortOrder
    empresaId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type UsuarioRelationFilter = {
    is?: UsuarioWhereInput
    isNot?: UsuarioWhereInput
  }

  export type VoucherCountOrderByAggregateInput = {
    id?: SortOrder
    codigo?: SortOrder
    fecha?: SortOrder
    canjeado?: SortOrder
    canjeadoFecha?: SortOrder
    promocionId?: SortOrder
    productoId?: SortOrder
    cantidad?: SortOrder
    usuarioId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type VoucherAvgOrderByAggregateInput = {
    codigo?: SortOrder
    cantidad?: SortOrder
  }

  export type VoucherMaxOrderByAggregateInput = {
    id?: SortOrder
    codigo?: SortOrder
    fecha?: SortOrder
    canjeado?: SortOrder
    canjeadoFecha?: SortOrder
    promocionId?: SortOrder
    productoId?: SortOrder
    cantidad?: SortOrder
    usuarioId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type VoucherMinOrderByAggregateInput = {
    id?: SortOrder
    codigo?: SortOrder
    fecha?: SortOrder
    canjeado?: SortOrder
    canjeadoFecha?: SortOrder
    promocionId?: SortOrder
    productoId?: SortOrder
    cantidad?: SortOrder
    usuarioId?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type VoucherSumOrderByAggregateInput = {
    codigo?: SortOrder
    cantidad?: SortOrder
  }

  export type SequenceCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    seq?: SortOrder
  }

  export type SequenceAvgOrderByAggregateInput = {
    seq?: SortOrder
  }

  export type SequenceMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    seq?: SortOrder
  }

  export type SequenceMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    seq?: SortOrder
  }

  export type SequenceSumOrderByAggregateInput = {
    seq?: SortOrder
  }

  export type ProductoCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    precio?: SortOrder
    codigoBarra?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductoAvgOrderByAggregateInput = {
    codigo?: SortOrder
    precio?: SortOrder
    orden?: SortOrder
  }

  export type ProductoMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    precio?: SortOrder
    codigoBarra?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductoMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    codigo?: SortOrder
    precio?: SortOrder
    codigoBarra?: SortOrder
    estado?: SortOrder
    orden?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type ProductoSumOrderByAggregateInput = {
    codigo?: SortOrder
    precio?: SortOrder
    orden?: SortOrder
  }

  export type BannerCreatedescriptionInput = {
    set: Enumerable<string>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BannerUpdatedescriptionInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClientCreatedescriptionInput = {
    set: Enumerable<string>
  }

  export type ClientUpdatedescriptionInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type ReviewCreatebodyInput = {
    set: Enumerable<string>
  }

  export type ReviewUpdatebodyInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type SuccessCreatedescriptionInput = {
    set: Enumerable<string>
  }

  export type SuccessUpdatedescriptionInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type LubVehLivianoCreatedescripcionInput = {
    set: Enumerable<string>
  }

  export type LubVehLivianoUpdatedescripcionInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type LubMotoCreatedescripcionInput = {
    set: Enumerable<string>
  }

  export type LubMotoUpdatedescripcionInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type LubAuxCreatedescripcionInput = {
    set: Enumerable<string>
  }

  export type LubAuxUpdatedescripcionInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type LubVehPesadoCreatedescripcionInput = {
    set: Enumerable<string>
  }

  export type LubVehPesadoCreatecaracteristicasInput = {
    set: Enumerable<string>
  }

  export type LubVehPesadoUpdatedescripcionInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type LubVehPesadoUpdatecaracteristicasInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type LubricantesCreatedescripcionInput = {
    set: Enumerable<string>
  }

  export type LubricantesCreatecaracteristicasInput = {
    set: Enumerable<string>
  }

  export type LubricantesUpdatedescripcionInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type LubricantesUpdatecaracteristicasInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type VacanciasCreatepreguntasInput = {
    set: Enumerable<string>
  }

  export type VacanciasCreaterequisitosInput = {
    set: Enumerable<string>
  }

  export type VacanciasUpdatepreguntasInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type VacanciasUpdaterequisitosInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type VoucherCreateNestedManyWithoutPromocionVoucherInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutPromocionVoucherInput>, Enumerable<VoucherUncheckedCreateWithoutPromocionVoucherInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutPromocionVoucherInput>
    createMany?: VoucherCreateManyPromocionVoucherInputEnvelope
    connect?: Enumerable<VoucherWhereUniqueInput>
  }

  export type EmpresaCreateNestedOneWithoutEmpresaInput = {
    create?: XOR<EmpresaCreateWithoutEmpresaInput, EmpresaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutEmpresaInput
    connect?: EmpresaWhereUniqueInput
  }

  export type PromocionDetalleCreateNestedManyWithoutPromocionInput = {
    create?: XOR<Enumerable<PromocionDetalleCreateWithoutPromocionInput>, Enumerable<PromocionDetalleUncheckedCreateWithoutPromocionInput>>
    connectOrCreate?: Enumerable<PromocionDetalleCreateOrConnectWithoutPromocionInput>
    createMany?: PromocionDetalleCreateManyPromocionInputEnvelope
    connect?: Enumerable<PromocionDetalleWhereUniqueInput>
  }

  export type VoucherUncheckedCreateNestedManyWithoutPromocionVoucherInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutPromocionVoucherInput>, Enumerable<VoucherUncheckedCreateWithoutPromocionVoucherInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutPromocionVoucherInput>
    createMany?: VoucherCreateManyPromocionVoucherInputEnvelope
    connect?: Enumerable<VoucherWhereUniqueInput>
  }

  export type PromocionDetalleUncheckedCreateNestedManyWithoutPromocionInput = {
    create?: XOR<Enumerable<PromocionDetalleCreateWithoutPromocionInput>, Enumerable<PromocionDetalleUncheckedCreateWithoutPromocionInput>>
    connectOrCreate?: Enumerable<PromocionDetalleCreateOrConnectWithoutPromocionInput>
    createMany?: PromocionDetalleCreateManyPromocionInputEnvelope
    connect?: Enumerable<PromocionDetalleWhereUniqueInput>
  }

  export type VoucherUpdateManyWithoutPromocionVoucherNestedInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutPromocionVoucherInput>, Enumerable<VoucherUncheckedCreateWithoutPromocionVoucherInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutPromocionVoucherInput>
    upsert?: Enumerable<VoucherUpsertWithWhereUniqueWithoutPromocionVoucherInput>
    createMany?: VoucherCreateManyPromocionVoucherInputEnvelope
    set?: Enumerable<VoucherWhereUniqueInput>
    disconnect?: Enumerable<VoucherWhereUniqueInput>
    delete?: Enumerable<VoucherWhereUniqueInput>
    connect?: Enumerable<VoucherWhereUniqueInput>
    update?: Enumerable<VoucherUpdateWithWhereUniqueWithoutPromocionVoucherInput>
    updateMany?: Enumerable<VoucherUpdateManyWithWhereWithoutPromocionVoucherInput>
    deleteMany?: Enumerable<VoucherScalarWhereInput>
  }

  export type EmpresaUpdateOneRequiredWithoutEmpresaNestedInput = {
    create?: XOR<EmpresaCreateWithoutEmpresaInput, EmpresaUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutEmpresaInput
    upsert?: EmpresaUpsertWithoutEmpresaInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<EmpresaUpdateWithoutEmpresaInput, EmpresaUncheckedUpdateWithoutEmpresaInput>
  }

  export type PromocionDetalleUpdateManyWithoutPromocionNestedInput = {
    create?: XOR<Enumerable<PromocionDetalleCreateWithoutPromocionInput>, Enumerable<PromocionDetalleUncheckedCreateWithoutPromocionInput>>
    connectOrCreate?: Enumerable<PromocionDetalleCreateOrConnectWithoutPromocionInput>
    upsert?: Enumerable<PromocionDetalleUpsertWithWhereUniqueWithoutPromocionInput>
    createMany?: PromocionDetalleCreateManyPromocionInputEnvelope
    set?: Enumerable<PromocionDetalleWhereUniqueInput>
    disconnect?: Enumerable<PromocionDetalleWhereUniqueInput>
    delete?: Enumerable<PromocionDetalleWhereUniqueInput>
    connect?: Enumerable<PromocionDetalleWhereUniqueInput>
    update?: Enumerable<PromocionDetalleUpdateWithWhereUniqueWithoutPromocionInput>
    updateMany?: Enumerable<PromocionDetalleUpdateManyWithWhereWithoutPromocionInput>
    deleteMany?: Enumerable<PromocionDetalleScalarWhereInput>
  }

  export type VoucherUncheckedUpdateManyWithoutPromocionVoucherNestedInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutPromocionVoucherInput>, Enumerable<VoucherUncheckedCreateWithoutPromocionVoucherInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutPromocionVoucherInput>
    upsert?: Enumerable<VoucherUpsertWithWhereUniqueWithoutPromocionVoucherInput>
    createMany?: VoucherCreateManyPromocionVoucherInputEnvelope
    set?: Enumerable<VoucherWhereUniqueInput>
    disconnect?: Enumerable<VoucherWhereUniqueInput>
    delete?: Enumerable<VoucherWhereUniqueInput>
    connect?: Enumerable<VoucherWhereUniqueInput>
    update?: Enumerable<VoucherUpdateWithWhereUniqueWithoutPromocionVoucherInput>
    updateMany?: Enumerable<VoucherUpdateManyWithWhereWithoutPromocionVoucherInput>
    deleteMany?: Enumerable<VoucherScalarWhereInput>
  }

  export type PromocionDetalleUncheckedUpdateManyWithoutPromocionNestedInput = {
    create?: XOR<Enumerable<PromocionDetalleCreateWithoutPromocionInput>, Enumerable<PromocionDetalleUncheckedCreateWithoutPromocionInput>>
    connectOrCreate?: Enumerable<PromocionDetalleCreateOrConnectWithoutPromocionInput>
    upsert?: Enumerable<PromocionDetalleUpsertWithWhereUniqueWithoutPromocionInput>
    createMany?: PromocionDetalleCreateManyPromocionInputEnvelope
    set?: Enumerable<PromocionDetalleWhereUniqueInput>
    disconnect?: Enumerable<PromocionDetalleWhereUniqueInput>
    delete?: Enumerable<PromocionDetalleWhereUniqueInput>
    connect?: Enumerable<PromocionDetalleWhereUniqueInput>
    update?: Enumerable<PromocionDetalleUpdateWithWhereUniqueWithoutPromocionInput>
    updateMany?: Enumerable<PromocionDetalleUpdateManyWithWhereWithoutPromocionInput>
    deleteMany?: Enumerable<PromocionDetalleScalarWhereInput>
  }

  export type PromocionCreateNestedOneWithoutPromocionesInput = {
    create?: XOR<PromocionCreateWithoutPromocionesInput, PromocionUncheckedCreateWithoutPromocionesInput>
    connectOrCreate?: PromocionCreateOrConnectWithoutPromocionesInput
    connect?: PromocionWhereUniqueInput
  }

  export type ProductoCreateNestedOneWithoutProductosPromoDetInput = {
    create?: XOR<ProductoCreateWithoutProductosPromoDetInput, ProductoUncheckedCreateWithoutProductosPromoDetInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutProductosPromoDetInput
    connect?: ProductoWhereUniqueInput
  }

  export type PromocionUpdateOneRequiredWithoutPromocionesNestedInput = {
    create?: XOR<PromocionCreateWithoutPromocionesInput, PromocionUncheckedCreateWithoutPromocionesInput>
    connectOrCreate?: PromocionCreateOrConnectWithoutPromocionesInput
    upsert?: PromocionUpsertWithoutPromocionesInput
    connect?: PromocionWhereUniqueInput
    update?: XOR<PromocionUpdateWithoutPromocionesInput, PromocionUncheckedUpdateWithoutPromocionesInput>
  }

  export type ProductoUpdateOneRequiredWithoutProductosPromoDetNestedInput = {
    create?: XOR<ProductoCreateWithoutProductosPromoDetInput, ProductoUncheckedCreateWithoutProductosPromoDetInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutProductosPromoDetInput
    upsert?: ProductoUpsertWithoutProductosPromoDetInput
    connect?: ProductoWhereUniqueInput
    update?: XOR<ProductoUpdateWithoutProductosPromoDetInput, ProductoUncheckedUpdateWithoutProductosPromoDetInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type PromocionCreateNestedOneWithoutEmpresaInput = {
    create?: XOR<PromocionCreateWithoutEmpresaInput, PromocionUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: PromocionCreateOrConnectWithoutEmpresaInput
    connect?: PromocionWhereUniqueInput
  }

  export type UsuarioCreateNestedManyWithoutEmpresaUsuarioInput = {
    create?: XOR<Enumerable<UsuarioCreateWithoutEmpresaUsuarioInput>, Enumerable<UsuarioUncheckedCreateWithoutEmpresaUsuarioInput>>
    connectOrCreate?: Enumerable<UsuarioCreateOrConnectWithoutEmpresaUsuarioInput>
    createMany?: UsuarioCreateManyEmpresaUsuarioInputEnvelope
    connect?: Enumerable<UsuarioWhereUniqueInput>
  }

  export type PromocionUncheckedCreateNestedOneWithoutEmpresaInput = {
    create?: XOR<PromocionCreateWithoutEmpresaInput, PromocionUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: PromocionCreateOrConnectWithoutEmpresaInput
    connect?: PromocionWhereUniqueInput
  }

  export type UsuarioUncheckedCreateNestedManyWithoutEmpresaUsuarioInput = {
    create?: XOR<Enumerable<UsuarioCreateWithoutEmpresaUsuarioInput>, Enumerable<UsuarioUncheckedCreateWithoutEmpresaUsuarioInput>>
    connectOrCreate?: Enumerable<UsuarioCreateOrConnectWithoutEmpresaUsuarioInput>
    createMany?: UsuarioCreateManyEmpresaUsuarioInputEnvelope
    connect?: Enumerable<UsuarioWhereUniqueInput>
  }

  export type PromocionUpdateOneWithoutEmpresaNestedInput = {
    create?: XOR<PromocionCreateWithoutEmpresaInput, PromocionUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: PromocionCreateOrConnectWithoutEmpresaInput
    upsert?: PromocionUpsertWithoutEmpresaInput
    disconnect?: boolean
    delete?: boolean
    connect?: PromocionWhereUniqueInput
    update?: XOR<PromocionUpdateWithoutEmpresaInput, PromocionUncheckedUpdateWithoutEmpresaInput>
  }

  export type UsuarioUpdateManyWithoutEmpresaUsuarioNestedInput = {
    create?: XOR<Enumerable<UsuarioCreateWithoutEmpresaUsuarioInput>, Enumerable<UsuarioUncheckedCreateWithoutEmpresaUsuarioInput>>
    connectOrCreate?: Enumerable<UsuarioCreateOrConnectWithoutEmpresaUsuarioInput>
    upsert?: Enumerable<UsuarioUpsertWithWhereUniqueWithoutEmpresaUsuarioInput>
    createMany?: UsuarioCreateManyEmpresaUsuarioInputEnvelope
    set?: Enumerable<UsuarioWhereUniqueInput>
    disconnect?: Enumerable<UsuarioWhereUniqueInput>
    delete?: Enumerable<UsuarioWhereUniqueInput>
    connect?: Enumerable<UsuarioWhereUniqueInput>
    update?: Enumerable<UsuarioUpdateWithWhereUniqueWithoutEmpresaUsuarioInput>
    updateMany?: Enumerable<UsuarioUpdateManyWithWhereWithoutEmpresaUsuarioInput>
    deleteMany?: Enumerable<UsuarioScalarWhereInput>
  }

  export type PromocionUncheckedUpdateOneWithoutEmpresaNestedInput = {
    create?: XOR<PromocionCreateWithoutEmpresaInput, PromocionUncheckedCreateWithoutEmpresaInput>
    connectOrCreate?: PromocionCreateOrConnectWithoutEmpresaInput
    upsert?: PromocionUpsertWithoutEmpresaInput
    disconnect?: boolean
    delete?: boolean
    connect?: PromocionWhereUniqueInput
    update?: XOR<PromocionUpdateWithoutEmpresaInput, PromocionUncheckedUpdateWithoutEmpresaInput>
  }

  export type UsuarioUncheckedUpdateManyWithoutEmpresaUsuarioNestedInput = {
    create?: XOR<Enumerable<UsuarioCreateWithoutEmpresaUsuarioInput>, Enumerable<UsuarioUncheckedCreateWithoutEmpresaUsuarioInput>>
    connectOrCreate?: Enumerable<UsuarioCreateOrConnectWithoutEmpresaUsuarioInput>
    upsert?: Enumerable<UsuarioUpsertWithWhereUniqueWithoutEmpresaUsuarioInput>
    createMany?: UsuarioCreateManyEmpresaUsuarioInputEnvelope
    set?: Enumerable<UsuarioWhereUniqueInput>
    disconnect?: Enumerable<UsuarioWhereUniqueInput>
    delete?: Enumerable<UsuarioWhereUniqueInput>
    connect?: Enumerable<UsuarioWhereUniqueInput>
    update?: Enumerable<UsuarioUpdateWithWhereUniqueWithoutEmpresaUsuarioInput>
    updateMany?: Enumerable<UsuarioUpdateManyWithWhereWithoutEmpresaUsuarioInput>
    deleteMany?: Enumerable<UsuarioScalarWhereInput>
  }

  export type EmpresaCreateNestedOneWithoutEmpresaUsuarioInput = {
    create?: XOR<EmpresaCreateWithoutEmpresaUsuarioInput, EmpresaUncheckedCreateWithoutEmpresaUsuarioInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutEmpresaUsuarioInput
    connect?: EmpresaWhereUniqueInput
  }

  export type VoucherCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutUsuarioInput>, Enumerable<VoucherUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutUsuarioInput>
    createMany?: VoucherCreateManyUsuarioInputEnvelope
    connect?: Enumerable<VoucherWhereUniqueInput>
  }

  export type VoucherUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutUsuarioInput>, Enumerable<VoucherUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutUsuarioInput>
    createMany?: VoucherCreateManyUsuarioInputEnvelope
    connect?: Enumerable<VoucherWhereUniqueInput>
  }

  export type EmpresaUpdateOneRequiredWithoutEmpresaUsuarioNestedInput = {
    create?: XOR<EmpresaCreateWithoutEmpresaUsuarioInput, EmpresaUncheckedCreateWithoutEmpresaUsuarioInput>
    connectOrCreate?: EmpresaCreateOrConnectWithoutEmpresaUsuarioInput
    upsert?: EmpresaUpsertWithoutEmpresaUsuarioInput
    connect?: EmpresaWhereUniqueInput
    update?: XOR<EmpresaUpdateWithoutEmpresaUsuarioInput, EmpresaUncheckedUpdateWithoutEmpresaUsuarioInput>
  }

  export type VoucherUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutUsuarioInput>, Enumerable<VoucherUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<VoucherUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: VoucherCreateManyUsuarioInputEnvelope
    set?: Enumerable<VoucherWhereUniqueInput>
    disconnect?: Enumerable<VoucherWhereUniqueInput>
    delete?: Enumerable<VoucherWhereUniqueInput>
    connect?: Enumerable<VoucherWhereUniqueInput>
    update?: Enumerable<VoucherUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<VoucherUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<VoucherScalarWhereInput>
  }

  export type VoucherUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutUsuarioInput>, Enumerable<VoucherUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<VoucherUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: VoucherCreateManyUsuarioInputEnvelope
    set?: Enumerable<VoucherWhereUniqueInput>
    disconnect?: Enumerable<VoucherWhereUniqueInput>
    delete?: Enumerable<VoucherWhereUniqueInput>
    connect?: Enumerable<VoucherWhereUniqueInput>
    update?: Enumerable<VoucherUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<VoucherUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<VoucherScalarWhereInput>
  }

  export type PromocionCreateNestedOneWithoutPromocionVouchersInput = {
    create?: XOR<PromocionCreateWithoutPromocionVouchersInput, PromocionUncheckedCreateWithoutPromocionVouchersInput>
    connectOrCreate?: PromocionCreateOrConnectWithoutPromocionVouchersInput
    connect?: PromocionWhereUniqueInput
  }

  export type ProductoCreateNestedOneWithoutProductosInput = {
    create?: XOR<ProductoCreateWithoutProductosInput, ProductoUncheckedCreateWithoutProductosInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutProductosInput
    connect?: ProductoWhereUniqueInput
  }

  export type UsuarioCreateNestedOneWithoutUsuariosInput = {
    create?: XOR<UsuarioCreateWithoutUsuariosInput, UsuarioUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutUsuariosInput
    connect?: UsuarioWhereUniqueInput
  }

  export type PromocionUpdateOneRequiredWithoutPromocionVouchersNestedInput = {
    create?: XOR<PromocionCreateWithoutPromocionVouchersInput, PromocionUncheckedCreateWithoutPromocionVouchersInput>
    connectOrCreate?: PromocionCreateOrConnectWithoutPromocionVouchersInput
    upsert?: PromocionUpsertWithoutPromocionVouchersInput
    connect?: PromocionWhereUniqueInput
    update?: XOR<PromocionUpdateWithoutPromocionVouchersInput, PromocionUncheckedUpdateWithoutPromocionVouchersInput>
  }

  export type ProductoUpdateOneRequiredWithoutProductosNestedInput = {
    create?: XOR<ProductoCreateWithoutProductosInput, ProductoUncheckedCreateWithoutProductosInput>
    connectOrCreate?: ProductoCreateOrConnectWithoutProductosInput
    upsert?: ProductoUpsertWithoutProductosInput
    connect?: ProductoWhereUniqueInput
    update?: XOR<ProductoUpdateWithoutProductosInput, ProductoUncheckedUpdateWithoutProductosInput>
  }

  export type UsuarioUpdateOneRequiredWithoutUsuariosNestedInput = {
    create?: XOR<UsuarioCreateWithoutUsuariosInput, UsuarioUncheckedCreateWithoutUsuariosInput>
    connectOrCreate?: UsuarioCreateOrConnectWithoutUsuariosInput
    upsert?: UsuarioUpsertWithoutUsuariosInput
    connect?: UsuarioWhereUniqueInput
    update?: XOR<UsuarioUpdateWithoutUsuariosInput, UsuarioUncheckedUpdateWithoutUsuariosInput>
  }

  export type VoucherCreateNestedManyWithoutPromocionProductoInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutPromocionProductoInput>, Enumerable<VoucherUncheckedCreateWithoutPromocionProductoInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutPromocionProductoInput>
    createMany?: VoucherCreateManyPromocionProductoInputEnvelope
    connect?: Enumerable<VoucherWhereUniqueInput>
  }

  export type PromocionDetalleCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<PromocionDetalleCreateWithoutProductoInput>, Enumerable<PromocionDetalleUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<PromocionDetalleCreateOrConnectWithoutProductoInput>
    createMany?: PromocionDetalleCreateManyProductoInputEnvelope
    connect?: Enumerable<PromocionDetalleWhereUniqueInput>
  }

  export type VoucherUncheckedCreateNestedManyWithoutPromocionProductoInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutPromocionProductoInput>, Enumerable<VoucherUncheckedCreateWithoutPromocionProductoInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutPromocionProductoInput>
    createMany?: VoucherCreateManyPromocionProductoInputEnvelope
    connect?: Enumerable<VoucherWhereUniqueInput>
  }

  export type PromocionDetalleUncheckedCreateNestedManyWithoutProductoInput = {
    create?: XOR<Enumerable<PromocionDetalleCreateWithoutProductoInput>, Enumerable<PromocionDetalleUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<PromocionDetalleCreateOrConnectWithoutProductoInput>
    createMany?: PromocionDetalleCreateManyProductoInputEnvelope
    connect?: Enumerable<PromocionDetalleWhereUniqueInput>
  }

  export type VoucherUpdateManyWithoutPromocionProductoNestedInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutPromocionProductoInput>, Enumerable<VoucherUncheckedCreateWithoutPromocionProductoInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutPromocionProductoInput>
    upsert?: Enumerable<VoucherUpsertWithWhereUniqueWithoutPromocionProductoInput>
    createMany?: VoucherCreateManyPromocionProductoInputEnvelope
    set?: Enumerable<VoucherWhereUniqueInput>
    disconnect?: Enumerable<VoucherWhereUniqueInput>
    delete?: Enumerable<VoucherWhereUniqueInput>
    connect?: Enumerable<VoucherWhereUniqueInput>
    update?: Enumerable<VoucherUpdateWithWhereUniqueWithoutPromocionProductoInput>
    updateMany?: Enumerable<VoucherUpdateManyWithWhereWithoutPromocionProductoInput>
    deleteMany?: Enumerable<VoucherScalarWhereInput>
  }

  export type PromocionDetalleUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<PromocionDetalleCreateWithoutProductoInput>, Enumerable<PromocionDetalleUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<PromocionDetalleCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<PromocionDetalleUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: PromocionDetalleCreateManyProductoInputEnvelope
    set?: Enumerable<PromocionDetalleWhereUniqueInput>
    disconnect?: Enumerable<PromocionDetalleWhereUniqueInput>
    delete?: Enumerable<PromocionDetalleWhereUniqueInput>
    connect?: Enumerable<PromocionDetalleWhereUniqueInput>
    update?: Enumerable<PromocionDetalleUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<PromocionDetalleUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<PromocionDetalleScalarWhereInput>
  }

  export type VoucherUncheckedUpdateManyWithoutPromocionProductoNestedInput = {
    create?: XOR<Enumerable<VoucherCreateWithoutPromocionProductoInput>, Enumerable<VoucherUncheckedCreateWithoutPromocionProductoInput>>
    connectOrCreate?: Enumerable<VoucherCreateOrConnectWithoutPromocionProductoInput>
    upsert?: Enumerable<VoucherUpsertWithWhereUniqueWithoutPromocionProductoInput>
    createMany?: VoucherCreateManyPromocionProductoInputEnvelope
    set?: Enumerable<VoucherWhereUniqueInput>
    disconnect?: Enumerable<VoucherWhereUniqueInput>
    delete?: Enumerable<VoucherWhereUniqueInput>
    connect?: Enumerable<VoucherWhereUniqueInput>
    update?: Enumerable<VoucherUpdateWithWhereUniqueWithoutPromocionProductoInput>
    updateMany?: Enumerable<VoucherUpdateManyWithWhereWithoutPromocionProductoInput>
    deleteMany?: Enumerable<VoucherScalarWhereInput>
  }

  export type PromocionDetalleUncheckedUpdateManyWithoutProductoNestedInput = {
    create?: XOR<Enumerable<PromocionDetalleCreateWithoutProductoInput>, Enumerable<PromocionDetalleUncheckedCreateWithoutProductoInput>>
    connectOrCreate?: Enumerable<PromocionDetalleCreateOrConnectWithoutProductoInput>
    upsert?: Enumerable<PromocionDetalleUpsertWithWhereUniqueWithoutProductoInput>
    createMany?: PromocionDetalleCreateManyProductoInputEnvelope
    set?: Enumerable<PromocionDetalleWhereUniqueInput>
    disconnect?: Enumerable<PromocionDetalleWhereUniqueInput>
    delete?: Enumerable<PromocionDetalleWhereUniqueInput>
    connect?: Enumerable<PromocionDetalleWhereUniqueInput>
    update?: Enumerable<PromocionDetalleUpdateWithWhereUniqueWithoutProductoInput>
    updateMany?: Enumerable<PromocionDetalleUpdateManyWithWhereWithoutProductoInput>
    deleteMany?: Enumerable<PromocionDetalleScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
    isSet?: boolean
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
    isSet?: boolean
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
    isSet?: boolean
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
    isSet?: boolean
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
    isSet?: boolean
  }

  export type VoucherCreateWithoutPromocionVoucherInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionProducto: ProductoCreateNestedOneWithoutProductosInput
    cantidad?: number
    usuario: UsuarioCreateNestedOneWithoutUsuariosInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherUncheckedCreateWithoutPromocionVoucherInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    productoId: string
    cantidad?: number
    usuarioId: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherCreateOrConnectWithoutPromocionVoucherInput = {
    where: VoucherWhereUniqueInput
    create: XOR<VoucherCreateWithoutPromocionVoucherInput, VoucherUncheckedCreateWithoutPromocionVoucherInput>
  }

  export type VoucherCreateManyPromocionVoucherInputEnvelope = {
    data: Enumerable<VoucherCreateManyPromocionVoucherInput>
  }

  export type EmpresaCreateWithoutEmpresaInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    empresaUsuario?: UsuarioCreateNestedManyWithoutEmpresaUsuarioInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmpresaUncheckedCreateWithoutEmpresaInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    empresaUsuario?: UsuarioUncheckedCreateNestedManyWithoutEmpresaUsuarioInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmpresaCreateOrConnectWithoutEmpresaInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutEmpresaInput, EmpresaUncheckedCreateWithoutEmpresaInput>
  }

  export type PromocionDetalleCreateWithoutPromocionInput = {
    id?: string
    producto: ProductoCreateNestedOneWithoutProductosPromoDetInput
    porcentaje?: number | null
    monto?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionDetalleUncheckedCreateWithoutPromocionInput = {
    id?: string
    productoId: string
    porcentaje?: number | null
    monto?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionDetalleCreateOrConnectWithoutPromocionInput = {
    where: PromocionDetalleWhereUniqueInput
    create: XOR<PromocionDetalleCreateWithoutPromocionInput, PromocionDetalleUncheckedCreateWithoutPromocionInput>
  }

  export type PromocionDetalleCreateManyPromocionInputEnvelope = {
    data: Enumerable<PromocionDetalleCreateManyPromocionInput>
  }

  export type VoucherUpsertWithWhereUniqueWithoutPromocionVoucherInput = {
    where: VoucherWhereUniqueInput
    update: XOR<VoucherUpdateWithoutPromocionVoucherInput, VoucherUncheckedUpdateWithoutPromocionVoucherInput>
    create: XOR<VoucherCreateWithoutPromocionVoucherInput, VoucherUncheckedCreateWithoutPromocionVoucherInput>
  }

  export type VoucherUpdateWithWhereUniqueWithoutPromocionVoucherInput = {
    where: VoucherWhereUniqueInput
    data: XOR<VoucherUpdateWithoutPromocionVoucherInput, VoucherUncheckedUpdateWithoutPromocionVoucherInput>
  }

  export type VoucherUpdateManyWithWhereWithoutPromocionVoucherInput = {
    where: VoucherScalarWhereInput
    data: XOR<VoucherUpdateManyMutationInput, VoucherUncheckedUpdateManyWithoutPromocionVouchersInput>
  }

  export type VoucherScalarWhereInput = {
    AND?: Enumerable<VoucherScalarWhereInput>
    OR?: Enumerable<VoucherScalarWhereInput>
    NOT?: Enumerable<VoucherScalarWhereInput>
    id?: StringFilter | string
    codigo?: IntFilter | number
    fecha?: DateTimeFilter | Date | string
    canjeado?: BoolFilter | boolean
    canjeadoFecha?: DateTimeNullableFilter | Date | string | null
    promocionId?: StringFilter | string
    productoId?: StringFilter | string
    cantidad?: IntFilter | number
    usuarioId?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type EmpresaUpsertWithoutEmpresaInput = {
    update: XOR<EmpresaUpdateWithoutEmpresaInput, EmpresaUncheckedUpdateWithoutEmpresaInput>
    create: XOR<EmpresaCreateWithoutEmpresaInput, EmpresaUncheckedCreateWithoutEmpresaInput>
  }

  export type EmpresaUpdateWithoutEmpresaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    empresaUsuario?: UsuarioUpdateManyWithoutEmpresaUsuarioNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaUncheckedUpdateWithoutEmpresaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    empresaUsuario?: UsuarioUncheckedUpdateManyWithoutEmpresaUsuarioNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleUpsertWithWhereUniqueWithoutPromocionInput = {
    where: PromocionDetalleWhereUniqueInput
    update: XOR<PromocionDetalleUpdateWithoutPromocionInput, PromocionDetalleUncheckedUpdateWithoutPromocionInput>
    create: XOR<PromocionDetalleCreateWithoutPromocionInput, PromocionDetalleUncheckedCreateWithoutPromocionInput>
  }

  export type PromocionDetalleUpdateWithWhereUniqueWithoutPromocionInput = {
    where: PromocionDetalleWhereUniqueInput
    data: XOR<PromocionDetalleUpdateWithoutPromocionInput, PromocionDetalleUncheckedUpdateWithoutPromocionInput>
  }

  export type PromocionDetalleUpdateManyWithWhereWithoutPromocionInput = {
    where: PromocionDetalleScalarWhereInput
    data: XOR<PromocionDetalleUpdateManyMutationInput, PromocionDetalleUncheckedUpdateManyWithoutPromocionesInput>
  }

  export type PromocionDetalleScalarWhereInput = {
    AND?: Enumerable<PromocionDetalleScalarWhereInput>
    OR?: Enumerable<PromocionDetalleScalarWhereInput>
    NOT?: Enumerable<PromocionDetalleScalarWhereInput>
    id?: StringFilter | string
    promocionId?: StringFilter | string
    productoId?: StringFilter | string
    porcentaje?: IntNullableFilter | number | null
    monto?: IntNullableFilter | number | null
    created_at?: DateTimeFilter | Date | string
    updated_at?: DateTimeFilter | Date | string
  }

  export type PromocionCreateWithoutPromocionesInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    promocionVouchers?: VoucherCreateNestedManyWithoutPromocionVoucherInput
    empresa: EmpresaCreateNestedOneWithoutEmpresaInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionUncheckedCreateWithoutPromocionesInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    promocionVouchers?: VoucherUncheckedCreateNestedManyWithoutPromocionVoucherInput
    empresaId: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionCreateOrConnectWithoutPromocionesInput = {
    where: PromocionWhereUniqueInput
    create: XOR<PromocionCreateWithoutPromocionesInput, PromocionUncheckedCreateWithoutPromocionesInput>
  }

  export type ProductoCreateWithoutProductosPromoDetInput = {
    id?: string
    nombre: string
    codigo: number
    precio?: number | null
    codigoBarra?: string | null
    estado?: boolean
    orden?: number
    productos?: VoucherCreateNestedManyWithoutPromocionProductoInput
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ProductoUncheckedCreateWithoutProductosPromoDetInput = {
    id?: string
    nombre: string
    codigo: number
    precio?: number | null
    codigoBarra?: string | null
    estado?: boolean
    orden?: number
    productos?: VoucherUncheckedCreateNestedManyWithoutPromocionProductoInput
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ProductoCreateOrConnectWithoutProductosPromoDetInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutProductosPromoDetInput, ProductoUncheckedCreateWithoutProductosPromoDetInput>
  }

  export type PromocionUpsertWithoutPromocionesInput = {
    update: XOR<PromocionUpdateWithoutPromocionesInput, PromocionUncheckedUpdateWithoutPromocionesInput>
    create: XOR<PromocionCreateWithoutPromocionesInput, PromocionUncheckedCreateWithoutPromocionesInput>
  }

  export type PromocionUpdateWithoutPromocionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionVouchers?: VoucherUpdateManyWithoutPromocionVoucherNestedInput
    empresa?: EmpresaUpdateOneRequiredWithoutEmpresaNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionUncheckedUpdateWithoutPromocionesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionVouchers?: VoucherUncheckedUpdateManyWithoutPromocionVoucherNestedInput
    empresaId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductoUpsertWithoutProductosPromoDetInput = {
    update: XOR<ProductoUpdateWithoutProductosPromoDetInput, ProductoUncheckedUpdateWithoutProductosPromoDetInput>
    create: XOR<ProductoCreateWithoutProductosPromoDetInput, ProductoUncheckedCreateWithoutProductosPromoDetInput>
  }

  export type ProductoUpdateWithoutProductosPromoDetInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: IntFieldUpdateOperationsInput | number
    precio?: NullableIntFieldUpdateOperationsInput | number | null
    codigoBarra?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    productos?: VoucherUpdateManyWithoutPromocionProductoNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductoUncheckedUpdateWithoutProductosPromoDetInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: IntFieldUpdateOperationsInput | number
    precio?: NullableIntFieldUpdateOperationsInput | number | null
    codigoBarra?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    productos?: VoucherUncheckedUpdateManyWithoutPromocionProductoNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PromocionCreateWithoutEmpresaInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    promocionVouchers?: VoucherCreateNestedManyWithoutPromocionVoucherInput
    promociones?: PromocionDetalleCreateNestedManyWithoutPromocionInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionUncheckedCreateWithoutEmpresaInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    promocionVouchers?: VoucherUncheckedCreateNestedManyWithoutPromocionVoucherInput
    promociones?: PromocionDetalleUncheckedCreateNestedManyWithoutPromocionInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionCreateOrConnectWithoutEmpresaInput = {
    where: PromocionWhereUniqueInput
    create: XOR<PromocionCreateWithoutEmpresaInput, PromocionUncheckedCreateWithoutEmpresaInput>
  }

  export type UsuarioCreateWithoutEmpresaUsuarioInput = {
    id?: string
    cedula?: string | null
    codigo?: string | null
    nombre: string
    estado?: boolean
    telefono?: string | null
    email?: string | null
    usuarios?: VoucherCreateNestedManyWithoutUsuarioInput
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsuarioUncheckedCreateWithoutEmpresaUsuarioInput = {
    id?: string
    cedula?: string | null
    codigo?: string | null
    nombre: string
    estado?: boolean
    telefono?: string | null
    email?: string | null
    usuarios?: VoucherUncheckedCreateNestedManyWithoutUsuarioInput
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsuarioCreateOrConnectWithoutEmpresaUsuarioInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutEmpresaUsuarioInput, UsuarioUncheckedCreateWithoutEmpresaUsuarioInput>
  }

  export type UsuarioCreateManyEmpresaUsuarioInputEnvelope = {
    data: Enumerable<UsuarioCreateManyEmpresaUsuarioInput>
  }

  export type PromocionUpsertWithoutEmpresaInput = {
    update: XOR<PromocionUpdateWithoutEmpresaInput, PromocionUncheckedUpdateWithoutEmpresaInput>
    create: XOR<PromocionCreateWithoutEmpresaInput, PromocionUncheckedCreateWithoutEmpresaInput>
  }

  export type PromocionUpdateWithoutEmpresaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionVouchers?: VoucherUpdateManyWithoutPromocionVoucherNestedInput
    promociones?: PromocionDetalleUpdateManyWithoutPromocionNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionUncheckedUpdateWithoutEmpresaInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionVouchers?: VoucherUncheckedUpdateManyWithoutPromocionVoucherNestedInput
    promociones?: PromocionDetalleUncheckedUpdateManyWithoutPromocionNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioUpsertWithWhereUniqueWithoutEmpresaUsuarioInput = {
    where: UsuarioWhereUniqueInput
    update: XOR<UsuarioUpdateWithoutEmpresaUsuarioInput, UsuarioUncheckedUpdateWithoutEmpresaUsuarioInput>
    create: XOR<UsuarioCreateWithoutEmpresaUsuarioInput, UsuarioUncheckedCreateWithoutEmpresaUsuarioInput>
  }

  export type UsuarioUpdateWithWhereUniqueWithoutEmpresaUsuarioInput = {
    where: UsuarioWhereUniqueInput
    data: XOR<UsuarioUpdateWithoutEmpresaUsuarioInput, UsuarioUncheckedUpdateWithoutEmpresaUsuarioInput>
  }

  export type UsuarioUpdateManyWithWhereWithoutEmpresaUsuarioInput = {
    where: UsuarioScalarWhereInput
    data: XOR<UsuarioUpdateManyMutationInput, UsuarioUncheckedUpdateManyWithoutEmpresaUsuarioInput>
  }

  export type UsuarioScalarWhereInput = {
    AND?: Enumerable<UsuarioScalarWhereInput>
    OR?: Enumerable<UsuarioScalarWhereInput>
    NOT?: Enumerable<UsuarioScalarWhereInput>
    id?: StringFilter | string
    cedula?: StringNullableFilter | string | null
    codigo?: StringNullableFilter | string | null
    nombre?: StringFilter | string
    estado?: BoolFilter | boolean
    telefono?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    empresaId?: StringFilter | string
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
  }

  export type EmpresaCreateWithoutEmpresaUsuarioInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    empresa?: PromocionCreateNestedOneWithoutEmpresaInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmpresaUncheckedCreateWithoutEmpresaUsuarioInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    empresa?: PromocionUncheckedCreateNestedOneWithoutEmpresaInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type EmpresaCreateOrConnectWithoutEmpresaUsuarioInput = {
    where: EmpresaWhereUniqueInput
    create: XOR<EmpresaCreateWithoutEmpresaUsuarioInput, EmpresaUncheckedCreateWithoutEmpresaUsuarioInput>
  }

  export type VoucherCreateWithoutUsuarioInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionVoucher: PromocionCreateNestedOneWithoutPromocionVouchersInput
    promocionProducto: ProductoCreateNestedOneWithoutProductosInput
    cantidad?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherUncheckedCreateWithoutUsuarioInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionId: string
    productoId: string
    cantidad?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherCreateOrConnectWithoutUsuarioInput = {
    where: VoucherWhereUniqueInput
    create: XOR<VoucherCreateWithoutUsuarioInput, VoucherUncheckedCreateWithoutUsuarioInput>
  }

  export type VoucherCreateManyUsuarioInputEnvelope = {
    data: Enumerable<VoucherCreateManyUsuarioInput>
  }

  export type EmpresaUpsertWithoutEmpresaUsuarioInput = {
    update: XOR<EmpresaUpdateWithoutEmpresaUsuarioInput, EmpresaUncheckedUpdateWithoutEmpresaUsuarioInput>
    create: XOR<EmpresaCreateWithoutEmpresaUsuarioInput, EmpresaUncheckedCreateWithoutEmpresaUsuarioInput>
  }

  export type EmpresaUpdateWithoutEmpresaUsuarioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    empresa?: PromocionUpdateOneWithoutEmpresaNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmpresaUncheckedUpdateWithoutEmpresaUsuarioInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    empresa?: PromocionUncheckedUpdateOneWithoutEmpresaNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: VoucherWhereUniqueInput
    update: XOR<VoucherUpdateWithoutUsuarioInput, VoucherUncheckedUpdateWithoutUsuarioInput>
    create: XOR<VoucherCreateWithoutUsuarioInput, VoucherUncheckedCreateWithoutUsuarioInput>
  }

  export type VoucherUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: VoucherWhereUniqueInput
    data: XOR<VoucherUpdateWithoutUsuarioInput, VoucherUncheckedUpdateWithoutUsuarioInput>
  }

  export type VoucherUpdateManyWithWhereWithoutUsuarioInput = {
    where: VoucherScalarWhereInput
    data: XOR<VoucherUpdateManyMutationInput, VoucherUncheckedUpdateManyWithoutUsuariosInput>
  }

  export type PromocionCreateWithoutPromocionVouchersInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    empresa: EmpresaCreateNestedOneWithoutEmpresaInput
    promociones?: PromocionDetalleCreateNestedManyWithoutPromocionInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionUncheckedCreateWithoutPromocionVouchersInput = {
    id?: string
    nombre: string
    link: string
    imagen: string
    estado?: boolean
    orden?: number
    fechaInicio?: Date | string | null
    fechaFin?: Date | string | null
    empresaId: string
    promociones?: PromocionDetalleUncheckedCreateNestedManyWithoutPromocionInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionCreateOrConnectWithoutPromocionVouchersInput = {
    where: PromocionWhereUniqueInput
    create: XOR<PromocionCreateWithoutPromocionVouchersInput, PromocionUncheckedCreateWithoutPromocionVouchersInput>
  }

  export type ProductoCreateWithoutProductosInput = {
    id?: string
    nombre: string
    codigo: number
    precio?: number | null
    codigoBarra?: string | null
    estado?: boolean
    orden?: number
    productosPromoDet?: PromocionDetalleCreateNestedManyWithoutProductoInput
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ProductoUncheckedCreateWithoutProductosInput = {
    id?: string
    nombre: string
    codigo: number
    precio?: number | null
    codigoBarra?: string | null
    estado?: boolean
    orden?: number
    productosPromoDet?: PromocionDetalleUncheckedCreateNestedManyWithoutProductoInput
    created_at?: Date | string
    updated_at?: Date | string | null
  }

  export type ProductoCreateOrConnectWithoutProductosInput = {
    where: ProductoWhereUniqueInput
    create: XOR<ProductoCreateWithoutProductosInput, ProductoUncheckedCreateWithoutProductosInput>
  }

  export type UsuarioCreateWithoutUsuariosInput = {
    id?: string
    cedula?: string | null
    codigo?: string | null
    nombre: string
    estado?: boolean
    telefono?: string | null
    email?: string | null
    empresaUsuario: EmpresaCreateNestedOneWithoutEmpresaUsuarioInput
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsuarioUncheckedCreateWithoutUsuariosInput = {
    id?: string
    cedula?: string | null
    codigo?: string | null
    nombre: string
    estado?: boolean
    telefono?: string | null
    email?: string | null
    empresaId: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsuarioCreateOrConnectWithoutUsuariosInput = {
    where: UsuarioWhereUniqueInput
    create: XOR<UsuarioCreateWithoutUsuariosInput, UsuarioUncheckedCreateWithoutUsuariosInput>
  }

  export type PromocionUpsertWithoutPromocionVouchersInput = {
    update: XOR<PromocionUpdateWithoutPromocionVouchersInput, PromocionUncheckedUpdateWithoutPromocionVouchersInput>
    create: XOR<PromocionCreateWithoutPromocionVouchersInput, PromocionUncheckedCreateWithoutPromocionVouchersInput>
  }

  export type PromocionUpdateWithoutPromocionVouchersInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    empresa?: EmpresaUpdateOneRequiredWithoutEmpresaNestedInput
    promociones?: PromocionDetalleUpdateManyWithoutPromocionNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionUncheckedUpdateWithoutPromocionVouchersInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    imagen?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    fechaInicio?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    fechaFin?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    empresaId?: StringFieldUpdateOperationsInput | string
    promociones?: PromocionDetalleUncheckedUpdateManyWithoutPromocionNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductoUpsertWithoutProductosInput = {
    update: XOR<ProductoUpdateWithoutProductosInput, ProductoUncheckedUpdateWithoutProductosInput>
    create: XOR<ProductoCreateWithoutProductosInput, ProductoUncheckedCreateWithoutProductosInput>
  }

  export type ProductoUpdateWithoutProductosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: IntFieldUpdateOperationsInput | number
    precio?: NullableIntFieldUpdateOperationsInput | number | null
    codigoBarra?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    productosPromoDet?: PromocionDetalleUpdateManyWithoutProductoNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProductoUncheckedUpdateWithoutProductosInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    codigo?: IntFieldUpdateOperationsInput | number
    precio?: NullableIntFieldUpdateOperationsInput | number | null
    codigoBarra?: NullableStringFieldUpdateOperationsInput | string | null
    estado?: BoolFieldUpdateOperationsInput | boolean
    orden?: IntFieldUpdateOperationsInput | number
    productosPromoDet?: PromocionDetalleUncheckedUpdateManyWithoutProductoNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUpsertWithoutUsuariosInput = {
    update: XOR<UsuarioUpdateWithoutUsuariosInput, UsuarioUncheckedUpdateWithoutUsuariosInput>
    create: XOR<UsuarioCreateWithoutUsuariosInput, UsuarioUncheckedCreateWithoutUsuariosInput>
  }

  export type UsuarioUpdateWithoutUsuariosInput = {
    cedula?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    empresaUsuario?: EmpresaUpdateOneRequiredWithoutEmpresaUsuarioNestedInput
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUncheckedUpdateWithoutUsuariosInput = {
    cedula?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    empresaId?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VoucherCreateWithoutPromocionProductoInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionVoucher: PromocionCreateNestedOneWithoutPromocionVouchersInput
    cantidad?: number
    usuario: UsuarioCreateNestedOneWithoutUsuariosInput
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherUncheckedCreateWithoutPromocionProductoInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionId: string
    cantidad?: number
    usuarioId: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherCreateOrConnectWithoutPromocionProductoInput = {
    where: VoucherWhereUniqueInput
    create: XOR<VoucherCreateWithoutPromocionProductoInput, VoucherUncheckedCreateWithoutPromocionProductoInput>
  }

  export type VoucherCreateManyPromocionProductoInputEnvelope = {
    data: Enumerable<VoucherCreateManyPromocionProductoInput>
  }

  export type PromocionDetalleCreateWithoutProductoInput = {
    id?: string
    promocion: PromocionCreateNestedOneWithoutPromocionesInput
    porcentaje?: number | null
    monto?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionDetalleUncheckedCreateWithoutProductoInput = {
    id?: string
    promocionId: string
    porcentaje?: number | null
    monto?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionDetalleCreateOrConnectWithoutProductoInput = {
    where: PromocionDetalleWhereUniqueInput
    create: XOR<PromocionDetalleCreateWithoutProductoInput, PromocionDetalleUncheckedCreateWithoutProductoInput>
  }

  export type PromocionDetalleCreateManyProductoInputEnvelope = {
    data: Enumerable<PromocionDetalleCreateManyProductoInput>
  }

  export type VoucherUpsertWithWhereUniqueWithoutPromocionProductoInput = {
    where: VoucherWhereUniqueInput
    update: XOR<VoucherUpdateWithoutPromocionProductoInput, VoucherUncheckedUpdateWithoutPromocionProductoInput>
    create: XOR<VoucherCreateWithoutPromocionProductoInput, VoucherUncheckedCreateWithoutPromocionProductoInput>
  }

  export type VoucherUpdateWithWhereUniqueWithoutPromocionProductoInput = {
    where: VoucherWhereUniqueInput
    data: XOR<VoucherUpdateWithoutPromocionProductoInput, VoucherUncheckedUpdateWithoutPromocionProductoInput>
  }

  export type VoucherUpdateManyWithWhereWithoutPromocionProductoInput = {
    where: VoucherScalarWhereInput
    data: XOR<VoucherUpdateManyMutationInput, VoucherUncheckedUpdateManyWithoutProductosInput>
  }

  export type PromocionDetalleUpsertWithWhereUniqueWithoutProductoInput = {
    where: PromocionDetalleWhereUniqueInput
    update: XOR<PromocionDetalleUpdateWithoutProductoInput, PromocionDetalleUncheckedUpdateWithoutProductoInput>
    create: XOR<PromocionDetalleCreateWithoutProductoInput, PromocionDetalleUncheckedCreateWithoutProductoInput>
  }

  export type PromocionDetalleUpdateWithWhereUniqueWithoutProductoInput = {
    where: PromocionDetalleWhereUniqueInput
    data: XOR<PromocionDetalleUpdateWithoutProductoInput, PromocionDetalleUncheckedUpdateWithoutProductoInput>
  }

  export type PromocionDetalleUpdateManyWithWhereWithoutProductoInput = {
    where: PromocionDetalleScalarWhereInput
    data: XOR<PromocionDetalleUpdateManyMutationInput, PromocionDetalleUncheckedUpdateManyWithoutProductosPromoDetInput>
  }

  export type VoucherCreateManyPromocionVoucherInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    productoId: string
    cantidad?: number
    usuarioId: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionDetalleCreateManyPromocionInput = {
    id?: string
    productoId: string
    porcentaje?: number | null
    monto?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherUpdateWithoutPromocionVoucherInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionProducto?: ProductoUpdateOneRequiredWithoutProductosNestedInput
    cantidad?: IntFieldUpdateOperationsInput | number
    usuario?: UsuarioUpdateOneRequiredWithoutUsuariosNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherUncheckedUpdateWithoutPromocionVoucherInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productoId?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    usuarioId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherUncheckedUpdateManyWithoutPromocionVouchersInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    productoId?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    usuarioId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleUpdateWithoutPromocionInput = {
    producto?: ProductoUpdateOneRequiredWithoutProductosPromoDetNestedInput
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleUncheckedUpdateWithoutPromocionInput = {
    productoId?: StringFieldUpdateOperationsInput | string
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleUncheckedUpdateManyWithoutPromocionesInput = {
    productoId?: StringFieldUpdateOperationsInput | string
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsuarioCreateManyEmpresaUsuarioInput = {
    id?: string
    cedula?: string | null
    codigo?: string | null
    nombre: string
    estado?: boolean
    telefono?: string | null
    email?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type UsuarioUpdateWithoutEmpresaUsuarioInput = {
    cedula?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    usuarios?: VoucherUpdateManyWithoutUsuarioNestedInput
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUncheckedUpdateWithoutEmpresaUsuarioInput = {
    cedula?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    usuarios?: VoucherUncheckedUpdateManyWithoutUsuarioNestedInput
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UsuarioUncheckedUpdateManyWithoutEmpresaUsuarioInput = {
    cedula?: NullableStringFieldUpdateOperationsInput | string | null
    codigo?: NullableStringFieldUpdateOperationsInput | string | null
    nombre?: StringFieldUpdateOperationsInput | string
    estado?: BoolFieldUpdateOperationsInput | boolean
    telefono?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type VoucherCreateManyUsuarioInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionId: string
    productoId: string
    cantidad?: number
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherUpdateWithoutUsuarioInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionVoucher?: PromocionUpdateOneRequiredWithoutPromocionVouchersNestedInput
    promocionProducto?: ProductoUpdateOneRequiredWithoutProductosNestedInput
    cantidad?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherUncheckedUpdateWithoutUsuarioInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionId?: StringFieldUpdateOperationsInput | string
    productoId?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherUncheckedUpdateManyWithoutUsuariosInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionId?: StringFieldUpdateOperationsInput | string
    productoId?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherCreateManyPromocionProductoInput = {
    id?: string
    codigo: number
    fecha?: Date | string
    canjeado?: boolean
    canjeadoFecha?: Date | string | null
    promocionId: string
    cantidad?: number
    usuarioId: string
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type PromocionDetalleCreateManyProductoInput = {
    id?: string
    promocionId: string
    porcentaje?: number | null
    monto?: number | null
    created_at?: Date | string
    updated_at?: Date | string
  }

  export type VoucherUpdateWithoutPromocionProductoInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionVoucher?: PromocionUpdateOneRequiredWithoutPromocionVouchersNestedInput
    cantidad?: IntFieldUpdateOperationsInput | number
    usuario?: UsuarioUpdateOneRequiredWithoutUsuariosNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherUncheckedUpdateWithoutPromocionProductoInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionId?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    usuarioId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VoucherUncheckedUpdateManyWithoutProductosInput = {
    codigo?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    canjeado?: BoolFieldUpdateOperationsInput | boolean
    canjeadoFecha?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    promocionId?: StringFieldUpdateOperationsInput | string
    cantidad?: IntFieldUpdateOperationsInput | number
    usuarioId?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleUpdateWithoutProductoInput = {
    promocion?: PromocionUpdateOneRequiredWithoutPromocionesNestedInput
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleUncheckedUpdateWithoutProductoInput = {
    promocionId?: StringFieldUpdateOperationsInput | string
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PromocionDetalleUncheckedUpdateManyWithoutProductosPromoDetInput = {
    promocionId?: StringFieldUpdateOperationsInput | string
    porcentaje?: NullableIntFieldUpdateOperationsInput | number | null
    monto?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}